
MC2_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002088  0000211c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800078  00800078  00002134  2**0
                  ALLOC
  3 .stab         00002628  00000000  00000000  00002134  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014ef  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000097dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000993c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009bc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a397  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 42 10 	jmp	0x2084	; 0x2084 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:

#include "Buzzer.h"
#include "GPIO.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 96 07 	call	0xf2c	; 0xf2c <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:



void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:



void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:
/*******************************************************************************
 *                                    MAIN                                     *
 *******************************************************************************/

int main(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	65 97       	sbiw	r28, 0x15	; 21
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	/*************************Initialization Structures**************************/

	/*Initialize UART module: Data Size: 8 bits / Parity_status: Disabled / BaudRate: 9600*/
	UART_ConfigType uart_config = {Bits_8, Disabled, One_Bit, 9600};
     bac:	ce 01       	movw	r24, r28
     bae:	02 96       	adiw	r24, 0x02	; 2
     bb0:	9d 87       	std	Y+13, r25	; 0x0d
     bb2:	8c 87       	std	Y+12, r24	; 0x0c
     bb4:	e1 e7       	ldi	r30, 0x71	; 113
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	ff 87       	std	Y+15, r31	; 0x0f
     bba:	ee 87       	std	Y+14, r30	; 0x0e
     bbc:	f7 e0       	ldi	r31, 0x07	; 7
     bbe:	f8 8b       	std	Y+16, r31	; 0x10
     bc0:	ee 85       	ldd	r30, Y+14	; 0x0e
     bc2:	ff 85       	ldd	r31, Y+15	; 0x0f
     bc4:	00 80       	ld	r0, Z
     bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	9f 87       	std	Y+15, r25	; 0x0f
     bce:	8e 87       	std	Y+14, r24	; 0x0e
     bd0:	ec 85       	ldd	r30, Y+12	; 0x0c
     bd2:	fd 85       	ldd	r31, Y+13	; 0x0d
     bd4:	00 82       	st	Z, r0
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	9d 87       	std	Y+13, r25	; 0x0d
     bde:	8c 87       	std	Y+12, r24	; 0x0c
     be0:	98 89       	ldd	r25, Y+16	; 0x10
     be2:	91 50       	subi	r25, 0x01	; 1
     be4:	98 8b       	std	Y+16, r25	; 0x10
     be6:	e8 89       	ldd	r30, Y+16	; 0x10
     be8:	ee 23       	and	r30, r30
     bea:	51 f7       	brne	.-44     	; 0xbc0 <main+0x28>
	/*Initialize I2C module: Address of MC: 0x01 / Bit_Rate: 400 Kbps*/
	TWI_ConfigType i2c_config = {0x01, 400};
     bec:	ce 01       	movw	r24, r28
     bee:	09 96       	adiw	r24, 0x09	; 9
     bf0:	9a 8b       	std	Y+18, r25	; 0x12
     bf2:	89 8b       	std	Y+17, r24	; 0x11
     bf4:	ee e6       	ldi	r30, 0x6E	; 110
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	fc 8b       	std	Y+20, r31	; 0x14
     bfa:	eb 8b       	std	Y+19, r30	; 0x13
     bfc:	f3 e0       	ldi	r31, 0x03	; 3
     bfe:	fd 8b       	std	Y+21, r31	; 0x15
     c00:	eb 89       	ldd	r30, Y+19	; 0x13
     c02:	fc 89       	ldd	r31, Y+20	; 0x14
     c04:	00 80       	ld	r0, Z
     c06:	8b 89       	ldd	r24, Y+19	; 0x13
     c08:	9c 89       	ldd	r25, Y+20	; 0x14
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	9c 8b       	std	Y+20, r25	; 0x14
     c0e:	8b 8b       	std	Y+19, r24	; 0x13
     c10:	e9 89       	ldd	r30, Y+17	; 0x11
     c12:	fa 89       	ldd	r31, Y+18	; 0x12
     c14:	00 82       	st	Z, r0
     c16:	89 89       	ldd	r24, Y+17	; 0x11
     c18:	9a 89       	ldd	r25, Y+18	; 0x12
     c1a:	01 96       	adiw	r24, 0x01	; 1
     c1c:	9a 8b       	std	Y+18, r25	; 0x12
     c1e:	89 8b       	std	Y+17, r24	; 0x11
     c20:	9d 89       	ldd	r25, Y+21	; 0x15
     c22:	91 50       	subi	r25, 0x01	; 1
     c24:	9d 8b       	std	Y+21, r25	; 0x15
     c26:	ed 89       	ldd	r30, Y+21	; 0x15
     c28:	ee 23       	and	r30, r30
     c2a:	51 f7       	brne	.-44     	; 0xc00 <main+0x68>


	/*************************Initialization Functions***************************/
	UART_init(&uart_config);
     c2c:	ce 01       	movw	r24, r28
     c2e:	02 96       	adiw	r24, 0x02	; 2
     c30:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <UART_init>
	TWI_init(&i2c_config);
     c34:	ce 01       	movw	r24, r28
     c36:	09 96       	adiw	r24, 0x09	; 9
     c38:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <TWI_init>
	DcMotor_Init();
     c3c:	0e 94 5d 07 	call	0xeba	; 0xeba <DcMotor_Init>
	Buzzer_init();
     c40:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	SREG |= (1<<7);
     c44:	af e5       	ldi	r26, 0x5F	; 95
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ef e5       	ldi	r30, 0x5F	; 95
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	80 68       	ori	r24, 0x80	; 128
     c50:	8c 93       	st	X, r24


	Control_CompareAndStorePassword();
     c52:	0e 94 41 06 	call	0xc82	; 0xc82 <Control_CompareAndStorePassword>
	while(1)
	{
		uint8 notification_byte;

		/*Establishing connection between two ECUs*/
		while(UART_receiveByte() != HMI_READY_UART);
     c56:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     c5a:	88 23       	and	r24, r24
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <main+0xbe>
		UART_sendByte(CONTROL_READY_UART);
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>

		notification_byte = UART_receiveByte();
     c64:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     c68:	89 83       	std	Y+1, r24	; 0x01


		if(notification_byte == OPEN_DOOR_STATE)
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	8b 32       	cpi	r24, 0x2B	; 43
     c6e:	19 f4       	brne	.+6      	; 0xc76 <main+0xde>
		{
			Control_OpenDoor_state();
     c70:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Control_OpenDoor_state>
     c74:	f0 cf       	rjmp	.-32     	; 0xc56 <main+0xbe>
		}

		else if(notification_byte == CHANGE_PASS_STATE)
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	8d 32       	cpi	r24, 0x2D	; 45
     c7a:	69 f7       	brne	.-38     	; 0xc56 <main+0xbe>
		{
			Control_ChangePass_state();
     c7c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Control_ChangePass_state>
     c80:	ea cf       	rjmp	.-44     	; 0xc56 <main+0xbe>

00000c82 <Control_CompareAndStorePassword>:
 * Used to Receive and Compare the two passwords entered by user
 * If passwords entered match it store password in EEPROM and send to HMI_ECU Confirmation byte
 * If not it send to HMI_ECU that the two passwords un-match and call it self again waiting for the two passwords
 */
void Control_CompareAndStorePassword(void)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2d 97       	sbiw	r28, 0x0d	; 13
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
	uint8 password_second[PASS_MAX_SIZE + 1];
	bool Passwords_Match;

	/*****************************Receive First Password****************************/
	/*Send Ready byte to HMI_ECU to start sending password string*/
	UART_sendByte(CONTROL_READY_UART);
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>

	/* Receive String from HMI through UART */
	UART_receiveString(password_first);
     c9c:	ce 01       	movw	r24, r28
     c9e:	02 96       	adiw	r24, 0x02	; 2
     ca0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <UART_receiveString>


	/****************************Receive Second Password***************************/
	/*Send Ready byte to HMI_ECU to start sending password string*/
	UART_sendByte(CONTROL_READY_UART);
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>

	/*Receive String from HMI through UART*/
	UART_receiveString(password_second);
     caa:	ce 01       	movw	r24, r28
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <UART_receiveString>


	/************************Compare Two Received Passwords*************************/

	/*Calling Compare function defined in HELP_Functions_Control file*/
	Passwords_Match = Control_CompareTwoPasswords(password_first, password_second);
     cb2:	ce 01       	movw	r24, r28
     cb4:	02 96       	adiw	r24, 0x02	; 2
     cb6:	9e 01       	movw	r18, r28
     cb8:	28 5f       	subi	r18, 0xF8	; 248
     cba:	3f 4f       	sbci	r19, 0xFF	; 255
     cbc:	b9 01       	movw	r22, r18
     cbe:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Control_CompareTwoPasswords>
     cc2:	89 83       	std	Y+1, r24	; 0x01


	/*****************************Send Confirmation***********************************/
	/*Wait for HMI_ECU to be ready*/
	while(UART_receiveByte() != HMI_READY_UART){}
     cc4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     cc8:	88 23       	and	r24, r24
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <Control_CompareAndStorePassword+0x42>

	if(Passwords_Match)
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	88 23       	and	r24, r24
     cd0:	41 f0       	breq	.+16     	; 0xce2 <Control_CompareAndStorePassword+0x60>
	{
		UART_sendByte(PASSWORD_MATCH);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		Control_StorePasswordInEEPROM(password_first);
     cd8:	ce 01       	movw	r24, r28
     cda:	02 96       	adiw	r24, 0x02	; 2
     cdc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <Control_StorePasswordInEEPROM>
     ce0:	05 c0       	rjmp	.+10     	; 0xcec <Control_CompareAndStorePassword+0x6a>
	}

	else
	{
		UART_sendByte(PASSWORD_UNMATCH);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		Control_CompareAndStorePassword();
     ce8:	0e 94 41 06 	call	0xc82	; 0xc82 <Control_CompareAndStorePassword>
	}
}
     cec:	2d 96       	adiw	r28, 0x0d	; 13
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <Control_OpenDoor_state>:



void Control_OpenDoor_state(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	27 97       	sbiw	r28, 0x07	; 7
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
	bool Passwords_Match;

	/******************************Receiving User's Password******************************/

	/*Establishing connection between two ECUs*/
	while(UART_receiveByte() != HMI_READY_UART);
     d12:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     d16:	88 23       	and	r24, r24
     d18:	e1 f7       	brne	.-8      	; 0xd12 <Control_OpenDoor_state+0x14>
	UART_sendByte(CONTROL_READY_UART);
     d1a:	8f ef       	ldi	r24, 0xFF	; 255
     d1c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>

	UART_receiveString(password);		/*Receive Password sent by HMI_ECU*/
     d20:	ce 01       	movw	r24, r28
     d22:	02 96       	adiw	r24, 0x02	; 2
     d24:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <UART_receiveString>


	/************Fetch Password from External Memory and Compare with entered************/

	Passwords_Match = Control_FetchExternalMemoryAndComparePassword(password);
     d28:	ce 01       	movw	r24, r28
     d2a:	02 96       	adiw	r24, 0x02	; 2
     d2c:	0e 94 9f 0b 	call	0x173e	; 0x173e <Control_FetchExternalMemoryAndComparePassword>
     d30:	89 83       	std	Y+1, r24	; 0x01


	/*******************Sequence of Opening and Closing Door between two ECUs***************/

	/*Establishing connection between two ECUs*/
	while(UART_receiveByte() != HMI_READY_UART);
     d32:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     d36:	88 23       	and	r24, r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <Control_OpenDoor_state+0x34>
	UART_sendByte(CONTROL_READY_UART);
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>


	if(Passwords_Match)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	88 23       	and	r24, r24
     d44:	41 f0       	breq	.+16     	; 0xd56 <Control_OpenDoor_state+0x58>
	{
		UART_sendByte(PASSWORD_MATCH);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		g_incorrect_pass_count = 0;
     d4c:	10 92 78 00 	sts	0x0078, r1
		OpeningAndClosingDoor();
     d50:	0e 94 0b 07 	call	0xe16	; 0xe16 <OpeningAndClosingDoor>
     d54:	11 c0       	rjmp	.+34     	; 0xd78 <Control_OpenDoor_state+0x7a>
	}

	else
	{

		UART_sendByte(PASSWORD_UNMATCH);			/*Sending to HMI_ECU that passwords un-match to enter its sequence of displaying*/
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		g_incorrect_pass_count++;
     d5c:	80 91 78 00 	lds	r24, 0x0078
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 78 00 	sts	0x0078, r24

		if(g_incorrect_pass_count == 3)
     d66:	80 91 78 00 	lds	r24, 0x0078
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	19 f4       	brne	.+6      	; 0xd74 <Control_OpenDoor_state+0x76>
		{
			Control_AlarmMode();
     d6e:	0e 94 3a 07 	call	0xe74	; 0xe74 <Control_AlarmMode>
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <Control_OpenDoor_state+0x7a>
		}

		else
		{
			Control_OpenDoor_state();
     d74:	0e 94 7f 06 	call	0xcfe	; 0xcfe <Control_OpenDoor_state>
		}
	}

}
     d78:	27 96       	adiw	r28, 0x07	; 7
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <Control_ChangePass_state>:


void Control_ChangePass_state(void)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	27 97       	sbiw	r28, 0x07	; 7
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
	bool Passwords_Match;

	/******************************Receiving User's Password******************************/

	/*Establishing connection between two ECUs*/
	while(UART_receiveByte() != HMI_READY_UART);
     d9e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     da2:	88 23       	and	r24, r24
     da4:	e1 f7       	brne	.-8      	; 0xd9e <Control_ChangePass_state+0x14>
	UART_sendByte(CONTROL_READY_UART);
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>

	UART_receiveString(password);		/*Receive Password sent by HMI_ECU*/
     dac:	ce 01       	movw	r24, r28
     dae:	02 96       	adiw	r24, 0x02	; 2
     db0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <UART_receiveString>


	/************Fetch Password from External Memory and Compare with entered************/

	Passwords_Match = Control_FetchExternalMemoryAndComparePassword(password);
     db4:	ce 01       	movw	r24, r28
     db6:	02 96       	adiw	r24, 0x02	; 2
     db8:	0e 94 9f 0b 	call	0x173e	; 0x173e <Control_FetchExternalMemoryAndComparePassword>
     dbc:	89 83       	std	Y+1, r24	; 0x01


	/**********************Sequence of Changing Pass between two ECUs********************/

	/*Establishing connection between two ECUs*/
	while(UART_receiveByte() != HMI_READY_UART);
     dbe:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
     dc2:	88 23       	and	r24, r24
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <Control_ChangePass_state+0x34>
	UART_sendByte(CONTROL_READY_UART);
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>


	if(Passwords_Match)
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 23       	and	r24, r24
     dd0:	41 f0       	breq	.+16     	; 0xde2 <Control_ChangePass_state+0x58>
	{
		UART_sendByte(PASSWORD_MATCH);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		g_incorrect_pass_count = 0;
     dd8:	10 92 78 00 	sts	0x0078, r1
		Control_CompareAndStorePassword();
     ddc:	0e 94 41 06 	call	0xc82	; 0xc82 <Control_CompareAndStorePassword>
     de0:	11 c0       	rjmp	.+34     	; 0xe04 <Control_ChangePass_state+0x7a>
	}

	else
	{

		UART_sendByte(PASSWORD_UNMATCH);			/*Sending to HMI_ECU that passwords un-match to enter its sequence of displaying*/
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		g_incorrect_pass_count++;
     de8:	80 91 78 00 	lds	r24, 0x0078
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 78 00 	sts	0x0078, r24

		if(g_incorrect_pass_count == 3)
     df2:	80 91 78 00 	lds	r24, 0x0078
     df6:	83 30       	cpi	r24, 0x03	; 3
     df8:	19 f4       	brne	.+6      	; 0xe00 <Control_ChangePass_state+0x76>
		{
			Control_AlarmMode();
     dfa:	0e 94 3a 07 	call	0xe74	; 0xe74 <Control_AlarmMode>
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <Control_ChangePass_state+0x7a>
		}

		else
		{
			Control_ChangePass_state();
     e00:	0e 94 c5 06 	call	0xd8a	; 0xd8a <Control_ChangePass_state>
		}
	}

}
     e04:	27 96       	adiw	r28, 0x07	; 7
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <OpeningAndClosingDoor>:




void OpeningAndClosingDoor(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&g_timer1_config);
     e1e:	88 e6       	ldi	r24, 0x68	; 104
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Timer1_init>
	Timer1_setCallBack(&Timer_CallBackFunction);
     e26:	81 e5       	ldi	r24, 0x51	; 81
     e28:	97 e0       	ldi	r25, 0x07	; 7
     e2a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Timer1_setCallBack>

	g_ticks = 0;
     e2e:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(CLOCKWISE);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 78 07 	call	0xef0	; 0xef0 <DcMotor_Rotate>
	while(g_ticks < DOOR_MOTION_TIME);
     e38:	80 91 7b 00 	lds	r24, 0x007B
     e3c:	8f 30       	cpi	r24, 0x0F	; 15
     e3e:	e0 f3       	brcs	.-8      	; 0xe38 <OpeningAndClosingDoor+0x22>

	g_ticks = 0;
     e40:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(STOP);
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0e 94 78 07 	call	0xef0	; 0xef0 <DcMotor_Rotate>
	while(g_ticks < DOOR_HOLD_TIME);
     e4a:	80 91 7b 00 	lds	r24, 0x007B
     e4e:	83 30       	cpi	r24, 0x03	; 3
     e50:	e0 f3       	brcs	.-8      	; 0xe4a <OpeningAndClosingDoor+0x34>

	g_ticks = 0;
     e52:	10 92 7b 00 	sts	0x007B, r1
	DcMotor_Rotate(ANTI_CLOCKWISE);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 78 07 	call	0xef0	; 0xef0 <DcMotor_Rotate>
	while(g_ticks < DOOR_MOTION_TIME);
     e5c:	80 91 7b 00 	lds	r24, 0x007B
     e60:	8f 30       	cpi	r24, 0x0F	; 15
     e62:	e0 f3       	brcs	.-8      	; 0xe5c <OpeningAndClosingDoor+0x46>

	DcMotor_Rotate(STOP);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	0e 94 78 07 	call	0xef0	; 0xef0 <DcMotor_Rotate>
	Timer1_deInit();
     e6a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Timer1_deInit>
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <Control_AlarmMode>:


void Control_AlarmMode(void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&g_timer1_config);
     e7c:	88 e6       	ldi	r24, 0x68	; 104
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Timer1_init>
	Timer1_setCallBack(&Timer_CallBackFunction);
     e84:	81 e5       	ldi	r24, 0x51	; 81
     e86:	97 e0       	ldi	r25, 0x07	; 7
     e88:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <Timer1_setCallBack>

	Buzzer_on();
     e8c:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>

	g_ticks = 0;
     e90:	10 92 7b 00 	sts	0x007B, r1
	while(g_ticks < ALARM_TIME);
     e94:	80 91 7b 00 	lds	r24, 0x007B
     e98:	8c 33       	cpi	r24, 0x3C	; 60
     e9a:	e0 f3       	brcs	.-8      	; 0xe94 <Control_AlarmMode+0x20>

}
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <Timer_CallBackFunction>:


void Timer_CallBackFunction(void)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     eaa:	80 91 7b 00 	lds	r24, 0x007B
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	80 93 7b 00 	sts	0x007B, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <DcMotor_Init>:




void DcMotor_Init(void)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, PIN_OUTPUT);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	0e 94 96 07 	call	0xf2c	; 0xf2c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, PIN_OUTPUT);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	0e 94 96 07 	call	0xf2c	; 0xf2c <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, LOGIC_LOW);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, LOGIC_LOW);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
}
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN1_ID, GET_BIT(state, DC_MOTOR_PIN1_ID));
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	98 2f       	mov	r25, r24
     f00:	91 70       	andi	r25, 0x01	; 1
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	49 2f       	mov	r20, r25
     f08:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_PIN2_ID, GET_BIT(state, DC_MOTOR_PIN2_ID));
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	86 95       	lsr	r24
     f10:	98 2f       	mov	r25, r24
     f12:	91 70       	andi	r25, 0x01	; 1
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	61 e0       	ldi	r22, 0x01	; 1
     f18:	49 2f       	mov	r20, r25
     f1a:	0e 94 ba 08 	call	0x1174	; 0x1174 <GPIO_writePin>

	PWM_Timer0_Start(100);
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <PWM_Timer0_Start>
}
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <GPIO_setupPinDirection>:
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear the pin specified in DDR Built-in register depends on pin direction parameter
 * by using Macros (SET_BIT or CLEAR_BIT)
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <GPIO_setupPinDirection+0x6>
     f32:	00 d0       	rcall	.+0      	; 0xf34 <GPIO_setupPinDirection+0x8>
     f34:	0f 92       	push	r0
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	6a 83       	std	Y+2, r22	; 0x02
     f3e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_num)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_setupPinDirection+0x2a>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <GPIO_setupPinDirection+0xb0>
     f56:	2c 81       	ldd	r18, Y+4	; 0x04
     f58:	3d 81       	ldd	r19, Y+5	; 0x05
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	2c f4       	brge	.+10     	; 0xf6a <GPIO_setupPinDirection+0x3e>
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	71 f0       	breq	.+28     	; 0xf84 <GPIO_setupPinDirection+0x58>
     f68:	bc c0       	rjmp	.+376    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <GPIO_setupPinDirection+0x4a>
     f74:	5f c0       	rjmp	.+190    	; 0x1034 <GPIO_setupPinDirection+0x108>
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	9d 81       	ldd	r25, Y+5	; 0x05
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <GPIO_setupPinDirection+0x56>
     f80:	85 c0       	rjmp	.+266    	; 0x108c <GPIO_setupPinDirection+0x160>
     f82:	af c0       	rjmp	.+350    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		if(direction == PIN_INPUT)
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	88 23       	and	r24, r24
     f88:	a9 f4       	brne	.+42     	; 0xfb4 <GPIO_setupPinDirection+0x88>
			CLEAR_BIT(DDRA, pin_num);
     f8a:	aa e3       	ldi	r26, 0x3A	; 58
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ea e3       	ldi	r30, 0x3A	; 58
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <GPIO_setupPinDirection+0x7c>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <GPIO_setupPinDirection+0x78>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	97 c0       	rjmp	.+302    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRA, pin_num);
     fb4:	aa e3       	ldi	r26, 0x3A	; 58
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	ea e3       	ldi	r30, 0x3A	; 58
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_setupPinDirection+0xa6>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_setupPinDirection+0xa2>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	83 c0       	rjmp	.+262    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTB_ID:
		if(direction == PIN_INPUT)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 23       	and	r24, r24
     fe0:	a9 f4       	brne	.+42     	; 0x100c <GPIO_setupPinDirection+0xe0>
			CLEAR_BIT(DDRB, pin_num);
     fe2:	a7 e3       	ldi	r26, 0x37	; 55
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e7 e3       	ldi	r30, 0x37	; 55
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_setupPinDirection+0xd4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_setupPinDirection+0xd0>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	6b c0       	rjmp	.+214    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRB, pin_num);
    100c:	a7 e3       	ldi	r26, 0x37	; 55
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e7 e3       	ldi	r30, 0x37	; 55
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <GPIO_setupPinDirection+0xfe>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <GPIO_setupPinDirection+0xfa>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	57 c0       	rjmp	.+174    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTC_ID:
		if(direction == PIN_INPUT)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	88 23       	and	r24, r24
    1038:	a9 f4       	brne	.+42     	; 0x1064 <GPIO_setupPinDirection+0x138>
			CLEAR_BIT(DDRC, pin_num);
    103a:	a4 e3       	ldi	r26, 0x34	; 52
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e4 e3       	ldi	r30, 0x34	; 52
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <GPIO_setupPinDirection+0x12c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <GPIO_setupPinDirection+0x128>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	3f c0       	rjmp	.+126    	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRC, pin_num);
    1064:	a4 e3       	ldi	r26, 0x34	; 52
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e4 e3       	ldi	r30, 0x34	; 52
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <GPIO_setupPinDirection+0x156>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <GPIO_setupPinDirection+0x152>
    1086:	84 2b       	or	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	2b c0       	rjmp	.+86     	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTD_ID:
		if(direction == PIN_INPUT)
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	88 23       	and	r24, r24
    1090:	a9 f4       	brne	.+42     	; 0x10bc <GPIO_setupPinDirection+0x190>
			CLEAR_BIT(DDRD, pin_num);
    1092:	a1 e3       	ldi	r26, 0x31	; 49
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e1 e3       	ldi	r30, 0x31	; 49
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <GPIO_setupPinDirection+0x184>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <GPIO_setupPinDirection+0x180>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRD, pin_num);
    10bc:	a1 e3       	ldi	r26, 0x31	; 49
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e1 e3       	ldi	r30, 0x31	; 49
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <GPIO_setupPinDirection+0x1ae>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <GPIO_setupPinDirection+0x1aa>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24

		break;
	}
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <GPIO_setupPortDirection>:
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on DDR Built-in register on determined PORT depends on
 * direction parameter.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <GPIO_setupPortDirection+0x6>
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <GPIO_setupPortDirection+0x8>
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3c 83       	std	Y+4, r19	; 0x04
    110a:	2b 83       	std	Y+3, r18	; 0x03
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	91 05       	cpc	r25, r1
    1114:	d1 f0       	breq	.+52     	; 0x114a <GPIO_setupPortDirection+0x58>
    1116:	2b 81       	ldd	r18, Y+3	; 0x03
    1118:	3c 81       	ldd	r19, Y+4	; 0x04
    111a:	22 30       	cpi	r18, 0x02	; 2
    111c:	31 05       	cpc	r19, r1
    111e:	2c f4       	brge	.+10     	; 0x112a <GPIO_setupPortDirection+0x38>
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	61 f0       	breq	.+24     	; 0x1140 <GPIO_setupPortDirection+0x4e>
    1128:	1e c0       	rjmp	.+60     	; 0x1166 <GPIO_setupPortDirection+0x74>
    112a:	2b 81       	ldd	r18, Y+3	; 0x03
    112c:	3c 81       	ldd	r19, Y+4	; 0x04
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <GPIO_setupPortDirection+0x62>
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	81 f0       	breq	.+32     	; 0x115e <GPIO_setupPortDirection+0x6c>
    113e:	13 c0       	rjmp	.+38     	; 0x1166 <GPIO_setupPortDirection+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		DDRA = direction;
    1140:	ea e3       	ldi	r30, 0x3A	; 58
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
    1148:	0e c0       	rjmp	.+28     	; 0x1166 <GPIO_setupPortDirection+0x74>
		break;

	case PORTB_ID:
		DDRB = direction;
    114a:	e7 e3       	ldi	r30, 0x37	; 55
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	80 83       	st	Z, r24
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <GPIO_setupPortDirection+0x74>
		break;

	case PORTC_ID:
		DDRC = direction;
    1154:	e4 e3       	ldi	r30, 0x34	; 52
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	80 83       	st	Z, r24
    115c:	04 c0       	rjmp	.+8      	; 0x1166 <GPIO_setupPortDirection+0x74>
		break;

	case PORTD_ID:
		DDRD = direction;
    115e:	e1 e3       	ldi	r30, 0x31	; 49
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
		break;
	}
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <GPIO_writePin>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on PORT register on determined PORT depends on direction parameter.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <GPIO_writePin+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <GPIO_writePin+0x8>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
    1186:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_num)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3d 83       	std	Y+5, r19	; 0x05
    1190:	2c 83       	std	Y+4, r18	; 0x04
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <GPIO_writePin+0x2a>
    119c:	43 c0       	rjmp	.+134    	; 0x1224 <GPIO_writePin+0xb0>
    119e:	2c 81       	ldd	r18, Y+4	; 0x04
    11a0:	3d 81       	ldd	r19, Y+5	; 0x05
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <GPIO_writePin+0x3e>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	71 f0       	breq	.+28     	; 0x11cc <GPIO_writePin+0x58>
    11b0:	bc c0       	rjmp	.+376    	; 0x132a <GPIO_writePin+0x1b6>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	09 f4       	brne	.+2      	; 0x11be <GPIO_writePin+0x4a>
    11bc:	5f c0       	rjmp	.+190    	; 0x127c <GPIO_writePin+0x108>
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	83 30       	cpi	r24, 0x03	; 3
    11c4:	91 05       	cpc	r25, r1
    11c6:	09 f4       	brne	.+2      	; 0x11ca <GPIO_writePin+0x56>
    11c8:	85 c0       	rjmp	.+266    	; 0x12d4 <GPIO_writePin+0x160>
    11ca:	af c0       	rjmp	.+350    	; 0x132a <GPIO_writePin+0x1b6>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		if(value == LOGIC_LOW)
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 23       	and	r24, r24
    11d0:	a9 f4       	brne	.+42     	; 0x11fc <GPIO_writePin+0x88>
			CLEAR_BIT(PORTA, pin_num);
    11d2:	ab e3       	ldi	r26, 0x3B	; 59
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <GPIO_writePin+0x7c>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <GPIO_writePin+0x78>
    11f4:	80 95       	com	r24
    11f6:	84 23       	and	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	97 c0       	rjmp	.+302    	; 0x132a <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTA, pin_num);
    11fc:	ab e3       	ldi	r26, 0x3B	; 59
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	eb e3       	ldi	r30, 0x3B	; 59
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <GPIO_writePin+0xa6>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <GPIO_writePin+0xa2>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	83 c0       	rjmp	.+262    	; 0x132a <GPIO_writePin+0x1b6>

		break;

	case PORTB_ID:
		if(value == LOGIC_LOW)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	88 23       	and	r24, r24
    1228:	a9 f4       	brne	.+42     	; 0x1254 <GPIO_writePin+0xe0>
			CLEAR_BIT(PORTB, pin_num);
    122a:	a8 e3       	ldi	r26, 0x38	; 56
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e8 e3       	ldi	r30, 0x38	; 56
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_writePin+0xd4>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_writePin+0xd0>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	6b c0       	rjmp	.+214    	; 0x132a <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTB, pin_num);
    1254:	a8 e3       	ldi	r26, 0x38	; 56
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e8 e3       	ldi	r30, 0x38	; 56
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <GPIO_writePin+0xfe>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <GPIO_writePin+0xfa>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	57 c0       	rjmp	.+174    	; 0x132a <GPIO_writePin+0x1b6>

		break;

	case PORTC_ID:
		if(value == LOGIC_LOW)
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 23       	and	r24, r24
    1280:	a9 f4       	brne	.+42     	; 0x12ac <GPIO_writePin+0x138>
			CLEAR_BIT(PORTC, pin_num);
    1282:	a5 e3       	ldi	r26, 0x35	; 53
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	02 2e       	mov	r0, r18
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <GPIO_writePin+0x12c>
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	0a 94       	dec	r0
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <GPIO_writePin+0x128>
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	8c 93       	st	X, r24
    12aa:	3f c0       	rjmp	.+126    	; 0x132a <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTC, pin_num);
    12ac:	a5 e3       	ldi	r26, 0x35	; 53
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e3       	ldi	r30, 0x35	; 53
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <GPIO_writePin+0x156>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <GPIO_writePin+0x152>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	2b c0       	rjmp	.+86     	; 0x132a <GPIO_writePin+0x1b6>

		break;

	case PORTD_ID:
		if(value == LOGIC_LOW)
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	88 23       	and	r24, r24
    12d8:	a9 f4       	brne	.+42     	; 0x1304 <GPIO_writePin+0x190>
			CLEAR_BIT(PORTD, pin_num);
    12da:	a2 e3       	ldi	r26, 0x32	; 50
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e2 e3       	ldi	r30, 0x32	; 50
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	48 2f       	mov	r20, r24
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 2e       	mov	r0, r18
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <GPIO_writePin+0x184>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	0a 94       	dec	r0
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <GPIO_writePin+0x180>
    12fc:	80 95       	com	r24
    12fe:	84 23       	and	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	13 c0       	rjmp	.+38     	; 0x132a <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTD, pin_num);
    1304:	a2 e3       	ldi	r26, 0x32	; 50
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e2 e3       	ldi	r30, 0x32	; 50
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_writePin+0x1ae>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_writePin+0x1aa>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24

		break;
	}
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <GPIO_writePort>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on PORT register by value argument.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <GPIO_writePort+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <GPIO_writePort+0x8>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3c 83       	std	Y+4, r19	; 0x04
    1352:	2b 83       	std	Y+3, r18	; 0x03
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	d1 f0       	breq	.+52     	; 0x1392 <GPIO_writePort+0x58>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <GPIO_writePort+0x38>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	61 f0       	breq	.+24     	; 0x1388 <GPIO_writePort+0x4e>
    1370:	1e c0       	rjmp	.+60     	; 0x13ae <GPIO_writePort+0x74>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <GPIO_writePort+0x62>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	81 f0       	breq	.+32     	; 0x13a6 <GPIO_writePort+0x6c>
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <GPIO_writePort+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		PORTA = value;
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	80 83       	st	Z, r24
    1390:	0e c0       	rjmp	.+28     	; 0x13ae <GPIO_writePort+0x74>
		break;

	case PORTB_ID:
		PORTB = value;
    1392:	e8 e3       	ldi	r30, 0x38	; 56
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	80 83       	st	Z, r24
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <GPIO_writePort+0x74>
		break;

	case PORTC_ID:
		PORTC = value;
    139c:	e5 e3       	ldi	r30, 0x35	; 53
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	80 83       	st	Z, r24
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <GPIO_writePort+0x74>
		break;

	case PORTD_ID:
		PORTD = value;
    13a6:	e2 e3       	ldi	r30, 0x32	; 50
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	80 83       	st	Z, r24
		break;
	}
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <GPIO_readPin>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * get the value of a specific pin on PIN register by using GET_BIT macro.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <GPIO_readPin+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <GPIO_readPin+0x8>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_read = LOGIC_LOW;
    13ce:	19 82       	std	Y+1, r1	; 0x01

	switch(port_num)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	4c 81       	ldd	r20, Y+4	; 0x04
    13dc:	5d 81       	ldd	r21, Y+5	; 0x05
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	51 05       	cpc	r21, r1
    13e2:	41 f1       	breq	.+80     	; 0x1434 <GPIO_readPin+0x78>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	91 05       	cpc	r25, r1
    13ec:	34 f4       	brge	.+12     	; 0x13fa <GPIO_readPin+0x3e>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	21 15       	cp	r18, r1
    13f4:	31 05       	cpc	r19, r1
    13f6:	61 f0       	breq	.+24     	; 0x1410 <GPIO_readPin+0x54>
    13f8:	52 c0       	rjmp	.+164    	; 0x149e <GPIO_readPin+0xe2>
    13fa:	4c 81       	ldd	r20, Y+4	; 0x04
    13fc:	5d 81       	ldd	r21, Y+5	; 0x05
    13fe:	42 30       	cpi	r20, 0x02	; 2
    1400:	51 05       	cpc	r21, r1
    1402:	51 f1       	breq	.+84     	; 0x1458 <GPIO_readPin+0x9c>
    1404:	8c 81       	ldd	r24, Y+4	; 0x04
    1406:	9d 81       	ldd	r25, Y+5	; 0x05
    1408:	83 30       	cpi	r24, 0x03	; 3
    140a:	91 05       	cpc	r25, r1
    140c:	b9 f1       	breq	.+110    	; 0x147c <GPIO_readPin+0xc0>
    140e:	47 c0       	rjmp	.+142    	; 0x149e <GPIO_readPin+0xe2>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		pin_read = GET_BIT(PINA, pin_num);
    1410:	e9 e3       	ldi	r30, 0x39	; 57
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <GPIO_readPin+0x6c>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <GPIO_readPin+0x68>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	35 c0       	rjmp	.+106    	; 0x149e <GPIO_readPin+0xe2>
		break;

	case PORTB_ID:
		pin_read = GET_BIT(PINB, pin_num);
    1434:	e6 e3       	ldi	r30, 0x36	; 54
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_readPin+0x90>
    1448:	55 95       	asr	r21
    144a:	47 95       	ror	r20
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_readPin+0x8c>
    1450:	ca 01       	movw	r24, r20
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	23 c0       	rjmp	.+70     	; 0x149e <GPIO_readPin+0xe2>
		break;

	case PORTC_ID:
		pin_read = GET_BIT(PINC, pin_num);
    1458:	e3 e3       	ldi	r30, 0x33	; 51
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a9 01       	movw	r20, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_readPin+0xb4>
    146c:	55 95       	asr	r21
    146e:	47 95       	ror	r20
    1470:	8a 95       	dec	r24
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_readPin+0xb0>
    1474:	ca 01       	movw	r24, r20
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	11 c0       	rjmp	.+34     	; 0x149e <GPIO_readPin+0xe2>
		break;

	case PORTD_ID:
		pin_read = GET_BIT(PIND, pin_num);
    147c:	e0 e3       	ldi	r30, 0x30	; 48
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_readPin+0xd8>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_readPin+0xd4>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return pin_read;
    149e:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <GPIO_readPort>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * get the value of PIN register.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <GPIO_readPort+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <GPIO_readPort+0x8>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_read = LOGIC_LOW;
    14be:	19 82       	std	Y+1, r1	; 0x01

	switch(port_num)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	3c 83       	std	Y+4, r19	; 0x04
    14c8:	2b 83       	std	Y+3, r18	; 0x03
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	91 05       	cpc	r25, r1
    14d2:	d1 f0       	breq	.+52     	; 0x1508 <GPIO_readPort+0x58>
    14d4:	2b 81       	ldd	r18, Y+3	; 0x03
    14d6:	3c 81       	ldd	r19, Y+4	; 0x04
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <GPIO_readPort+0x38>
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	61 f0       	breq	.+24     	; 0x14fe <GPIO_readPort+0x4e>
    14e6:	1e c0       	rjmp	.+60     	; 0x1524 <GPIO_readPort+0x74>
    14e8:	2b 81       	ldd	r18, Y+3	; 0x03
    14ea:	3c 81       	ldd	r19, Y+4	; 0x04
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	81 f0       	breq	.+32     	; 0x1512 <GPIO_readPort+0x62>
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	81 f0       	breq	.+32     	; 0x151c <GPIO_readPort+0x6c>
    14fc:	13 c0       	rjmp	.+38     	; 0x1524 <GPIO_readPort+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		port_read = PINA;
    14fe:	e9 e3       	ldi	r30, 0x39	; 57
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	89 83       	std	Y+1, r24	; 0x01
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <GPIO_readPort+0x74>
		break;

	case PORTB_ID:
		port_read = PINB;
    1508:	e6 e3       	ldi	r30, 0x36	; 54
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	09 c0       	rjmp	.+18     	; 0x1524 <GPIO_readPort+0x74>
		break;

	case PORTC_ID:
		port_read = PINC;
    1512:	e3 e3       	ldi	r30, 0x33	; 51
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	04 c0       	rjmp	.+8      	; 0x1524 <GPIO_readPort+0x74>
		break;

	case PORTD_ID:
		port_read = PIND;
    151c:	e0 e3       	ldi	r30, 0x30	; 48
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return port_read;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <Control_CompareTwoPasswords>:
/*******************************************************************************
 *                            Functions Definition                             *
 *******************************************************************************/

bool Control_CompareTwoPasswords(uint8 *pass1 , uint8 *pass2)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	27 97       	sbiw	r28, 0x07	; 7
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	7e 83       	std	Y+6, r23	; 0x06
    154e:	6d 83       	std	Y+5, r22	; 0x05
	bool Passwords_Match = TRUE;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	29 c0       	rjmp	.+82     	; 0x15aa <Control_CompareTwoPasswords+0x76>

	while(pass1[i] != '\0' || pass1[i] != '\0')
	{
		g_app_password[i] = pass1[i];
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	48 2f       	mov	r20, r24
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	fc 01       	movw	r30, r24
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	80 81       	ld	r24, Z
    1570:	fa 01       	movw	r30, r20
    1572:	e4 58       	subi	r30, 0x84	; 132
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 83       	st	Z, r24
		if(pass1[i] != pass2[i])
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	fc 01       	movw	r30, r24
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	40 81       	ld	r20, Z
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8d 81       	ldd	r24, Y+5	; 0x05
    1592:	9e 81       	ldd	r25, Y+6	; 0x06
    1594:	fc 01       	movw	r30, r24
    1596:	e2 0f       	add	r30, r18
    1598:	f3 1f       	adc	r31, r19
    159a:	80 81       	ld	r24, Z
    159c:	48 17       	cp	r20, r24
    159e:	11 f0       	breq	.+4      	; 0x15a4 <Control_CompareTwoPasswords+0x70>
		{
			Passwords_Match = FALSE;
    15a0:	1a 82       	std	Y+2, r1	; 0x02
    15a2:	19 c0       	rjmp	.+50     	; 0x15d6 <Control_CompareTwoPasswords+0xa2>
			break;
		}

		i++;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	8f 5f       	subi	r24, 0xFF	; 255
    15a8:	89 83       	std	Y+1, r24	; 0x01
bool Control_CompareTwoPasswords(uint8 *pass1 , uint8 *pass2)
{
	bool Passwords_Match = TRUE;
	uint8 i = 0;

	while(pass1[i] != '\0' || pass1[i] != '\0')
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	fc 01       	movw	r30, r24
    15b6:	e2 0f       	add	r30, r18
    15b8:	f3 1f       	adc	r31, r19
    15ba:	80 81       	ld	r24, Z
    15bc:	88 23       	and	r24, r24
    15be:	61 f6       	brne	.-104    	; 0x1558 <Control_CompareTwoPasswords+0x24>
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	fc 01       	movw	r30, r24
    15cc:	e2 0f       	add	r30, r18
    15ce:	f3 1f       	adc	r31, r19
    15d0:	80 81       	ld	r24, Z
    15d2:	88 23       	and	r24, r24
    15d4:	09 f6       	brne	.-126    	; 0x1558 <Control_CompareTwoPasswords+0x24>

		i++;
	}


	if(Passwords_Match == TRUE)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	19 f4       	brne	.+6      	; 0x15e2 <Control_CompareTwoPasswords+0xae>
	{
		return TRUE;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8f 83       	std	Y+7, r24	; 0x07
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <Control_CompareTwoPasswords+0xb0>
	}

	else
	{
		return FALSE;
    15e2:	1f 82       	std	Y+7, r1	; 0x07
    15e4:	8f 81       	ldd	r24, Y+7	; 0x07
	}
}
    15e6:	27 96       	adiw	r28, 0x07	; 7
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	cf 91       	pop	r28
    15f4:	df 91       	pop	r29
    15f6:	08 95       	ret

000015f8 <Control_StorePasswordInEEPROM>:


void Control_StorePasswordInEEPROM(uint8 *pass)
{
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	61 97       	sbiw	r28, 0x11	; 17
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	99 8b       	std	Y+17, r25	; 0x11
    160e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    1610:	1f 86       	std	Y+15, r1	; 0x0f
    1612:	88 c0       	rjmp	.+272    	; 0x1724 <Control_StorePasswordInEEPROM+0x12c>
	{
		EEPROM_writeByte(0x0300 + i, *(pass + i));
    1614:	8f 85       	ldd	r24, Y+15	; 0x0f
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	80 50       	subi	r24, 0x00	; 0
    161c:	9d 4f       	sbci	r25, 0xFD	; 253
    161e:	ac 01       	movw	r20, r24
    1620:	8f 85       	ldd	r24, Y+15	; 0x0f
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	88 89       	ldd	r24, Y+16	; 0x10
    1628:	99 89       	ldd	r25, Y+17	; 0x11
    162a:	fc 01       	movw	r30, r24
    162c:	e2 0f       	add	r30, r18
    162e:	f3 1f       	adc	r31, r19
    1630:	20 81       	ld	r18, Z
    1632:	ca 01       	movw	r24, r20
    1634:	62 2f       	mov	r22, r18
    1636:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <EEPROM_writeByte>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 ea       	ldi	r26, 0xA0	; 160
    1640:	b1 e4       	ldi	r27, 0x41	; 65
    1642:	8b 87       	std	Y+11, r24	; 0x0b
    1644:	9c 87       	std	Y+12, r25	; 0x0c
    1646:	ad 87       	std	Y+13, r26	; 0x0d
    1648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a ef       	ldi	r20, 0xFA	; 250
    1658:	54 e4       	ldi	r21, 0x44	; 68
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8f 83       	std	Y+7, r24	; 0x07
    1664:	98 87       	std	Y+8, r25	; 0x08
    1666:	a9 87       	std	Y+9, r26	; 0x09
    1668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166a:	6f 81       	ldd	r22, Y+7	; 0x07
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	89 85       	ldd	r24, Y+9	; 0x09
    1670:	9a 85       	ldd	r25, Y+10	; 0x0a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <Control_StorePasswordInEEPROM+0x94>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	3f c0       	rjmp	.+126    	; 0x170a <Control_StorePasswordInEEPROM+0x112>
	else if (__tmp > 65535)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <Control_StorePasswordInEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <Control_StorePasswordInEEPROM+0xf4>
    16ce:	88 ec       	ldi	r24, 0xC8	; 200
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <Control_StorePasswordInEEPROM+0xe2>
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <Control_StorePasswordInEEPROM+0xd6>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <Control_StorePasswordInEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <Control_StorePasswordInEEPROM+0x11e>
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01

void Control_StorePasswordInEEPROM(uint8 *pass)
{
	uint8 i;

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    171e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1720:	8f 5f       	subi	r24, 0xFF	; 255
    1722:	8f 87       	std	Y+15, r24	; 0x0f
    1724:	8f 85       	ldd	r24, Y+15	; 0x0f
    1726:	85 30       	cpi	r24, 0x05	; 5
    1728:	08 f4       	brcc	.+2      	; 0x172c <Control_StorePasswordInEEPROM+0x134>
    172a:	74 cf       	rjmp	.-280    	; 0x1614 <Control_StorePasswordInEEPROM+0x1c>
	{
		EEPROM_writeByte(0x0300 + i, *(pass + i));
		_delay_ms(20);
	}
}
    172c:	61 96       	adiw	r28, 0x11	; 17
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <Control_FetchExternalMemoryAndComparePassword>:


bool Control_FetchExternalMemoryAndComparePassword(uint8 *pass_entered)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	67 97       	sbiw	r28, 0x17	; 23
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	9f 8b       	std	Y+23, r25	; 0x17
    1754:	8e 8b       	std	Y+22, r24	; 0x16
	uint8 i;
	uint8 pass_saved[PASS_MAX_SIZE];
	bool Passwords_Match = TRUE;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	8f 87       	std	Y+15, r24	; 0x0f

	/**************************Fetch Password from External Memory***************************/

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    175a:	18 8a       	std	Y+16, r1	; 0x10
    175c:	87 c0       	rjmp	.+270    	; 0x186c <Control_FetchExternalMemoryAndComparePassword+0x12e>
	{
		EEPROM_readByte((EEPROM_PASS_ADDRESS + i), &pass_saved[i]);
    175e:	88 89       	ldd	r24, Y+16	; 0x10
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	80 50       	subi	r24, 0x00	; 0
    1766:	9d 4f       	sbci	r25, 0xFD	; 253
    1768:	ac 01       	movw	r20, r24
    176a:	88 89       	ldd	r24, Y+16	; 0x10
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e 01       	movw	r18, r28
    1772:	2f 5e       	subi	r18, 0xEF	; 239
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	28 0f       	add	r18, r24
    1778:	39 1f       	adc	r19, r25
    177a:	ca 01       	movw	r24, r20
    177c:	b9 01       	movw	r22, r18
    177e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <EEPROM_readByte>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 ea       	ldi	r26, 0xA0	; 160
    1788:	b1 e4       	ldi	r27, 0x41	; 65
    178a:	8b 87       	std	Y+11, r24	; 0x0b
    178c:	9c 87       	std	Y+12, r25	; 0x0c
    178e:	ad 87       	std	Y+13, r26	; 0x0d
    1790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a ef       	ldi	r20, 0xFA	; 250
    17a0:	54 e4       	ldi	r21, 0x44	; 68
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8f 83       	std	Y+7, r24	; 0x07
    17ac:	98 87       	std	Y+8, r25	; 0x08
    17ae:	a9 87       	std	Y+9, r26	; 0x09
    17b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <Control_FetchExternalMemoryAndComparePassword+0x96>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9e 83       	std	Y+6, r25	; 0x06
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <Control_FetchExternalMemoryAndComparePassword+0x114>
	else if (__tmp > 65535)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <Control_FetchExternalMemoryAndComparePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <Control_FetchExternalMemoryAndComparePassword+0xf6>
    1816:	88 ec       	ldi	r24, 0xC8	; 200
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <Control_FetchExternalMemoryAndComparePassword+0xe4>
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <Control_FetchExternalMemoryAndComparePassword+0xd8>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <Control_FetchExternalMemoryAndComparePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6f 81       	ldd	r22, Y+7	; 0x07
    1840:	78 85       	ldd	r23, Y+8	; 0x08
    1842:	89 85       	ldd	r24, Y+9	; 0x09
    1844:	9a 85       	ldd	r25, Y+10	; 0x0a
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <Control_FetchExternalMemoryAndComparePassword+0x120>
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
	uint8 pass_saved[PASS_MAX_SIZE];
	bool Passwords_Match = TRUE;

	/**************************Fetch Password from External Memory***************************/

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    1866:	88 89       	ldd	r24, Y+16	; 0x10
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	88 8b       	std	Y+16, r24	; 0x10
    186c:	88 89       	ldd	r24, Y+16	; 0x10
    186e:	85 30       	cpi	r24, 0x05	; 5
    1870:	08 f4       	brcc	.+2      	; 0x1874 <Control_FetchExternalMemoryAndComparePassword+0x136>
    1872:	75 cf       	rjmp	.-278    	; 0x175e <Control_FetchExternalMemoryAndComparePassword+0x20>
		_delay_ms(20);
	}

	/******************************Compare Two Saved & Entered********************************/

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    1874:	18 8a       	std	Y+16, r1	; 0x10
    1876:	19 c0       	rjmp	.+50     	; 0x18aa <Control_FetchExternalMemoryAndComparePassword+0x16c>
	{
		if(pass_saved[i] != pass_entered[i])
    1878:	88 89       	ldd	r24, Y+16	; 0x10
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	ce 01       	movw	r24, r28
    1880:	41 96       	adiw	r24, 0x11	; 17
    1882:	fc 01       	movw	r30, r24
    1884:	e2 0f       	add	r30, r18
    1886:	f3 1f       	adc	r31, r19
    1888:	40 81       	ld	r20, Z
    188a:	88 89       	ldd	r24, Y+16	; 0x10
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	8e 89       	ldd	r24, Y+22	; 0x16
    1892:	9f 89       	ldd	r25, Y+23	; 0x17
    1894:	fc 01       	movw	r30, r24
    1896:	e2 0f       	add	r30, r18
    1898:	f3 1f       	adc	r31, r19
    189a:	80 81       	ld	r24, Z
    189c:	48 17       	cp	r20, r24
    189e:	11 f0       	breq	.+4      	; 0x18a4 <Control_FetchExternalMemoryAndComparePassword+0x166>
		{
			Passwords_Match = FALSE;
    18a0:	1f 86       	std	Y+15, r1	; 0x0f
    18a2:	06 c0       	rjmp	.+12     	; 0x18b0 <Control_FetchExternalMemoryAndComparePassword+0x172>
		_delay_ms(20);
	}

	/******************************Compare Two Saved & Entered********************************/

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    18a4:	88 89       	ldd	r24, Y+16	; 0x10
    18a6:	8f 5f       	subi	r24, 0xFF	; 255
    18a8:	88 8b       	std	Y+16, r24	; 0x10
    18aa:	88 89       	ldd	r24, Y+16	; 0x10
    18ac:	85 30       	cpi	r24, 0x05	; 5
    18ae:	20 f3       	brcs	.-56     	; 0x1878 <Control_FetchExternalMemoryAndComparePassword+0x13a>
			Passwords_Match = FALSE;
			break;
		}
	}

	return Passwords_Match;
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18b2:	67 96       	adiw	r28, 0x17	; 23
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <TWI_init>:
#include "Macros.h"
#include <avr/io.h>


void TWI_init(const TWI_ConfigType * I2C_Config_Ptr)
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	00 d0       	rcall	.+0      	; 0x18ce <TWI_init+0xa>
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
	/* F_SCL (Kbps) = (F_CPU) / (16 + 2*TWBR*(4^TWPS)
	 * TWPS = 0 (Zero Pre-scale).
	 * TWBR = (((F_CPU / F_SCL) * 1000 * 2) - (16/2))
	 * F_SCL is configured by the user in the input structure.
	 */
	TWBR = (uint8)((F_CPU / (I2C_Config_Ptr->bit_rate) * 1000 * 2) - 8);
    18d6:	00 e2       	ldi	r16, 0x20	; 32
    18d8:	10 e0       	ldi	r17, 0x00	; 0
    18da:	e9 81       	ldd	r30, Y+1	; 0x01
    18dc:	fa 81       	ldd	r31, Y+2	; 0x02
    18de:	81 81       	ldd	r24, Z+1	; 0x01
    18e0:	92 81       	ldd	r25, Z+2	; 0x02
    18e2:	9c 01       	movw	r18, r24
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	50 e0       	ldi	r21, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	92 e1       	ldi	r25, 0x12	; 18
    18ec:	aa e7       	ldi	r26, 0x7A	; 122
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
    18f8:	da 01       	movw	r26, r20
    18fa:	c9 01       	movw	r24, r18
    18fc:	20 ed       	ldi	r18, 0xD0	; 208
    18fe:	37 e0       	ldi	r19, 0x07	; 7
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__mulsi3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	88 50       	subi	r24, 0x08	; 8
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24


    /* TWI Address of MC is configured by the user in the input structure.*/
    TWAR = ((I2C_Config_Ptr->address) << TWA0);
    1916:	a2 e2       	ldi	r26, 0x22	; 34
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e9 81       	ldd	r30, Y+1	; 0x01
    191c:	fa 81       	ldd	r31, Y+2	; 0x02
    191e:	80 81       	ld	r24, Z
    1920:	88 0f       	add	r24, r24
    1922:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1924:	e6 e5       	ldi	r30, 0x56	; 86
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	84 e0       	ldi	r24, 0x04	; 4
    192a:	80 83       	st	Z, r24
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <TWI_start>:

void TWI_start(void)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1942:	e6 e5       	ldi	r30, 0x56	; 86
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	84 ea       	ldi	r24, 0xA4	; 164
    1948:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    194a:	e6 e5       	ldi	r30, 0x56	; 86
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	88 23       	and	r24, r24
    1952:	dc f7       	brge	.-10     	; 0x194a <TWI_start+0x10>
}
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <TWI_stop>:

void TWI_stop(void)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1962:	e6 e5       	ldi	r30, 0x56	; 86
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	84 e9       	ldi	r24, 0x94	; 148
    1968:	80 83       	st	Z, r24
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	0f 92       	push	r0
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    197c:	e3 e2       	ldi	r30, 0x23	; 35
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1984:	e6 e5       	ldi	r30, 0x56	; 86
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	84 e8       	ldi	r24, 0x84	; 132
    198a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    198c:	e6 e5       	ldi	r30, 0x56	; 86
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	88 23       	and	r24, r24
    1994:	dc f7       	brge	.-10     	; 0x198c <TWI_writeByte+0x1c>
}
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	84 ec       	ldi	r24, 0xC4	; 196
    19ac:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    19ae:	e6 e5       	ldi	r30, 0x56	; 86
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 23       	and	r24, r24
    19b6:	dc f7       	brge	.-10     	; 0x19ae <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    19b8:	e3 e2       	ldi	r30, 0x23	; 35
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
}
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    19cc:	e6 e5       	ldi	r30, 0x56	; 86
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	84 e8       	ldi	r24, 0x84	; 132
    19d2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    19d4:	e6 e5       	ldi	r30, 0x56	; 86
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	88 23       	and	r24, r24
    19dc:	dc f7       	brge	.-10     	; 0x19d4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    19de:	e3 e2       	ldi	r30, 0x23	; 35
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    19f4:	e1 e2       	ldi	r30, 0x21	; 33
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	88 7f       	andi	r24, 0xF8	; 248
    19fc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <PWM_Timer0_Start>:

#include "GPIO.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8 duty_cycle)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	0f 92       	push	r0
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0 	= 0		PWM mode
	 * WGM0:1	= 1,1	Fast PWM
	 * COM0:1	= 0,1	Non-Inverting Mode
	 * CS0:2	= 0,1,0	Pre-Scale 8
	 */
	TCCR0 = (1<<WGM01) | (1<<WGM00) | (1<<COM01) | (1<<CS01);
    1a14:	e3 e5       	ldi	r30, 0x53	; 83
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a e6       	ldi	r24, 0x6A	; 106
    1a1a:	80 83       	st	Z, r24

	/*Determine duty cycle based on passed Argument of function*/
	OCR0 = (uint8)((uint16)(MAX_COMPARE_REG_VALUE * duty_cycle)/MAX_PERCENTAGE);
    1a1c:	ec e5       	ldi	r30, 0x5C	; 92
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	48 2f       	mov	r20, r24
    1a24:	50 e0       	ldi	r21, 0x00	; 0
    1a26:	ca 01       	movw	r24, r20
    1a28:	9c 01       	movw	r18, r24
    1a2a:	22 0f       	add	r18, r18
    1a2c:	33 1f       	adc	r19, r19
    1a2e:	c9 01       	movw	r24, r18
    1a30:	96 95       	lsr	r25
    1a32:	98 2f       	mov	r25, r24
    1a34:	88 27       	eor	r24, r24
    1a36:	97 95       	ror	r25
    1a38:	87 95       	ror	r24
    1a3a:	82 1b       	sub	r24, r18
    1a3c:	93 0b       	sbc	r25, r19
    1a3e:	84 0f       	add	r24, r20
    1a40:	95 1f       	adc	r25, r21
    1a42:	24 e6       	ldi	r18, 0x64	; 100
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	b9 01       	movw	r22, r18
    1a48:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__udivmodhi4>
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	63 e0       	ldi	r22, 0x03	; 3
    1a54:	41 e0       	ldi	r20, 0x01	; 1
    1a56:	0e 94 96 07 	call	0xf2c	; 0xf2c <GPIO_setupPinDirection>
}
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <Timer1_init>:
 * Parameters: Structure of configuration of type (Timer1_ConfigType)
 * The structure includes the initial value of the timer, compare value, mode of operation and prescaler value.
 * Return: void
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <Timer1_init+0x6>
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode == NORMAL_MODE)
    1a70:	e9 81       	ldd	r30, Y+1	; 0x01
    1a72:	fa 81       	ldd	r31, Y+2	; 0x02
    1a74:	85 81       	ldd	r24, Z+5	; 0x05
    1a76:	88 23       	and	r24, r24
    1a78:	d9 f4       	brne	.+54     	; 0x1ab0 <Timer1_init+0x4e>
	{
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
    1a7a:	ac e4       	ldi	r26, 0x4C	; 76
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a80:	fa 81       	ldd	r31, Y+2	; 0x02
    1a82:	80 81       	ld	r24, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	11 96       	adiw	r26, 0x01	; 1
    1a88:	9c 93       	st	X, r25
    1a8a:	8e 93       	st	-X, r24

		/*Enable Overflow Interrupt*/
		TIMSK = TIMSK | (1<<TOIE1);
    1a8c:	a9 e5       	ldi	r26, 0x59	; 89
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e9 e5       	ldi	r30, 0x59	; 89
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	84 60       	ori	r24, 0x04	; 4
    1a98:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Overflow Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Overflow Mode)
		 * WGM1/1:0		 =  0	Normal Mode
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1a9a:	ef e4       	ldi	r30, 0x4F	; 79
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8c e0       	ldi	r24, 0x0C	; 12
    1aa0:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0	Normal Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = ((Config_Ptr->prescaler)<<CS10);
    1aa2:	ae e4       	ldi	r26, 0x4E	; 78
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aaa:	84 81       	ldd	r24, Z+4	; 0x04
    1aac:	8c 93       	st	X, r24
    1aae:	29 c0       	rjmp	.+82     	; 0x1b02 <Timer1_init+0xa0>
	}


	else if(Config_Ptr->mode == COMPARE_MODE)
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	85 81       	ldd	r24, Z+5	; 0x05
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	21 f5       	brne	.+72     	; 0x1b02 <Timer1_init+0xa0>
	{
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
    1aba:	ac e4       	ldi	r26, 0x4C	; 76
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac2:	80 81       	ld	r24, Z
    1ac4:	91 81       	ldd	r25, Z+1	; 0x01
    1ac6:	11 96       	adiw	r26, 0x01	; 1
    1ac8:	9c 93       	st	X, r25
    1aca:	8e 93       	st	-X, r24

		/*Add the Compare value passed in the configuration structure to the Compare Value Register (OCR1A)*/
		OCR1A = Config_Ptr->compare_value;
    1acc:	aa e4       	ldi	r26, 0x4A	; 74
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24

		/*Enable Compare Interrupt*/
		TIMSK = TIMSK | (1<<OCIE1A);
    1ade:	a9 e5       	ldi	r26, 0x59	; 89
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e9 e5       	ldi	r30, 0x59	; 89
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 61       	ori	r24, 0x10	; 16
    1aea:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Compare Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Compare Mode)
		 * WGM1/1:0		 =  0	Compare Mode
		 */
		TCCR1A = (1<<FOC1A);
    1aec:	ef e4       	ldi	r30, 0x4F	; 79
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	88 e0       	ldi	r24, 0x08	; 8
    1af2:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0:1	Compare Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = (1<<WGM12) | ((Config_Ptr->prescaler)<<CS10);
    1af4:	ae e4       	ldi	r26, 0x4E	; 78
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e9 81       	ldd	r30, Y+1	; 0x01
    1afa:	fa 81       	ldd	r31, Y+2	; 0x02
    1afc:	84 81       	ldd	r24, Z+4	; 0x04
    1afe:	88 60       	ori	r24, 0x08	; 8
    1b00:	8c 93       	st	X, r24
	}
}
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <Timer1_deInit>:
 * Timer Module Function used to disable the Timer module in AVR
 * Parameters: void
 * Return: void
 */
void Timer1_deInit(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						/*Timer initial register = 0*/
    1b14:	ec e4       	ldi	r30, 0x4C	; 76
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	11 82       	std	Z+1, r1	; 0x01
    1b1a:	10 82       	st	Z, r1
	OCR1A = 0;						/*Timer compare register = 0*/
    1b1c:	ea e4       	ldi	r30, 0x4A	; 74
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	11 82       	std	Z+1, r1	; 0x01
    1b22:	10 82       	st	Z, r1
	TIMSK = (TIMSK & ~(0x3C));		/*Disable Timer1 interrupt*/
    1b24:	a9 e5       	ldi	r26, 0x59	; 89
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e9 e5       	ldi	r30, 0x59	; 89
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	83 7c       	andi	r24, 0xC3	; 195
    1b30:	8c 93       	st	X, r24
	TCCR1A = 0;						/*Clear TCCR1A register*/
    1b32:	ef e4       	ldi	r30, 0x4F	; 79
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	10 82       	st	Z, r1
	TCCR1B = 0;						/*Clear TCCR1B register and stop Timer1*/
    1b38:	ee e4       	ldi	r30, 0x4E	; 78
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	10 82       	st	Z, r1
}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <Timer1_setCallBack>:
/*
 * Timer1 module function used to set the call back function of the module to the passed
 * pointer to function in the parameter of (Timer1_setCallBack)
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <Timer1_setCallBack+0x6>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
	g_call_back_function = a_ptr;
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	90 93 7a 00 	sts	0x007A, r25
    1b5a:	80 93 79 00 	sts	0x0079, r24
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    1b68:	1f 92       	push	r1
    1b6a:	0f 92       	push	r0
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	0f 92       	push	r0
    1b70:	11 24       	eor	r1, r1
    1b72:	2f 93       	push	r18
    1b74:	3f 93       	push	r19
    1b76:	4f 93       	push	r20
    1b78:	5f 93       	push	r21
    1b7a:	6f 93       	push	r22
    1b7c:	7f 93       	push	r23
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	ef 93       	push	r30
    1b88:	ff 93       	push	r31
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	if(g_call_back_function != NULL_PTR)
    1b92:	80 91 79 00 	lds	r24, 0x0079
    1b96:	90 91 7a 00 	lds	r25, 0x007A
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	29 f0       	breq	.+10     	; 0x1ba8 <__vector_9+0x40>
	{
		(*g_call_back_function)();
    1b9e:	e0 91 79 00 	lds	r30, 0x0079
    1ba2:	f0 91 7a 00 	lds	r31, 0x007A
    1ba6:	09 95       	icall
	}
}
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	ff 91       	pop	r31
    1bae:	ef 91       	pop	r30
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	2f 93       	push	r18
    1bda:	3f 93       	push	r19
    1bdc:	4f 93       	push	r20
    1bde:	5f 93       	push	r21
    1be0:	6f 93       	push	r22
    1be2:	7f 93       	push	r23
    1be4:	8f 93       	push	r24
    1be6:	9f 93       	push	r25
    1be8:	af 93       	push	r26
    1bea:	bf 93       	push	r27
    1bec:	ef 93       	push	r30
    1bee:	ff 93       	push	r31
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	if(g_call_back_function != NULL_PTR)
    1bf8:	80 91 79 00 	lds	r24, 0x0079
    1bfc:	90 91 7a 00 	lds	r25, 0x007A
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	29 f0       	breq	.+10     	; 0x1c0e <__vector_7+0x40>
	{
		(*g_call_back_function)();
    1c04:	e0 91 79 00 	lds	r30, 0x0079
    1c08:	f0 91 7a 00 	lds	r31, 0x007A
    1c0c:	09 95       	icall
	}

}
    1c0e:	cf 91       	pop	r28
    1c10:	df 91       	pop	r29
    1c12:	ff 91       	pop	r31
    1c14:	ef 91       	pop	r30
    1c16:	bf 91       	pop	r27
    1c18:	af 91       	pop	r26
    1c1a:	9f 91       	pop	r25
    1c1c:	8f 91       	pop	r24
    1c1e:	7f 91       	pop	r23
    1c20:	6f 91       	pop	r22
    1c22:	5f 91       	pop	r21
    1c24:	4f 91       	pop	r20
    1c26:	3f 91       	pop	r19
    1c28:	2f 91       	pop	r18
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti

00001c34 <UART_init>:
 * Used t initialize the UART Module with a pre-defined structure with all UART Configurations
 * Input: UART_ConfigType Structure
 * Return: void
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <UART_init+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <UART_init+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9c 83       	std	Y+4, r25	; 0x04
    1c42:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1c44:	1a 82       	std	Y+2, r1	; 0x02
    1c46:	19 82       	std	Y+1, r1	; 0x01

	/*Enable UART Double speed mode*/
	UCSRA = (1<<U2X);
    1c48:	eb e2       	ldi	r30, 0x2B	; 43
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode
	 * RXB8 & TXB8 not used for (5,6,7,8) bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1c50:	ea e2       	ldi	r30, 0x2A	; 42
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	88 e1       	ldi	r24, 0x18	; 24
    1c56:	80 83       	st	Z, r24
	 * UMSEL 	= 0 Asynchronous mode select
	 * UPM1:0 	= Parity data-type in Configuration structure
	 * USBS		= Stop bits data-type in Configuration structure
	 * UCSZ1:0	= Data bits data-type in Configuration structure
	 */
	UCSRC = (1<<URSEL) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->bit_data)<<UCSZ0);
    1c58:	a0 e4       	ldi	r26, 0x40	; 64
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c60:	81 81       	ldd	r24, Z+1	; 0x01
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	82 95       	swap	r24
    1c68:	92 95       	swap	r25
    1c6a:	90 7f       	andi	r25, 0xF0	; 240
    1c6c:	98 27       	eor	r25, r24
    1c6e:	80 7f       	andi	r24, 0xF0	; 240
    1c70:	98 27       	eor	r25, r24
    1c72:	28 2f       	mov	r18, r24
    1c74:	20 68       	ori	r18, 0x80	; 128
    1c76:	eb 81       	ldd	r30, Y+3	; 0x03
    1c78:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	28 2b       	or	r18, r24
    1c8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c90:	fc 81       	ldd	r31, Y+4	; 0x04
    1c92:	80 81       	ld	r24, Z
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	82 2b       	or	r24, r18
    1c9e:	8c 93       	st	X, r24

	/* BaudRate = (F_CPU) / 8(UBRR + 1)		"UART Double speed mode"
	 * UBRR = ((F_CPU) / (BaudRate * 8)) - 1
	 */
	ubrr_value = (uint16)(F_CPU / ((Config_Ptr->baud_rate) * 8UL) - 1);
    1ca0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ca2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ca4:	83 81       	ldd	r24, Z+3	; 0x03
    1ca6:	94 81       	ldd	r25, Z+4	; 0x04
    1ca8:	a5 81       	ldd	r26, Z+5	; 0x05
    1caa:	b6 81       	ldd	r27, Z+6	; 0x06
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	aa 1f       	adc	r26, r26
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	88 0f       	add	r24, r24
    1cb6:	99 1f       	adc	r25, r25
    1cb8:	aa 1f       	adc	r26, r26
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	aa 1f       	adc	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	ad 01       	movw	r20, r26
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	92 e1       	ldi	r25, 0x12	; 18
    1ccc:	aa e7       	ldi	r26, 0x7A	; 122
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	bc 01       	movw	r22, r24
    1cd2:	cd 01       	movw	r24, r26
    1cd4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__udivmodsi4>
    1cd8:	da 01       	movw	r26, r20
    1cda:	c9 01       	movw	r24, r18
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = (ubrr_value>>8);		/*UBRR-High = ubrr_value shifted right by 8 bits*/
    1ce2:	e0 e4       	ldi	r30, 0x40	; 64
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	89 2f       	mov	r24, r25
    1cec:	99 27       	eor	r25, r25
    1cee:	80 83       	st	Z, r24
	UBRRL = ubrr_value;				/*UBRR-Low = first 8 bits of ubrr_value*/
    1cf0:	e9 e2       	ldi	r30, 0x29	; 41
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	80 83       	st	Z, r24
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <UART_sendByte>:
/*
 * UART Module function
 * Responsible for sending byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the buffer is empty and ready to take new data frame*/
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    1d12:	eb e2       	ldi	r30, 0x2B	; 43
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	88 2f       	mov	r24, r24
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	80 72       	andi	r24, 0x20	; 32
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	b9 f3       	breq	.-18     	; 0x1d12 <UART_sendByte+0xc>

	UDR = data;
    1d24:	ec e2       	ldi	r30, 0x2C	; 44
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	80 83       	st	Z, r24
}
    1d2c:	0f 90       	pop	r0
    1d2e:	cf 91       	pop	r28
    1d30:	df 91       	pop	r29
    1d32:	08 95       	ret

00001d34 <UART_receiveByte>:
/*
 * UART Module function
 * Responsible for receiving byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1d34:	df 93       	push	r29
    1d36:	cf 93       	push	r28
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    1d3c:	eb e2       	ldi	r30, 0x2B	; 43
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	dc f7       	brge	.-10     	; 0x1d3c <UART_receiveByte+0x8>

	return UDR;
    1d46:	ec e2       	ldi	r30, 0x2C	; 44
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <UART_sendString>:
/*
 * UART Module function
 * Responsible for sending string to another UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <UART_sendString+0x6>
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	9b 83       	std	Y+3, r25	; 0x03
    1d60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d62:	19 82       	std	Y+1, r1	; 0x01
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d70:	fc 01       	movw	r30, r24
    1d72:	e2 0f       	add	r30, r18
    1d74:	f3 1f       	adc	r31, r19
    1d76:	80 81       	ld	r24, Z
    1d78:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <UART_sendByte>
		i++;
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	e2 0f       	add	r30, r18
    1d90:	f3 1f       	adc	r31, r19
    1d92:	80 81       	ld	r24, Z
    1d94:	88 23       	and	r24, r24
    1d96:	39 f7       	brne	.-50     	; 0x1d66 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <UART_receiveString>:
/*
 * UART Module function
 * Responsible for receiving string from another UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <UART_receiveString+0xa>
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1db8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	8c 01       	movw	r16, r24
    1dc6:	02 0f       	add	r16, r18
    1dc8:	13 1f       	adc	r17, r19
    1dca:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
    1dce:	f8 01       	movw	r30, r16
    1dd0:	80 83       	st	Z, r24
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	8c 01       	movw	r16, r24
    1de6:	02 0f       	add	r16, r18
    1de8:	13 1f       	adc	r17, r19
    1dea:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <UART_receiveByte>
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	e2 0f       	add	r30, r18
    1e00:	f3 1f       	adc	r31, r19
    1e02:	80 81       	ld	r24, Z
    1e04:	83 32       	cpi	r24, 0x23	; 35
    1e06:	31 f7       	brne	.-52     	; 0x1dd4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	fc 01       	movw	r30, r24
    1e14:	e2 0f       	add	r30, r18
    1e16:	f3 1f       	adc	r31, r19
    1e18:	10 82       	st	Z, r1
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	1f 91       	pop	r17
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret

00001e2a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "I2C.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <EEPROM_writeByte+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <EEPROM_writeByte+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1e3c:	0e 94 9d 0c 	call	0x193a	; 0x193a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1e40:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1e44:	88 30       	cpi	r24, 0x08	; 8
    1e46:	11 f0       	breq	.+4      	; 0x1e4c <EEPROM_writeByte+0x22>
        return ERROR;
    1e48:	1c 82       	std	Y+4, r1	; 0x04
    1e4a:	28 c0       	rjmp	.+80     	; 0x1e9c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e50:	80 70       	andi	r24, 0x00	; 0
    1e52:	97 70       	andi	r25, 0x07	; 7
    1e54:	88 0f       	add	r24, r24
    1e56:	89 2f       	mov	r24, r25
    1e58:	88 1f       	adc	r24, r24
    1e5a:	99 0b       	sbc	r25, r25
    1e5c:	91 95       	neg	r25
    1e5e:	80 6a       	ori	r24, 0xA0	; 160
    1e60:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1e64:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1e68:	88 31       	cpi	r24, 0x18	; 24
    1e6a:	11 f0       	breq	.+4      	; 0x1e70 <EEPROM_writeByte+0x46>
        return ERROR; 
    1e6c:	1c 82       	std	Y+4, r1	; 0x04
    1e6e:	16 c0       	rjmp	.+44     	; 0x1e9c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e76:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1e7a:	88 32       	cpi	r24, 0x28	; 40
    1e7c:	11 f0       	breq	.+4      	; 0x1e82 <EEPROM_writeByte+0x58>
        return ERROR;
    1e7e:	1c 82       	std	Y+4, r1	; 0x04
    1e80:	0d c0       	rjmp	.+26     	; 0x1e9c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1e88:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1e8c:	88 32       	cpi	r24, 0x28	; 40
    1e8e:	11 f0       	breq	.+4      	; 0x1e94 <EEPROM_writeByte+0x6a>
        return ERROR;
    1e90:	1c 82       	std	Y+4, r1	; 0x04
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1e94:	0e 94 ad 0c 	call	0x195a	; 0x195a <TWI_stop>
	
    return SUCCESS;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	8c 83       	std	Y+4, r24	; 0x04
    1e9c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f 90       	pop	r0
    1ea4:	0f 90       	pop	r0
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <EEPROM_readByte+0x6>
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <EEPROM_readByte+0x8>
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	7c 83       	std	Y+4, r23	; 0x04
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1ec2:	0e 94 9d 0c 	call	0x193a	; 0x193a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1ec6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1eca:	88 30       	cpi	r24, 0x08	; 8
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <EEPROM_readByte+0x26>
        return ERROR;
    1ece:	1d 82       	std	Y+5, r1	; 0x05
    1ed0:	44 c0       	rjmp	.+136    	; 0x1f5a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed6:	80 70       	andi	r24, 0x00	; 0
    1ed8:	97 70       	andi	r25, 0x07	; 7
    1eda:	88 0f       	add	r24, r24
    1edc:	89 2f       	mov	r24, r25
    1ede:	88 1f       	adc	r24, r24
    1ee0:	99 0b       	sbc	r25, r25
    1ee2:	91 95       	neg	r25
    1ee4:	80 6a       	ori	r24, 0xA0	; 160
    1ee6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1eea:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1eee:	88 31       	cpi	r24, 0x18	; 24
    1ef0:	11 f0       	breq	.+4      	; 0x1ef6 <EEPROM_readByte+0x4a>
        return ERROR;
    1ef2:	1d 82       	std	Y+5, r1	; 0x05
    1ef4:	32 c0       	rjmp	.+100    	; 0x1f5a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1efc:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1f00:	88 32       	cpi	r24, 0x28	; 40
    1f02:	11 f0       	breq	.+4      	; 0x1f08 <EEPROM_readByte+0x5c>
        return ERROR;
    1f04:	1d 82       	std	Y+5, r1	; 0x05
    1f06:	29 c0       	rjmp	.+82     	; 0x1f5a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1f08:	0e 94 9d 0c 	call	0x193a	; 0x193a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1f0c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1f10:	80 31       	cpi	r24, 0x10	; 16
    1f12:	11 f0       	breq	.+4      	; 0x1f18 <EEPROM_readByte+0x6c>
        return ERROR;
    1f14:	1d 82       	std	Y+5, r1	; 0x05
    1f16:	21 c0       	rjmp	.+66     	; 0x1f5a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	80 70       	andi	r24, 0x00	; 0
    1f1e:	97 70       	andi	r25, 0x07	; 7
    1f20:	88 0f       	add	r24, r24
    1f22:	89 2f       	mov	r24, r25
    1f24:	88 1f       	adc	r24, r24
    1f26:	99 0b       	sbc	r25, r25
    1f28:	91 95       	neg	r25
    1f2a:	81 6a       	ori	r24, 0xA1	; 161
    1f2c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1f30:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1f34:	80 34       	cpi	r24, 0x40	; 64
    1f36:	11 f0       	breq	.+4      	; 0x1f3c <EEPROM_readByte+0x90>
        return ERROR;
    1f38:	1d 82       	std	Y+5, r1	; 0x05
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1f3c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <TWI_readByteWithNACK>
    1f40:	eb 81       	ldd	r30, Y+3	; 0x03
    1f42:	fc 81       	ldd	r31, Y+4	; 0x04
    1f44:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1f46:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <TWI_getStatus>
    1f4a:	88 35       	cpi	r24, 0x58	; 88
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <EEPROM_readByte+0xa6>
        return ERROR;
    1f4e:	1d 82       	std	Y+5, r1	; 0x05
    1f50:	04 c0       	rjmp	.+8      	; 0x1f5a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1f52:	0e 94 ad 0c 	call	0x195a	; 0x195a <TWI_stop>

    return SUCCESS;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8d 83       	std	Y+5, r24	; 0x05
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <__mulsi3>:
    1f6c:	62 9f       	mul	r22, r18
    1f6e:	d0 01       	movw	r26, r0
    1f70:	73 9f       	mul	r23, r19
    1f72:	f0 01       	movw	r30, r0
    1f74:	82 9f       	mul	r24, r18
    1f76:	e0 0d       	add	r30, r0
    1f78:	f1 1d       	adc	r31, r1
    1f7a:	64 9f       	mul	r22, r20
    1f7c:	e0 0d       	add	r30, r0
    1f7e:	f1 1d       	adc	r31, r1
    1f80:	92 9f       	mul	r25, r18
    1f82:	f0 0d       	add	r31, r0
    1f84:	83 9f       	mul	r24, r19
    1f86:	f0 0d       	add	r31, r0
    1f88:	74 9f       	mul	r23, r20
    1f8a:	f0 0d       	add	r31, r0
    1f8c:	65 9f       	mul	r22, r21
    1f8e:	f0 0d       	add	r31, r0
    1f90:	99 27       	eor	r25, r25
    1f92:	72 9f       	mul	r23, r18
    1f94:	b0 0d       	add	r27, r0
    1f96:	e1 1d       	adc	r30, r1
    1f98:	f9 1f       	adc	r31, r25
    1f9a:	63 9f       	mul	r22, r19
    1f9c:	b0 0d       	add	r27, r0
    1f9e:	e1 1d       	adc	r30, r1
    1fa0:	f9 1f       	adc	r31, r25
    1fa2:	bd 01       	movw	r22, r26
    1fa4:	cf 01       	movw	r24, r30
    1fa6:	11 24       	eor	r1, r1
    1fa8:	08 95       	ret

00001faa <__udivmodhi4>:
    1faa:	aa 1b       	sub	r26, r26
    1fac:	bb 1b       	sub	r27, r27
    1fae:	51 e1       	ldi	r21, 0x11	; 17
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <__udivmodhi4_ep>

00001fb2 <__udivmodhi4_loop>:
    1fb2:	aa 1f       	adc	r26, r26
    1fb4:	bb 1f       	adc	r27, r27
    1fb6:	a6 17       	cp	r26, r22
    1fb8:	b7 07       	cpc	r27, r23
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <__udivmodhi4_ep>
    1fbc:	a6 1b       	sub	r26, r22
    1fbe:	b7 0b       	sbc	r27, r23

00001fc0 <__udivmodhi4_ep>:
    1fc0:	88 1f       	adc	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	5a 95       	dec	r21
    1fc6:	a9 f7       	brne	.-22     	; 0x1fb2 <__udivmodhi4_loop>
    1fc8:	80 95       	com	r24
    1fca:	90 95       	com	r25
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	08 95       	ret

00001fd2 <__udivmodsi4>:
    1fd2:	a1 e2       	ldi	r26, 0x21	; 33
    1fd4:	1a 2e       	mov	r1, r26
    1fd6:	aa 1b       	sub	r26, r26
    1fd8:	bb 1b       	sub	r27, r27
    1fda:	fd 01       	movw	r30, r26
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <__udivmodsi4_ep>

00001fde <__udivmodsi4_loop>:
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	ee 1f       	adc	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	a2 17       	cp	r26, r18
    1fe8:	b3 07       	cpc	r27, r19
    1fea:	e4 07       	cpc	r30, r20
    1fec:	f5 07       	cpc	r31, r21
    1fee:	20 f0       	brcs	.+8      	; 0x1ff8 <__udivmodsi4_ep>
    1ff0:	a2 1b       	sub	r26, r18
    1ff2:	b3 0b       	sbc	r27, r19
    1ff4:	e4 0b       	sbc	r30, r20
    1ff6:	f5 0b       	sbc	r31, r21

00001ff8 <__udivmodsi4_ep>:
    1ff8:	66 1f       	adc	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	1a 94       	dec	r1
    2002:	69 f7       	brne	.-38     	; 0x1fde <__udivmodsi4_loop>
    2004:	60 95       	com	r22
    2006:	70 95       	com	r23
    2008:	80 95       	com	r24
    200a:	90 95       	com	r25
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	bd 01       	movw	r22, r26
    2012:	cf 01       	movw	r24, r30
    2014:	08 95       	ret

00002016 <__prologue_saves__>:
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	ca 1b       	sub	r28, r26
    2040:	db 0b       	sbc	r29, r27
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	09 94       	ijmp

0000204e <__epilogue_restores__>:
    204e:	2a 88       	ldd	r2, Y+18	; 0x12
    2050:	39 88       	ldd	r3, Y+17	; 0x11
    2052:	48 88       	ldd	r4, Y+16	; 0x10
    2054:	5f 84       	ldd	r5, Y+15	; 0x0f
    2056:	6e 84       	ldd	r6, Y+14	; 0x0e
    2058:	7d 84       	ldd	r7, Y+13	; 0x0d
    205a:	8c 84       	ldd	r8, Y+12	; 0x0c
    205c:	9b 84       	ldd	r9, Y+11	; 0x0b
    205e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2060:	b9 84       	ldd	r11, Y+9	; 0x09
    2062:	c8 84       	ldd	r12, Y+8	; 0x08
    2064:	df 80       	ldd	r13, Y+7	; 0x07
    2066:	ee 80       	ldd	r14, Y+6	; 0x06
    2068:	fd 80       	ldd	r15, Y+5	; 0x05
    206a:	0c 81       	ldd	r16, Y+4	; 0x04
    206c:	1b 81       	ldd	r17, Y+3	; 0x03
    206e:	aa 81       	ldd	r26, Y+2	; 0x02
    2070:	b9 81       	ldd	r27, Y+1	; 0x01
    2072:	ce 0f       	add	r28, r30
    2074:	d1 1d       	adc	r29, r1
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	ed 01       	movw	r28, r26
    2082:	08 95       	ret

00002084 <_exit>:
    2084:	f8 94       	cli

00002086 <__stop_program>:
    2086:	ff cf       	rjmp	.-2      	; 0x2086 <__stop_program>
