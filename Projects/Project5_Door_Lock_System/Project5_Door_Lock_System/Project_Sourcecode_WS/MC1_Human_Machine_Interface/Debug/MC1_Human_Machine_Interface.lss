
MC1_Human_Machine_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c4  00800060  00003492  00003526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800124  00800124  000035ea  2**0
                  ALLOC
  3 .stab         000030b4  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001412  00000000  00000000  000066a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007da1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000aee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000be6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 32       	cpi	r26, 0x24	; 36
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e2       	ldi	r26, 0x24	; 36
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 32       	cpi	r26, 0x28	; 40
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 0a 	call	0x140a	; 0x140a <main>
      8a:	0c 94 47 1a 	jmp	0x348e	; 0x348e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 19 	jmp	0x33a6	; 0x33a6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e0       	ldi	r22, 0x0F	; 15
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <GPIO_setupPinDirection>:
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear the pin specified in DDR Built-in register depends on pin direction parameter
 * by using Macros (SET_BIT or CLEAR_BIT)
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <GPIO_setupPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <GPIO_setupPinDirection+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_num)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <GPIO_setupPinDirection+0x2a>
     cc6:	43 c0       	rjmp	.+134    	; 0xd4e <GPIO_setupPinDirection+0xb0>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <GPIO_setupPinDirection+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <GPIO_setupPinDirection+0x58>
     cda:	bc c0       	rjmp	.+376    	; 0xe54 <GPIO_setupPinDirection+0x1b6>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <GPIO_setupPinDirection+0x4a>
     ce6:	5f c0       	rjmp	.+190    	; 0xda6 <GPIO_setupPinDirection+0x108>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <GPIO_setupPinDirection+0x56>
     cf2:	85 c0       	rjmp	.+266    	; 0xdfe <GPIO_setupPinDirection+0x160>
     cf4:	af c0       	rjmp	.+350    	; 0xe54 <GPIO_setupPinDirection+0x1b6>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		if(direction == PIN_INPUT)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	a9 f4       	brne	.+42     	; 0xd26 <GPIO_setupPinDirection+0x88>
			CLEAR_BIT(DDRA, pin_num);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <GPIO_setupPinDirection+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <GPIO_setupPinDirection+0x78>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	97 c0       	rjmp	.+302    	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRA, pin_num);
     d26:	aa e3       	ldi	r26, 0x3A	; 58
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ea e3       	ldi	r30, 0x3A	; 58
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <GPIO_setupPinDirection+0xa6>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <GPIO_setupPinDirection+0xa2>
     d48:	84 2b       	or	r24, r20
     d4a:	8c 93       	st	X, r24
     d4c:	83 c0       	rjmp	.+262    	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTB_ID:
		if(direction == PIN_INPUT)
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	88 23       	and	r24, r24
     d52:	a9 f4       	brne	.+42     	; 0xd7e <GPIO_setupPinDirection+0xe0>
			CLEAR_BIT(DDRB, pin_num);
     d54:	a7 e3       	ldi	r26, 0x37	; 55
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e3       	ldi	r30, 0x37	; 55
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <GPIO_setupPinDirection+0xd4>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <GPIO_setupPinDirection+0xd0>
     d76:	80 95       	com	r24
     d78:	84 23       	and	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	6b c0       	rjmp	.+214    	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRB, pin_num);
     d7e:	a7 e3       	ldi	r26, 0x37	; 55
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_setupPinDirection+0xfe>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_setupPinDirection+0xfa>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	57 c0       	rjmp	.+174    	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTC_ID:
		if(direction == PIN_INPUT)
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	88 23       	and	r24, r24
     daa:	a9 f4       	brne	.+42     	; 0xdd6 <GPIO_setupPinDirection+0x138>
			CLEAR_BIT(DDRC, pin_num);
     dac:	a4 e3       	ldi	r26, 0x34	; 52
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e4 e3       	ldi	r30, 0x34	; 52
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <GPIO_setupPinDirection+0x12c>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <GPIO_setupPinDirection+0x128>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRC, pin_num);
     dd6:	a4 e3       	ldi	r26, 0x34	; 52
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_setupPinDirection+0x156>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_setupPinDirection+0x152>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	2b c0       	rjmp	.+86     	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		break;

	case PORTD_ID:
		if(direction == PIN_INPUT)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 23       	and	r24, r24
     e02:	a9 f4       	brne	.+42     	; 0xe2e <GPIO_setupPinDirection+0x190>
			CLEAR_BIT(DDRD, pin_num);
     e04:	a1 e3       	ldi	r26, 0x31	; 49
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e1 e3       	ldi	r30, 0x31	; 49
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_setupPinDirection+0x184>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_setupPinDirection+0x180>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	13 c0       	rjmp	.+38     	; 0xe54 <GPIO_setupPinDirection+0x1b6>

		else
			SET_BIT(DDRD, pin_num);
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <GPIO_setupPinDirection+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <GPIO_setupPinDirection+0x1aa>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24

		break;
	}
}
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <GPIO_setupPortDirection>:
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on DDR Built-in register on determined PORT depends on
 * direction parameter.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_setupPortDirection+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <GPIO_setupPortDirection+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3c 83       	std	Y+4, r19	; 0x04
     e7c:	2b 83       	std	Y+3, r18	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	91 05       	cpc	r25, r1
     e86:	d1 f0       	breq	.+52     	; 0xebc <GPIO_setupPortDirection+0x58>
     e88:	2b 81       	ldd	r18, Y+3	; 0x03
     e8a:	3c 81       	ldd	r19, Y+4	; 0x04
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	2c f4       	brge	.+10     	; 0xe9c <GPIO_setupPortDirection+0x38>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	61 f0       	breq	.+24     	; 0xeb2 <GPIO_setupPortDirection+0x4e>
     e9a:	1e c0       	rjmp	.+60     	; 0xed8 <GPIO_setupPortDirection+0x74>
     e9c:	2b 81       	ldd	r18, Y+3	; 0x03
     e9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	81 f0       	breq	.+32     	; 0xec6 <GPIO_setupPortDirection+0x62>
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	83 30       	cpi	r24, 0x03	; 3
     eac:	91 05       	cpc	r25, r1
     eae:	81 f0       	breq	.+32     	; 0xed0 <GPIO_setupPortDirection+0x6c>
     eb0:	13 c0       	rjmp	.+38     	; 0xed8 <GPIO_setupPortDirection+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		DDRA = direction;
     eb2:	ea e3       	ldi	r30, 0x3A	; 58
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	80 83       	st	Z, r24
     eba:	0e c0       	rjmp	.+28     	; 0xed8 <GPIO_setupPortDirection+0x74>
		break;

	case PORTB_ID:
		DDRB = direction;
     ebc:	e7 e3       	ldi	r30, 0x37	; 55
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	80 83       	st	Z, r24
     ec4:	09 c0       	rjmp	.+18     	; 0xed8 <GPIO_setupPortDirection+0x74>
		break;

	case PORTC_ID:
		DDRC = direction;
     ec6:	e4 e3       	ldi	r30, 0x34	; 52
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	80 83       	st	Z, r24
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <GPIO_setupPortDirection+0x74>
		break;

	case PORTD_ID:
		DDRD = direction;
     ed0:	e1 e3       	ldi	r30, 0x31	; 49
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	80 83       	st	Z, r24
		break;
	}
}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <GPIO_writePin>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on PORT register on determined PORT depends on direction parameter.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <GPIO_writePin+0x6>
     eec:	00 d0       	rcall	.+0      	; 0xeee <GPIO_writePin+0x8>
     eee:	0f 92       	push	r0
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
     ef8:	4b 83       	std	Y+3, r20	; 0x03
	switch(port_num)
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	3d 83       	std	Y+5, r19	; 0x05
     f02:	2c 83       	std	Y+4, r18	; 0x04
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	9d 81       	ldd	r25, Y+5	; 0x05
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	91 05       	cpc	r25, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <GPIO_writePin+0x2a>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <GPIO_writePin+0xb0>
     f10:	2c 81       	ldd	r18, Y+4	; 0x04
     f12:	3d 81       	ldd	r19, Y+5	; 0x05
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	2c f4       	brge	.+10     	; 0xf24 <GPIO_writePin+0x3e>
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	71 f0       	breq	.+28     	; 0xf3e <GPIO_writePin+0x58>
     f22:	bc c0       	rjmp	.+376    	; 0x109c <GPIO_writePin+0x1b6>
     f24:	2c 81       	ldd	r18, Y+4	; 0x04
     f26:	3d 81       	ldd	r19, Y+5	; 0x05
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <GPIO_writePin+0x4a>
     f2e:	5f c0       	rjmp	.+190    	; 0xfee <GPIO_writePin+0x108>
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	91 05       	cpc	r25, r1
     f38:	09 f4       	brne	.+2      	; 0xf3c <GPIO_writePin+0x56>
     f3a:	85 c0       	rjmp	.+266    	; 0x1046 <GPIO_writePin+0x160>
     f3c:	af c0       	rjmp	.+350    	; 0x109c <GPIO_writePin+0x1b6>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		if(value == LOGIC_LOW)
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	88 23       	and	r24, r24
     f42:	a9 f4       	brne	.+42     	; 0xf6e <GPIO_writePin+0x88>
			CLEAR_BIT(PORTA, pin_num);
     f44:	ab e3       	ldi	r26, 0x3B	; 59
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	eb e3       	ldi	r30, 0x3B	; 59
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <GPIO_writePin+0x7c>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <GPIO_writePin+0x78>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	97 c0       	rjmp	.+302    	; 0x109c <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTA, pin_num);
     f6e:	ab e3       	ldi	r26, 0x3B	; 59
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_writePin+0xa6>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_writePin+0xa2>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	83 c0       	rjmp	.+262    	; 0x109c <GPIO_writePin+0x1b6>

		break;

	case PORTB_ID:
		if(value == LOGIC_LOW)
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	88 23       	and	r24, r24
     f9a:	a9 f4       	brne	.+42     	; 0xfc6 <GPIO_writePin+0xe0>
			CLEAR_BIT(PORTB, pin_num);
     f9c:	a8 e3       	ldi	r26, 0x38	; 56
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e8 e3       	ldi	r30, 0x38	; 56
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <GPIO_writePin+0xd4>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <GPIO_writePin+0xd0>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
     fc4:	6b c0       	rjmp	.+214    	; 0x109c <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTB, pin_num);
     fc6:	a8 e3       	ldi	r26, 0x38	; 56
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e8 e3       	ldi	r30, 0x38	; 56
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <GPIO_writePin+0xfe>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <GPIO_writePin+0xfa>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	57 c0       	rjmp	.+174    	; 0x109c <GPIO_writePin+0x1b6>

		break;

	case PORTC_ID:
		if(value == LOGIC_LOW)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 23       	and	r24, r24
     ff2:	a9 f4       	brne	.+42     	; 0x101e <GPIO_writePin+0x138>
			CLEAR_BIT(PORTC, pin_num);
     ff4:	a5 e3       	ldi	r26, 0x35	; 53
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e5 e3       	ldi	r30, 0x35	; 53
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_writePin+0x12c>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_writePin+0x128>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	3f c0       	rjmp	.+126    	; 0x109c <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTC, pin_num);
    101e:	a5 e3       	ldi	r26, 0x35	; 53
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e3       	ldi	r30, 0x35	; 53
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_writePin+0x156>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_writePin+0x152>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	2b c0       	rjmp	.+86     	; 0x109c <GPIO_writePin+0x1b6>

		break;

	case PORTD_ID:
		if(value == LOGIC_LOW)
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	88 23       	and	r24, r24
    104a:	a9 f4       	brne	.+42     	; 0x1076 <GPIO_writePin+0x190>
			CLEAR_BIT(PORTD, pin_num);
    104c:	a2 e3       	ldi	r26, 0x32	; 50
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e2 e3       	ldi	r30, 0x32	; 50
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <GPIO_writePin+0x184>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <GPIO_writePin+0x180>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	13 c0       	rjmp	.+38     	; 0x109c <GPIO_writePin+0x1b6>

		else
			SET_BIT(PORTD, pin_num);
    1076:	a2 e3       	ldi	r26, 0x32	; 50
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e2 e3       	ldi	r30, 0x32	; 50
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_writePin+0x1ae>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_writePin+0x1aa>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24

		break;
	}
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <GPIO_writePort>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * set or clear all the pins on PORT register by value argument.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <GPIO_writePort+0x6>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <GPIO_writePort+0x8>
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	6a 83       	std	Y+2, r22	; 0x02
	switch(port_num)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3c 83       	std	Y+4, r19	; 0x04
    10c4:	2b 83       	std	Y+3, r18	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	d1 f0       	breq	.+52     	; 0x1104 <GPIO_writePort+0x58>
    10d0:	2b 81       	ldd	r18, Y+3	; 0x03
    10d2:	3c 81       	ldd	r19, Y+4	; 0x04
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	2c f4       	brge	.+10     	; 0x10e4 <GPIO_writePort+0x38>
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	61 f0       	breq	.+24     	; 0x10fa <GPIO_writePort+0x4e>
    10e2:	1e c0       	rjmp	.+60     	; 0x1120 <GPIO_writePort+0x74>
    10e4:	2b 81       	ldd	r18, Y+3	; 0x03
    10e6:	3c 81       	ldd	r19, Y+4	; 0x04
    10e8:	22 30       	cpi	r18, 0x02	; 2
    10ea:	31 05       	cpc	r19, r1
    10ec:	81 f0       	breq	.+32     	; 0x110e <GPIO_writePort+0x62>
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	83 30       	cpi	r24, 0x03	; 3
    10f4:	91 05       	cpc	r25, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x6c>
    10f8:	13 c0       	rjmp	.+38     	; 0x1120 <GPIO_writePort+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		PORTA = value;
    10fa:	eb e3       	ldi	r30, 0x3B	; 59
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	80 83       	st	Z, r24
    1102:	0e c0       	rjmp	.+28     	; 0x1120 <GPIO_writePort+0x74>
		break;

	case PORTB_ID:
		PORTB = value;
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <GPIO_writePort+0x74>
		break;

	case PORTC_ID:
		PORTC = value;
    110e:	e5 e3       	ldi	r30, 0x35	; 53
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <GPIO_writePort+0x74>
		break;

	case PORTD_ID:
		PORTD = value;
    1118:	e2 e3       	ldi	r30, 0x32	; 50
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
		break;
	}
}
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <GPIO_readPin>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * get the value of a specific pin on PIN register by using GET_BIT macro.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	00 d0       	rcall	.+0      	; 0x1134 <GPIO_readPin+0x6>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <GPIO_readPin+0x8>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	8a 83       	std	Y+2, r24	; 0x02
    113e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_read = LOGIC_LOW;
    1140:	19 82       	std	Y+1, r1	; 0x01

	switch(port_num)
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3d 83       	std	Y+5, r19	; 0x05
    114a:	2c 83       	std	Y+4, r18	; 0x04
    114c:	4c 81       	ldd	r20, Y+4	; 0x04
    114e:	5d 81       	ldd	r21, Y+5	; 0x05
    1150:	41 30       	cpi	r20, 0x01	; 1
    1152:	51 05       	cpc	r21, r1
    1154:	41 f1       	breq	.+80     	; 0x11a6 <GPIO_readPin+0x78>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	91 05       	cpc	r25, r1
    115e:	34 f4       	brge	.+12     	; 0x116c <GPIO_readPin+0x3e>
    1160:	2c 81       	ldd	r18, Y+4	; 0x04
    1162:	3d 81       	ldd	r19, Y+5	; 0x05
    1164:	21 15       	cp	r18, r1
    1166:	31 05       	cpc	r19, r1
    1168:	61 f0       	breq	.+24     	; 0x1182 <GPIO_readPin+0x54>
    116a:	52 c0       	rjmp	.+164    	; 0x1210 <GPIO_readPin+0xe2>
    116c:	4c 81       	ldd	r20, Y+4	; 0x04
    116e:	5d 81       	ldd	r21, Y+5	; 0x05
    1170:	42 30       	cpi	r20, 0x02	; 2
    1172:	51 05       	cpc	r21, r1
    1174:	51 f1       	breq	.+84     	; 0x11ca <GPIO_readPin+0x9c>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	91 05       	cpc	r25, r1
    117e:	b9 f1       	breq	.+110    	; 0x11ee <GPIO_readPin+0xc0>
    1180:	47 c0       	rjmp	.+142    	; 0x1210 <GPIO_readPin+0xe2>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		pin_read = GET_BIT(PINA, pin_num);
    1182:	e9 e3       	ldi	r30, 0x39	; 57
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <GPIO_readPin+0x6c>
    1196:	55 95       	asr	r21
    1198:	47 95       	ror	r20
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <GPIO_readPin+0x68>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	35 c0       	rjmp	.+106    	; 0x1210 <GPIO_readPin+0xe2>
		break;

	case PORTB_ID:
		pin_read = GET_BIT(PINB, pin_num);
    11a6:	e6 e3       	ldi	r30, 0x36	; 54
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	a9 01       	movw	r20, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_readPin+0x90>
    11ba:	55 95       	asr	r21
    11bc:	47 95       	ror	r20
    11be:	8a 95       	dec	r24
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_readPin+0x8c>
    11c2:	ca 01       	movw	r24, r20
    11c4:	81 70       	andi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	23 c0       	rjmp	.+70     	; 0x1210 <GPIO_readPin+0xe2>
		break;

	case PORTC_ID:
		pin_read = GET_BIT(PINC, pin_num);
    11ca:	e3 e3       	ldi	r30, 0x33	; 51
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	a9 01       	movw	r20, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <GPIO_readPin+0xb4>
    11de:	55 95       	asr	r21
    11e0:	47 95       	ror	r20
    11e2:	8a 95       	dec	r24
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <GPIO_readPin+0xb0>
    11e6:	ca 01       	movw	r24, r20
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <GPIO_readPin+0xe2>
		break;

	case PORTD_ID:
		pin_read = GET_BIT(PIND, pin_num);
    11ee:	e0 e3       	ldi	r30, 0x30	; 48
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_readPin+0xd8>
    1202:	55 95       	asr	r21
    1204:	47 95       	ror	r20
    1206:	8a 95       	dec	r24
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_readPin+0xd4>
    120a:	ca 01       	movw	r24, r20
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return pin_read;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GPIO_readPort>:
 * Return-Type: void
 * Functionality: It use switch-case method to switch on all 4 I/O ports on AVR MC, then it
 * get the value of PIN register.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <GPIO_readPort+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <GPIO_readPort+0x8>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_read = LOGIC_LOW;
    1230:	19 82       	std	Y+1, r1	; 0x01

	switch(port_num)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3c 83       	std	Y+4, r19	; 0x04
    123a:	2b 83       	std	Y+3, r18	; 0x03
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	91 05       	cpc	r25, r1
    1244:	d1 f0       	breq	.+52     	; 0x127a <GPIO_readPort+0x58>
    1246:	2b 81       	ldd	r18, Y+3	; 0x03
    1248:	3c 81       	ldd	r19, Y+4	; 0x04
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <GPIO_readPort+0x38>
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	61 f0       	breq	.+24     	; 0x1270 <GPIO_readPort+0x4e>
    1258:	1e c0       	rjmp	.+60     	; 0x1296 <GPIO_readPort+0x74>
    125a:	2b 81       	ldd	r18, Y+3	; 0x03
    125c:	3c 81       	ldd	r19, Y+4	; 0x04
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <GPIO_readPort+0x62>
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	83 30       	cpi	r24, 0x03	; 3
    126a:	91 05       	cpc	r25, r1
    126c:	81 f0       	breq	.+32     	; 0x128e <GPIO_readPort+0x6c>
    126e:	13 c0       	rjmp	.+38     	; 0x1296 <GPIO_readPort+0x74>
	default:
		/*Do Nothing*/
		break;

	case PORTA_ID:
		port_read = PINA;
    1270:	e9 e3       	ldi	r30, 0x39	; 57
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	0e c0       	rjmp	.+28     	; 0x1296 <GPIO_readPort+0x74>
		break;

	case PORTB_ID:
		port_read = PINB;
    127a:	e6 e3       	ldi	r30, 0x36	; 54
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	09 c0       	rjmp	.+18     	; 0x1296 <GPIO_readPort+0x74>
		break;

	case PORTC_ID:
		port_read = PINC;
    1284:	e3 e3       	ldi	r30, 0x33	; 51
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <GPIO_readPort+0x74>
		break;

	case PORTD_ID:
		port_read = PIND;
    128e:	e0 e3       	ldi	r30, 0x30	; 48
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return port_read;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <HMI_TakePasswordFromUser>:




void HMI_TakePasswordFromUser(uint8 *password)
{
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	61 97       	sbiw	r28, 0x11	; 17
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	99 8b       	std	Y+17, r25	; 0x11
    12c0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    12c2:	1f 86       	std	Y+15, r1	; 0x0f
    12c4:	84 c0       	rjmp	.+264    	; 0x13ce <HMI_TakePasswordFromUser+0x128>
	{
		password[i] = KEYPAD_getPressedKey();	/*Get character from Keypad*/
    12c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	88 89       	ldd	r24, Y+16	; 0x10
    12ce:	99 89       	ldd	r25, Y+17	; 0x11
    12d0:	8c 01       	movw	r16, r24
    12d2:	02 0f       	add	r16, r18
    12d4:	13 1f       	adc	r17, r19
    12d6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <KEYPAD_getPressedKey>
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
		LCD_displayCharacter('*');				/*Display '*' by taking each character*/
    12de:	8a e2       	ldi	r24, 0x2A	; 42
    12e0:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_displayCharacter>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a7 e8       	ldi	r26, 0x87	; 135
    12ea:	b3 e4       	ldi	r27, 0x43	; 67
    12ec:	8b 87       	std	Y+11, r24	; 0x0b
    12ee:	9c 87       	std	Y+12, r25	; 0x0c
    12f0:	ad 87       	std	Y+13, r26	; 0x0d
    12f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4a ef       	ldi	r20, 0xFA	; 250
    1302:	54 e4       	ldi	r21, 0x44	; 68
    1304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	8f 83       	std	Y+7, r24	; 0x07
    130e:	98 87       	std	Y+8, r25	; 0x08
    1310:	a9 87       	std	Y+9, r26	; 0x09
    1312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e8       	ldi	r20, 0x80	; 128
    1322:	5f e3       	ldi	r21, 0x3F	; 63
    1324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1328:	88 23       	and	r24, r24
    132a:	2c f4       	brge	.+10     	; 0x1336 <HMI_TakePasswordFromUser+0x90>
		__ticks = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	3f c0       	rjmp	.+126    	; 0x13b4 <HMI_TakePasswordFromUser+0x10e>
	else if (__tmp > 65535)
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134a:	18 16       	cp	r1, r24
    134c:	4c f5       	brge	.+82     	; 0x13a0 <HMI_TakePasswordFromUser+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	0f c0       	rjmp	.+30     	; 0x1396 <HMI_TakePasswordFromUser+0xf0>
    1378:	88 ec       	ldi	r24, 0xC8	; 200
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <HMI_TakePasswordFromUser+0xde>
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	69 f7       	brne	.-38     	; 0x1378 <HMI_TakePasswordFromUser+0xd2>
    139e:	14 c0       	rjmp	.+40     	; 0x13c8 <HMI_TakePasswordFromUser+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a0:	6f 81       	ldd	r22, Y+7	; 0x07
    13a2:	78 85       	ldd	r23, Y+8	; 0x08
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <HMI_TakePasswordFromUser+0x11a>
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	89 83       	std	Y+1, r24	; 0x01

void HMI_TakePasswordFromUser(uint8 *password)
{
	uint8 i;

	for(i = 0 ; i < PASS_MAX_SIZE ; i++)
    13c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ca:	8f 5f       	subi	r24, 0xFF	; 255
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	85 30       	cpi	r24, 0x05	; 5
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <HMI_TakePasswordFromUser+0x130>
    13d4:	78 cf       	rjmp	.-272    	; 0x12c6 <HMI_TakePasswordFromUser+0x20>
		password[i] = KEYPAD_getPressedKey();	/*Get character from Keypad*/
		LCD_displayCharacter('*');				/*Display '*' by taking each character*/
		_delay_ms(270);
	}

	while(KEYPAD_getPressedKey() != '#');		/*Wait till the user enter '#' as enter*/
    13d6:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <KEYPAD_getPressedKey>
    13da:	83 32       	cpi	r24, 0x23	; 35
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <HMI_TakePasswordFromUser+0x130>

	password[5] = '#';							/*Assign the last character as '#'*/
    13de:	88 89       	ldd	r24, Y+16	; 0x10
    13e0:	99 89       	ldd	r25, Y+17	; 0x11
    13e2:	fc 01       	movw	r30, r24
    13e4:	35 96       	adiw	r30, 0x05	; 5
    13e6:	83 e2       	ldi	r24, 0x23	; 35
    13e8:	80 83       	st	Z, r24
	password[6] = '\0';							/*Terminate string to be sent by UART*/
    13ea:	88 89       	ldd	r24, Y+16	; 0x10
    13ec:	99 89       	ldd	r25, Y+17	; 0x11
    13ee:	fc 01       	movw	r30, r24
    13f0:	36 96       	adiw	r30, 0x06	; 6
    13f2:	10 82       	st	Z, r1

}
    13f4:	61 96       	adiw	r28, 0x11	; 17
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	f8 94       	cli
    13fa:	de bf       	out	0x3e, r29	; 62
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	cd bf       	out	0x3d, r28	; 61
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	1f 91       	pop	r17
    1406:	0f 91       	pop	r16
    1408:	08 95       	ret

0000140a <main>:
/*******************************************************************************
 *                                    MAIN                                     *
 *******************************************************************************/

int main(void)
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	ed 97       	sbiw	r28, 0x3d	; 61
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
	uint8 Str[20];

	/*************************Initialization Structures**************************/
	UART_ConfigType uart_config = {Bits_8, Disabled, One_Bit, 9600};
    141e:	ce 01       	movw	r24, r28
    1420:	c2 96       	adiw	r24, 0x32	; 50
    1422:	9a af       	std	Y+58, r25	; 0x3a
    1424:	89 af       	std	Y+57, r24	; 0x39
    1426:	ed e1       	ldi	r30, 0x1D	; 29
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	fc af       	std	Y+60, r31	; 0x3c
    142c:	eb af       	std	Y+59, r30	; 0x3b
    142e:	f7 e0       	ldi	r31, 0x07	; 7
    1430:	fd af       	std	Y+61, r31	; 0x3d
    1432:	eb ad       	ldd	r30, Y+59	; 0x3b
    1434:	fc ad       	ldd	r31, Y+60	; 0x3c
    1436:	00 80       	ld	r0, Z
    1438:	8b ad       	ldd	r24, Y+59	; 0x3b
    143a:	9c ad       	ldd	r25, Y+60	; 0x3c
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	9c af       	std	Y+60, r25	; 0x3c
    1440:	8b af       	std	Y+59, r24	; 0x3b
    1442:	e9 ad       	ldd	r30, Y+57	; 0x39
    1444:	fa ad       	ldd	r31, Y+58	; 0x3a
    1446:	00 82       	st	Z, r0
    1448:	89 ad       	ldd	r24, Y+57	; 0x39
    144a:	9a ad       	ldd	r25, Y+58	; 0x3a
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	9a af       	std	Y+58, r25	; 0x3a
    1450:	89 af       	std	Y+57, r24	; 0x39
    1452:	9d ad       	ldd	r25, Y+61	; 0x3d
    1454:	91 50       	subi	r25, 0x01	; 1
    1456:	9d af       	std	Y+61, r25	; 0x3d
    1458:	ed ad       	ldd	r30, Y+61	; 0x3d
    145a:	ee 23       	and	r30, r30
    145c:	51 f7       	brne	.-44     	; 0x1432 <main+0x28>


	/*************************Initialization Functions***************************/
	UART_init(&uart_config);
    145e:	ce 01       	movw	r24, r28
    1460:	c2 96       	adiw	r24, 0x32	; 50
    1462:	0e 94 ae 18 	call	0x315c	; 0x315c <UART_init>
	LCD_init();
    1466:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_init>
	SREG |= (1<<7);
    146a:	af e5       	ldi	r26, 0x5F	; 95
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ef e5       	ldi	r30, 0x5F	; 95
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 68       	ori	r24, 0x80	; 128
    1476:	8c 93       	st	X, r24


	LCD_clearScreen();
    1478:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>

	HMI_CreatePassword();
    147c:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <HMI_CreatePassword>
	/*Main Options set menu (All other ways return to this while 1 after executing it's function*/
	while(1)
	{
		uint8 key_pressed;

		LCD_clearScreen();
    1480:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    1484:	80 e6       	ldi	r24, 0x60	; 96
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
    148c:	2e e6       	ldi	r18, 0x6E	; 110
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	a9 01       	movw	r20, r18
    1496:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayStringRowColumn>



		key_pressed = KEYPAD_getPressedKey();
    149a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <KEYPAD_getPressedKey>
    149e:	8d 8f       	std	Y+29, r24	; 0x1d

		/*Establishing connection between HMI and Control*/
		UART_sendByte(HMI_READY_UART);
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
		while(UART_receiveByte() != CONTROL_READY_UART);
    14a6:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    14aa:	8f 3f       	cpi	r24, 0xFF	; 255
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <main+0x9c>

		UART_sendByte(key_pressed);		/*Sending state notification byte*/
    14ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b0:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>

		/*Transferring control to HMI_OpenDoor() or HMI_ChangePass based on user entered symbol*/
		if(key_pressed == '+')
    14b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b6:	8b 32       	cpi	r24, 0x2B	; 43
    14b8:	09 f0       	breq	.+2      	; 0x14bc <main+0xb2>
    14ba:	77 c0       	rjmp	.+238    	; 0x15aa <main+0x1a0>
		{
			LCD_clearScreen();
    14bc:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a8 e4       	ldi	r26, 0x48	; 72
    14c6:	b3 e4       	ldi	r27, 0x43	; 67
    14c8:	89 8f       	std	Y+25, r24	; 0x19
    14ca:	9a 8f       	std	Y+26, r25	; 0x1a
    14cc:	ab 8f       	std	Y+27, r26	; 0x1b
    14ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	69 8d       	ldd	r22, Y+25	; 0x19
    14d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8d 8b       	std	Y+21, r24	; 0x15
    14ea:	9e 8b       	std	Y+22, r25	; 0x16
    14ec:	af 8b       	std	Y+23, r26	; 0x17
    14ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f0:	6d 89       	ldd	r22, Y+21	; 0x15
    14f2:	7e 89       	ldd	r23, Y+22	; 0x16
    14f4:	8f 89       	ldd	r24, Y+23	; 0x17
    14f6:	98 8d       	ldd	r25, Y+24	; 0x18
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <main+0x108>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9c 8b       	std	Y+20, r25	; 0x14
    150e:	8b 8b       	std	Y+19, r24	; 0x13
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <main+0x186>
	else if (__tmp > 65535)
    1512:	6d 89       	ldd	r22, Y+21	; 0x15
    1514:	7e 89       	ldd	r23, Y+22	; 0x16
    1516:	8f 89       	ldd	r24, Y+23	; 0x17
    1518:	98 8d       	ldd	r25, Y+24	; 0x18
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <main+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	69 8d       	ldd	r22, Y+25	; 0x19
    152c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	8b 8b       	std	Y+19, r24	; 0x13
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <main+0x168>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a 8b       	std	Y+18, r25	; 0x12
    155a:	89 8b       	std	Y+17, r24	; 0x11
    155c:	89 89       	ldd	r24, Y+17	; 0x11
    155e:	9a 89       	ldd	r25, Y+18	; 0x12
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <main+0x156>
    1564:	9a 8b       	std	Y+18, r25	; 0x12
    1566:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <main+0x14a>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <main+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6d 89       	ldd	r22, Y+21	; 0x15
    157e:	7e 89       	ldd	r23, Y+22	; 0x16
    1580:	8f 89       	ldd	r24, Y+23	; 0x17
    1582:	98 8d       	ldd	r25, Y+24	; 0x18
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	8b 8b       	std	Y+19, r24	; 0x13
    1590:	8b 89       	ldd	r24, Y+19	; 0x13
    1592:	9c 89       	ldd	r25, Y+20	; 0x14
    1594:	98 8b       	std	Y+16, r25	; 0x10
    1596:	8f 87       	std	Y+15, r24	; 0x0f
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x192>
    15a0:	98 8b       	std	Y+16, r25	; 0x10
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			HMI_OpenDoor();
    15a4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <HMI_OpenDoor>
    15a8:	6b cf       	rjmp	.-298    	; 0x1480 <main+0x76>
		}

		else if(key_pressed == '-')
    15aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ac:	8d 32       	cpi	r24, 0x2D	; 45
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <main+0x1a8>
    15b0:	67 cf       	rjmp	.-306    	; 0x1480 <main+0x76>
		{
			LCD_clearScreen();
    15b2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a8 e4       	ldi	r26, 0x48	; 72
    15bc:	b3 e4       	ldi	r27, 0x43	; 67
    15be:	8b 87       	std	Y+11, r24	; 0x0b
    15c0:	9c 87       	std	Y+12, r25	; 0x0c
    15c2:	ad 87       	std	Y+13, r26	; 0x0d
    15c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    15cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a ef       	ldi	r20, 0xFA	; 250
    15d4:	54 e4       	ldi	r21, 0x44	; 68
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	8f 83       	std	Y+7, r24	; 0x07
    15e0:	98 87       	std	Y+8, r25	; 0x08
    15e2:	a9 87       	std	Y+9, r26	; 0x09
    15e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e6:	6f 81       	ldd	r22, Y+7	; 0x07
    15e8:	78 85       	ldd	r23, Y+8	; 0x08
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <main+0x1fe>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <main+0x27c>
	else if (__tmp > 65535)
    1608:	6f 81       	ldd	r22, Y+7	; 0x07
    160a:	78 85       	ldd	r23, Y+8	; 0x08
    160c:	89 85       	ldd	r24, Y+9	; 0x09
    160e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <main+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6b 85       	ldd	r22, Y+11	; 0x0b
    1622:	7c 85       	ldd	r23, Y+12	; 0x0c
    1624:	8d 85       	ldd	r24, Y+13	; 0x0d
    1626:	9e 85       	ldd	r25, Y+14	; 0x0e
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <main+0x25e>
    164a:	88 ec       	ldi	r24, 0xC8	; 200
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9c 83       	std	Y+4, r25	; 0x04
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <main+0x24c>
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	9e 83       	std	Y+6, r25	; 0x06
    1666:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <main+0x240>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <main+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	8d 81       	ldd	r24, Y+5	; 0x05
    1688:	9e 81       	ldd	r25, Y+6	; 0x06
    168a:	9a 83       	std	Y+2, r25	; 0x02
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <main+0x288>
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200);
			HMI_ChangePass();
    169a:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <HMI_ChangePass>
    169e:	f0 ce       	rjmp	.-544    	; 0x1480 <main+0x76>

000016a0 <HMI_CreatePassword>:
}



void HMI_CreatePassword(void)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	c7 54       	subi	r28, 0x47	; 71
    16aa:	d0 40       	sbci	r29, 0x00	; 0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
	uint8 password_first[PASS_MAX_SIZE + 2];				/*User First enter password*/
	uint8 password_second[PASS_MAX_SIZE + 2];				/*User Second enter password*/
	bool Passwords_Match;

	/*****************************User First Enter Password*****************************/
	LCD_displayString("Enter Password:");
    16b6:	8e e7       	ldi	r24, 0x7E	; 126
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
	LCD_moveCursor(1,0);
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_moveCursor>

	HMI_TakePasswordFromUser(password_first);
    16c6:	ce 01       	movw	r24, r28
    16c8:	ca 96       	adiw	r24, 0x3a	; 58
    16ca:	0e 94 53 09 	call	0x12a6	; 0x12a6 <HMI_TakePasswordFromUser>

	LCD_clearScreen();
    16ce:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a8 ec       	ldi	r26, 0xC8	; 200
    16d8:	b2 e4       	ldi	r27, 0x42	; 66
    16da:	8d ab       	std	Y+53, r24	; 0x35
    16dc:	9e ab       	std	Y+54, r25	; 0x36
    16de:	af ab       	std	Y+55, r26	; 0x37
    16e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	6d a9       	ldd	r22, Y+53	; 0x35
    16e4:	7e a9       	ldd	r23, Y+54	; 0x36
    16e6:	8f a9       	ldd	r24, Y+55	; 0x37
    16e8:	98 ad       	ldd	r25, Y+56	; 0x38
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	89 ab       	std	Y+49, r24	; 0x31
    16fc:	9a ab       	std	Y+50, r25	; 0x32
    16fe:	ab ab       	std	Y+51, r26	; 0x33
    1700:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1702:	69 a9       	ldd	r22, Y+49	; 0x31
    1704:	7a a9       	ldd	r23, Y+50	; 0x32
    1706:	8b a9       	ldd	r24, Y+51	; 0x33
    1708:	9c a9       	ldd	r25, Y+52	; 0x34
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <HMI_CreatePassword+0x84>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	98 ab       	std	Y+48, r25	; 0x30
    1720:	8f a7       	std	Y+47, r24	; 0x2f
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <HMI_CreatePassword+0x102>
	else if (__tmp > 65535)
    1724:	69 a9       	ldd	r22, Y+49	; 0x31
    1726:	7a a9       	ldd	r23, Y+50	; 0x32
    1728:	8b a9       	ldd	r24, Y+51	; 0x33
    172a:	9c a9       	ldd	r25, Y+52	; 0x34
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <HMI_CreatePassword+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	6d a9       	ldd	r22, Y+53	; 0x35
    173e:	7e a9       	ldd	r23, Y+54	; 0x36
    1740:	8f a9       	ldd	r24, Y+55	; 0x37
    1742:	98 ad       	ldd	r25, Y+56	; 0x38
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <HMI_CreatePassword+0xe4>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9e a7       	std	Y+46, r25	; 0x2e
    176c:	8d a7       	std	Y+45, r24	; 0x2d
    176e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1770:	9e a5       	ldd	r25, Y+46	; 0x2e
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <HMI_CreatePassword+0xd2>
    1776:	9e a7       	std	Y+46, r25	; 0x2e
    1778:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8f a5       	ldd	r24, Y+47	; 0x2f
    177c:	98 a9       	ldd	r25, Y+48	; 0x30
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	98 ab       	std	Y+48, r25	; 0x30
    1782:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8f a5       	ldd	r24, Y+47	; 0x2f
    1786:	98 a9       	ldd	r25, Y+48	; 0x30
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <HMI_CreatePassword+0xc6>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <HMI_CreatePassword+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	69 a9       	ldd	r22, Y+49	; 0x31
    1790:	7a a9       	ldd	r23, Y+50	; 0x32
    1792:	8b a9       	ldd	r24, Y+51	; 0x33
    1794:	9c a9       	ldd	r25, Y+52	; 0x34
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	98 ab       	std	Y+48, r25	; 0x30
    17a0:	8f a7       	std	Y+47, r24	; 0x2f
    17a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a4:	98 a9       	ldd	r25, Y+48	; 0x30
    17a6:	9c a7       	std	Y+44, r25	; 0x2c
    17a8:	8b a7       	std	Y+43, r24	; 0x2b
    17aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    17ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <HMI_CreatePassword+0x10e>
    17b2:	9c a7       	std	Y+44, r25	; 0x2c
    17b4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(100);

	/****************************User Second Enter Password****************************/
	LCD_displayString("Re-Enter Pass:");
    17b6:	8e e8       	ldi	r24, 0x8E	; 142
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
	LCD_moveCursor(1,0);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_moveCursor>

	HMI_TakePasswordFromUser(password_second);
    17c6:	ce 01       	movw	r24, r28
    17c8:	8f 5b       	subi	r24, 0xBF	; 191
    17ca:	9f 4f       	sbci	r25, 0xFF	; 255
    17cc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <HMI_TakePasswordFromUser>


	/******************************Sending First Password******************************/

	/* Wait until MC2 is ready to receive the string */
	while(UART_receiveByte() != CONTROL_READY_UART){}
    17d0:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    17d4:	8f 3f       	cpi	r24, 0xFF	; 255
    17d6:	e1 f7       	brne	.-8      	; 0x17d0 <HMI_CreatePassword+0x130>

	/* Send the required string to MC2 through UART */
	UART_sendString(password_first);
    17d8:	ce 01       	movw	r24, r28
    17da:	ca 96       	adiw	r24, 0x3a	; 58
    17dc:	0e 94 3d 19 	call	0x327a	; 0x327a <UART_sendString>


	/*****************************Sending Second Password*****************************/

	/*Wait until MC2 is ready to receive the string*/
	while(UART_receiveByte() != CONTROL_READY_UART){}
    17e0:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    17e4:	8f 3f       	cpi	r24, 0xFF	; 255
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <HMI_CreatePassword+0x140>

	/*Send the required string to MC2 through UART*/
	UART_sendString(password_second);
    17e8:	ce 01       	movw	r24, r28
    17ea:	8f 5b       	subi	r24, 0xBF	; 191
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	0e 94 3d 19 	call	0x327a	; 0x327a <UART_sendString>


	/***********************Display Passwords Matching Feedback************************/

	LCD_clearScreen();
    17f2:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a6 e9       	ldi	r26, 0x96	; 150
    17fc:	b3 e4       	ldi	r27, 0x43	; 67
    17fe:	8f a3       	std	Y+39, r24	; 0x27
    1800:	98 a7       	std	Y+40, r25	; 0x28
    1802:	a9 a7       	std	Y+41, r26	; 0x29
    1804:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	6f a1       	ldd	r22, Y+39	; 0x27
    1808:	78 a5       	ldd	r23, Y+40	; 0x28
    180a:	89 a5       	ldd	r24, Y+41	; 0x29
    180c:	9a a5       	ldd	r25, Y+42	; 0x2a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8b a3       	std	Y+35, r24	; 0x23
    1820:	9c a3       	std	Y+36, r25	; 0x24
    1822:	ad a3       	std	Y+37, r26	; 0x25
    1824:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1826:	6b a1       	ldd	r22, Y+35	; 0x23
    1828:	7c a1       	ldd	r23, Y+36	; 0x24
    182a:	8d a1       	ldd	r24, Y+37	; 0x25
    182c:	9e a1       	ldd	r25, Y+38	; 0x26
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <HMI_CreatePassword+0x1a8>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <HMI_CreatePassword+0x226>
	else if (__tmp > 65535)
    1848:	6b a1       	ldd	r22, Y+35	; 0x23
    184a:	7c a1       	ldd	r23, Y+36	; 0x24
    184c:	8d a1       	ldd	r24, Y+37	; 0x25
    184e:	9e a1       	ldd	r25, Y+38	; 0x26
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <HMI_CreatePassword+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	6f a1       	ldd	r22, Y+39	; 0x27
    1862:	78 a5       	ldd	r23, Y+40	; 0x28
    1864:	89 a5       	ldd	r24, Y+41	; 0x29
    1866:	9a a5       	ldd	r25, Y+42	; 0x2a
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9a a3       	std	Y+34, r25	; 0x22
    1886:	89 a3       	std	Y+33, r24	; 0x21
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <HMI_CreatePassword+0x208>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	98 a3       	std	Y+32, r25	; 0x20
    1890:	8f 8f       	std	Y+31, r24	; 0x1f
    1892:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1894:	98 a1       	ldd	r25, Y+32	; 0x20
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <HMI_CreatePassword+0x1f6>
    189a:	98 a3       	std	Y+32, r25	; 0x20
    189c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	89 a1       	ldd	r24, Y+33	; 0x21
    18a0:	9a a1       	ldd	r25, Y+34	; 0x22
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9a a3       	std	Y+34, r25	; 0x22
    18a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	89 a1       	ldd	r24, Y+33	; 0x21
    18aa:	9a a1       	ldd	r25, Y+34	; 0x22
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <HMI_CreatePassword+0x1ea>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <HMI_CreatePassword+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9a a3       	std	Y+34, r25	; 0x22
    18c4:	89 a3       	std	Y+33, r24	; 0x21
    18c6:	89 a1       	ldd	r24, Y+33	; 0x21
    18c8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ca:	9e 8f       	std	Y+30, r25	; 0x1e
    18cc:	8d 8f       	std	Y+29, r24	; 0x1d
    18ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <HMI_CreatePassword+0x232>
    18d6:	9e 8f       	std	Y+30, r25	; 0x1e
    18d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);

	/* Send MC2_READY byte to MC1 to ask it to send the string */
	UART_sendByte(HMI_READY_UART);
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>

	/* Receive Confirmation byte from MC1 through UART */
	Passwords_Match = UART_receiveByte();
    18e0:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    18e4:	89 af       	std	Y+57, r24	; 0x39

	if(Passwords_Match)
    18e6:	89 ad       	ldd	r24, Y+57	; 0x39
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <HMI_CreatePassword+0x24e>
    18ec:	80 c0       	rjmp	.+256    	; 0x19ee <HMI_CreatePassword+0x34e>
	{
		LCD_displayString("PASSWORDS MATCH");
    18ee:	8d e9       	ldi	r24, 0x9D	; 157
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "PASS SAVED");
    18f6:	2d ea       	ldi	r18, 0xAD	; 173
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	a9 01       	movw	r20, r18
    1900:	0e 94 7f 17 	call	0x2efe	; 0x2efe <LCD_displayStringRowColumn>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	aa ef       	ldi	r26, 0xFA	; 250
    190a:	b3 e4       	ldi	r27, 0x43	; 67
    190c:	89 8f       	std	Y+25, r24	; 0x19
    190e:	9a 8f       	std	Y+26, r25	; 0x1a
    1910:	ab 8f       	std	Y+27, r26	; 0x1b
    1912:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	69 8d       	ldd	r22, Y+25	; 0x19
    1916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    191a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a ef       	ldi	r20, 0xFA	; 250
    1922:	54 e4       	ldi	r21, 0x44	; 68
    1924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8d 8b       	std	Y+21, r24	; 0x15
    192e:	9e 8b       	std	Y+22, r25	; 0x16
    1930:	af 8b       	std	Y+23, r26	; 0x17
    1932:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1934:	6d 89       	ldd	r22, Y+21	; 0x15
    1936:	7e 89       	ldd	r23, Y+22	; 0x16
    1938:	8f 89       	ldd	r24, Y+23	; 0x17
    193a:	98 8d       	ldd	r25, Y+24	; 0x18
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <HMI_CreatePassword+0x2b6>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 8b       	std	Y+20, r25	; 0x14
    1952:	8b 8b       	std	Y+19, r24	; 0x13
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <HMI_CreatePassword+0x334>
	else if (__tmp > 65535)
    1956:	6d 89       	ldd	r22, Y+21	; 0x15
    1958:	7e 89       	ldd	r23, Y+22	; 0x16
    195a:	8f 89       	ldd	r24, Y+23	; 0x17
    195c:	98 8d       	ldd	r25, Y+24	; 0x18
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <HMI_CreatePassword+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	69 8d       	ldd	r22, Y+25	; 0x19
    1970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9c 8b       	std	Y+20, r25	; 0x14
    1994:	8b 8b       	std	Y+19, r24	; 0x13
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <HMI_CreatePassword+0x316>
    1998:	88 ec       	ldi	r24, 0xC8	; 200
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9a 8b       	std	Y+18, r25	; 0x12
    199e:	89 8b       	std	Y+17, r24	; 0x11
    19a0:	89 89       	ldd	r24, Y+17	; 0x11
    19a2:	9a 89       	ldd	r25, Y+18	; 0x12
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <HMI_CreatePassword+0x304>
    19a8:	9a 8b       	std	Y+18, r25	; 0x12
    19aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8b 89       	ldd	r24, Y+19	; 0x13
    19ae:	9c 89       	ldd	r25, Y+20	; 0x14
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	9c 8b       	std	Y+20, r25	; 0x14
    19b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <HMI_CreatePassword+0x2f8>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <HMI_CreatePassword+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	6d 89       	ldd	r22, Y+21	; 0x15
    19c2:	7e 89       	ldd	r23, Y+22	; 0x16
    19c4:	8f 89       	ldd	r24, Y+23	; 0x17
    19c6:	98 8d       	ldd	r25, Y+24	; 0x18
    19c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	98 8b       	std	Y+16, r25	; 0x10
    19da:	8f 87       	std	Y+15, r24	; 0x0f
    19dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19de:	98 89       	ldd	r25, Y+16	; 0x10
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <HMI_CreatePassword+0x340>
    19e4:	98 8b       	std	Y+16, r25	; 0x10
    19e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		LCD_clearScreen();
    19e8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
    19ec:	7a c0       	rjmp	.+244    	; 0x1ae2 <HMI_CreatePassword+0x442>
	}

	else
	{
		LCD_displayString("PASSWORD UNMATCH");
    19ee:	88 eb       	ldi	r24, 0xB8	; 184
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	aa ef       	ldi	r26, 0xFA	; 250
    19fc:	b3 e4       	ldi	r27, 0x43	; 67
    19fe:	8b 87       	std	Y+11, r24	; 0x0b
    1a00:	9c 87       	std	Y+12, r25	; 0x0c
    1a02:	ad 87       	std	Y+13, r26	; 0x0d
    1a04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a ef       	ldi	r20, 0xFA	; 250
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8f 83       	std	Y+7, r24	; 0x07
    1a20:	98 87       	std	Y+8, r25	; 0x08
    1a22:	a9 87       	std	Y+9, r26	; 0x09
    1a24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <HMI_CreatePassword+0x3a8>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9e 83       	std	Y+6, r25	; 0x06
    1a44:	8d 83       	std	Y+5, r24	; 0x05
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <HMI_CreatePassword+0x426>
	else if (__tmp > 65535)
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	78 85       	ldd	r23, Y+8	; 0x08
    1a4c:	89 85       	ldd	r24, Y+9	; 0x09
    1a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <HMI_CreatePassword+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <HMI_CreatePassword+0x408>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9c 83       	std	Y+4, r25	; 0x04
    1a90:	8b 83       	std	Y+3, r24	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <HMI_CreatePassword+0x3f6>
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <HMI_CreatePassword+0x3ea>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <HMI_CreatePassword+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ab4:	78 85       	ldd	r23, Y+8	; 0x08
    1ab6:	89 85       	ldd	r24, Y+9	; 0x09
    1ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	9a 83       	std	Y+2, r25	; 0x02
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <HMI_CreatePassword+0x432>
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_clearScreen();
    1ada:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		HMI_CreatePassword();
    1ade:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <HMI_CreatePassword>
	}

}
    1ae2:	c9 5b       	subi	r28, 0xB9	; 185
    1ae4:	df 4f       	sbci	r29, 0xFF	; 255
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <HMI_OpenDoor>:


void HMI_OpenDoor(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	66 97       	sbiw	r28, 0x16	; 22
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASS_MAX_SIZE + 2];
	bool Passwords_Match;

	/********************************User Enter Password********************************/

	LCD_clearScreen();
    1b0a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1b0e:	8e e7       	ldi	r24, 0x7E	; 126
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
	LCD_moveCursor(1,0);
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_moveCursor>

	HMI_TakePasswordFromUser(password);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	40 96       	adiw	r24, 0x10	; 16
    1b22:	0e 94 53 09 	call	0x12a6	; 0x12a6 <HMI_TakePasswordFromUser>

	/******************************Sending User's Password******************************/

	/*Establishing connection between HMI and Control*/
	UART_sendByte(HMI_READY_UART);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
	while(UART_receiveByte() != CONTROL_READY_UART);
    1b2c:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1b30:	8f 3f       	cpi	r24, 0xFF	; 255
    1b32:	e1 f7       	brne	.-8      	; 0x1b2c <HMI_OpenDoor+0x36>

	UART_sendString(password);
    1b34:	ce 01       	movw	r24, r28
    1b36:	40 96       	adiw	r24, 0x10	; 16
    1b38:	0e 94 3d 19 	call	0x327a	; 0x327a <UART_sendString>


	/**************************Receiving Password Entered Feedback************************/

	/*Establishing connection between HMI and Control*/
	UART_sendByte(HMI_READY_UART);
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
	while(UART_receiveByte() != CONTROL_READY_UART);
    1b42:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1b46:	8f 3f       	cpi	r24, 0xFF	; 255
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <HMI_OpenDoor+0x4c>

	/* Receive Confirmation byte from MC1 through UART */
	Passwords_Match = UART_receiveByte();
    1b4a:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1b4e:	8f 87       	std	Y+15, r24	; 0x0f


	/*****************************Display Open Door Sequence**************************/

	if(Passwords_Match)
    1b50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b52:	88 23       	and	r24, r24
    1b54:	89 f1       	breq	.+98     	; 0x1bb8 <HMI_OpenDoor+0xc2>
	{
		g_incorrect_pass_count = 0;
    1b56:	10 92 24 01 	sts	0x0124, r1

		Timer1_init(&g_timer1_config);
    1b5a:	87 e1       	ldi	r24, 0x17	; 23
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <Timer1_init>
		Timer1_setCallBack(&Timer_CallBackFunction);
    1b62:	81 ec       	ldi	r24, 0xC1	; 193
    1b64:	9f e0       	ldi	r25, 0x0F	; 15
    1b66:	0e 94 36 18 	call	0x306c	; 0x306c <Timer1_setCallBack>

		g_ticks = 0;
    1b6a:	10 92 27 01 	sts	0x0127, r1
		LCD_clearScreen();
    1b6e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Door Opening");
    1b72:	89 ec       	ldi	r24, 0xC9	; 201
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
		while(g_ticks < DOOR_MOTION_TIME);
    1b7a:	80 91 27 01 	lds	r24, 0x0127
    1b7e:	8f 30       	cpi	r24, 0x0F	; 15
    1b80:	e0 f3       	brcs	.-8      	; 0x1b7a <HMI_OpenDoor+0x84>

		g_ticks = 0;
    1b82:	10 92 27 01 	sts	0x0127, r1
		LCD_clearScreen();
    1b86:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Door Open");
    1b8a:	86 ed       	ldi	r24, 0xD6	; 214
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
		while(g_ticks < DOOR_HOLD_TIME);
    1b92:	80 91 27 01 	lds	r24, 0x0127
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	e0 f3       	brcs	.-8      	; 0x1b92 <HMI_OpenDoor+0x9c>

		g_ticks = 0;
    1b9a:	10 92 27 01 	sts	0x0127, r1
		LCD_clearScreen();
    1b9e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Door Closing");
    1ba2:	80 ee       	ldi	r24, 0xE0	; 224
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
		while(g_ticks < DOOR_MOTION_TIME);
    1baa:	80 91 27 01 	lds	r24, 0x0127
    1bae:	8f 30       	cpi	r24, 0x0F	; 15
    1bb0:	e0 f3       	brcs	.-8      	; 0x1baa <HMI_OpenDoor+0xb4>

		Timer1_deInit();
    1bb2:	0e 94 1a 18 	call	0x3034	; 0x3034 <Timer1_deInit>
    1bb6:	86 c0       	rjmp	.+268    	; 0x1cc4 <HMI_OpenDoor+0x1ce>
	}


	else
	{
		LCD_clearScreen();
    1bb8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Pass Incorrect");
    1bbc:	8d ee       	ldi	r24, 0xED	; 237
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	a8 e4       	ldi	r26, 0x48	; 72
    1bca:	b3 e4       	ldi	r27, 0x43	; 67
    1bcc:	8b 87       	std	Y+11, r24	; 0x0b
    1bce:	9c 87       	std	Y+12, r25	; 0x0c
    1bd0:	ad 87       	std	Y+13, r26	; 0x0d
    1bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	4a ef       	ldi	r20, 0xFA	; 250
    1be2:	54 e4       	ldi	r21, 0x44	; 68
    1be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8f 83       	std	Y+7, r24	; 0x07
    1bee:	98 87       	std	Y+8, r25	; 0x08
    1bf0:	a9 87       	std	Y+9, r26	; 0x09
    1bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e8       	ldi	r20, 0x80	; 128
    1c02:	5f e3       	ldi	r21, 0x3F	; 63
    1c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c08:	88 23       	and	r24, r24
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <HMI_OpenDoor+0x120>
		__ticks = 1;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	3f c0       	rjmp	.+126    	; 0x1c94 <HMI_OpenDoor+0x19e>
	else if (__tmp > 65535)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	3f ef       	ldi	r19, 0xFF	; 255
    1c22:	4f e7       	ldi	r20, 0x7F	; 127
    1c24:	57 e4       	ldi	r21, 0x47	; 71
    1c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c2a:	18 16       	cp	r1, r24
    1c2c:	4c f5       	brge	.+82     	; 0x1c80 <HMI_OpenDoor+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e2       	ldi	r20, 0x20	; 32
    1c3c:	51 e4       	ldi	r21, 0x41	; 65
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	bc 01       	movw	r22, r24
    1c48:	cd 01       	movw	r24, r26
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	0f c0       	rjmp	.+30     	; 0x1c76 <HMI_OpenDoor+0x180>
    1c58:	88 ec       	ldi	r24, 0xC8	; 200
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	f1 f7       	brne	.-4      	; 0x1c64 <HMI_OpenDoor+0x16e>
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	9e 83       	std	Y+6, r25	; 0x06
    1c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	69 f7       	brne	.-38     	; 0x1c58 <HMI_OpenDoor+0x162>
    1c7e:	14 c0       	rjmp	.+40     	; 0x1ca8 <HMI_OpenDoor+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	9e 83       	std	Y+6, r25	; 0x06
    1c92:	8d 83       	std	Y+5, r24	; 0x05
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <HMI_OpenDoor+0x1aa>
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(200);

		g_incorrect_pass_count++;
    1ca8:	80 91 24 01 	lds	r24, 0x0124
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	80 93 24 01 	sts	0x0124, r24

		if(g_incorrect_pass_count == 3)
    1cb2:	80 91 24 01 	lds	r24, 0x0124
    1cb6:	83 30       	cpi	r24, 0x03	; 3
    1cb8:	19 f4       	brne	.+6      	; 0x1cc0 <HMI_OpenDoor+0x1ca>
			HMI_AlarmMode();
    1cba:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <HMI_AlarmMode>
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <HMI_OpenDoor+0x1ce>

		else
			HMI_OpenDoor();
    1cc0:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <HMI_OpenDoor>
	}

}
    1cc4:	66 96       	adiw	r28, 0x16	; 22
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <HMI_ChangePass>:


void HMI_ChangePass(void)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	a4 97       	sbiw	r28, 0x24	; 36
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASS_MAX_SIZE + 2];
	bool Passwords_Match;

	/********************************User Enter Password********************************/

	LCD_clearScreen();
    1cea:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1cee:	8e e7       	ldi	r24, 0x7E	; 126
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
	LCD_moveCursor(1,0);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_moveCursor>

	HMI_TakePasswordFromUser(password);
    1cfe:	ce 01       	movw	r24, r28
    1d00:	4e 96       	adiw	r24, 0x1e	; 30
    1d02:	0e 94 53 09 	call	0x12a6	; 0x12a6 <HMI_TakePasswordFromUser>

	/******************************Sending User's Password******************************/

	/*Establishing connection between HMI and Control*/
	UART_sendByte(HMI_READY_UART);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
	while(UART_receiveByte() != CONTROL_READY_UART);
    1d0c:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1d10:	8f 3f       	cpi	r24, 0xFF	; 255
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <HMI_ChangePass+0x36>

	UART_sendString(password);
    1d14:	ce 01       	movw	r24, r28
    1d16:	4e 96       	adiw	r24, 0x1e	; 30
    1d18:	0e 94 3d 19 	call	0x327a	; 0x327a <UART_sendString>


	/**************************Receiving Password Entered Feedback************************/

	/*Establishing connection between HMI and Control*/
	UART_sendByte(HMI_READY_UART);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
	while(UART_receiveByte() != CONTROL_READY_UART);
    1d22:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1d26:	8f 3f       	cpi	r24, 0xFF	; 255
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <HMI_ChangePass+0x4c>

	/* Receive Confirmation byte from MC1 through UART */
	Passwords_Match = UART_receiveByte();
    1d2a:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    1d2e:	8d 8f       	std	Y+29, r24	; 0x1d


	/*****************************Display Open Door Sequence**************************/

	if(Passwords_Match)
    1d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d32:	88 23       	and	r24, r24
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <HMI_ChangePass+0x62>
    1d36:	7b c0       	rjmp	.+246    	; 0x1e2e <HMI_ChangePass+0x158>
	{
		LCD_clearScreen();
    1d38:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Pass Correct");
    1d3c:	8c ef       	ldi	r24, 0xFC	; 252
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a8 e4       	ldi	r26, 0x48	; 72
    1d4a:	b3 e4       	ldi	r27, 0x43	; 67
    1d4c:	89 8f       	std	Y+25, r24	; 0x19
    1d4e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d50:	ab 8f       	std	Y+27, r26	; 0x1b
    1d52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d54:	69 8d       	ldd	r22, Y+25	; 0x19
    1d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a ef       	ldi	r20, 0xFA	; 250
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8d 8b       	std	Y+21, r24	; 0x15
    1d6e:	9e 8b       	std	Y+22, r25	; 0x16
    1d70:	af 8b       	std	Y+23, r26	; 0x17
    1d72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d74:	6d 89       	ldd	r22, Y+21	; 0x15
    1d76:	7e 89       	ldd	r23, Y+22	; 0x16
    1d78:	8f 89       	ldd	r24, Y+23	; 0x17
    1d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <HMI_ChangePass+0xc0>
		__ticks = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	3f c0       	rjmp	.+126    	; 0x1e14 <HMI_ChangePass+0x13e>
	else if (__tmp > 65535)
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	3f ef       	ldi	r19, 0xFF	; 255
    1da2:	4f e7       	ldi	r20, 0x7F	; 127
    1da4:	57 e4       	ldi	r21, 0x47	; 71
    1da6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1daa:	18 16       	cp	r1, r24
    1dac:	4c f5       	brge	.+82     	; 0x1e00 <HMI_ChangePass+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dae:	69 8d       	ldd	r22, Y+25	; 0x19
    1db0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e2       	ldi	r20, 0x20	; 32
    1dbc:	51 e4       	ldi	r21, 0x41	; 65
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9c 8b       	std	Y+20, r25	; 0x14
    1dd4:	8b 8b       	std	Y+19, r24	; 0x13
    1dd6:	0f c0       	rjmp	.+30     	; 0x1df6 <HMI_ChangePass+0x120>
    1dd8:	88 ec       	ldi	r24, 0xC8	; 200
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9a 8b       	std	Y+18, r25	; 0x12
    1dde:	89 8b       	std	Y+17, r24	; 0x11
    1de0:	89 89       	ldd	r24, Y+17	; 0x11
    1de2:	9a 89       	ldd	r25, Y+18	; 0x12
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <HMI_ChangePass+0x10e>
    1de8:	9a 8b       	std	Y+18, r25	; 0x12
    1dea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dec:	8b 89       	ldd	r24, Y+19	; 0x13
    1dee:	9c 89       	ldd	r25, Y+20	; 0x14
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df6:	8b 89       	ldd	r24, Y+19	; 0x13
    1df8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	69 f7       	brne	.-38     	; 0x1dd8 <HMI_ChangePass+0x102>
    1dfe:	14 c0       	rjmp	.+40     	; 0x1e28 <HMI_ChangePass+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e00:	6d 89       	ldd	r22, Y+21	; 0x15
    1e02:	7e 89       	ldd	r23, Y+22	; 0x16
    1e04:	8f 89       	ldd	r24, Y+23	; 0x17
    1e06:	98 8d       	ldd	r25, Y+24	; 0x18
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	9c 8b       	std	Y+20, r25	; 0x14
    1e12:	8b 8b       	std	Y+19, r24	; 0x13
    1e14:	8b 89       	ldd	r24, Y+19	; 0x13
    1e16:	9c 89       	ldd	r25, Y+20	; 0x14
    1e18:	98 8b       	std	Y+16, r25	; 0x10
    1e1a:	8f 87       	std	Y+15, r24	; 0x0f
    1e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1e:	98 89       	ldd	r25, Y+16	; 0x10
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <HMI_ChangePass+0x14a>
    1e24:	98 8b       	std	Y+16, r25	; 0x10
    1e26:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);

		HMI_CreatePassword();
    1e28:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <HMI_CreatePassword>
    1e2c:	86 c0       	rjmp	.+268    	; 0x1f3a <HMI_ChangePass+0x264>
	}


	else
	{
		LCD_clearScreen();
    1e2e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
		LCD_displayString("Pass Incorrect");
    1e32:	8d ee       	ldi	r24, 0xED	; 237
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a8 e4       	ldi	r26, 0x48	; 72
    1e40:	b3 e4       	ldi	r27, 0x43	; 67
    1e42:	8b 87       	std	Y+11, r24	; 0x0b
    1e44:	9c 87       	std	Y+12, r25	; 0x0c
    1e46:	ad 87       	std	Y+13, r26	; 0x0d
    1e48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	4a ef       	ldi	r20, 0xFA	; 250
    1e58:	54 e4       	ldi	r21, 0x44	; 68
    1e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	8f 83       	std	Y+7, r24	; 0x07
    1e64:	98 87       	std	Y+8, r25	; 0x08
    1e66:	a9 87       	std	Y+9, r26	; 0x09
    1e68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e8       	ldi	r20, 0x80	; 128
    1e78:	5f e3       	ldi	r21, 0x3F	; 63
    1e7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	2c f4       	brge	.+10     	; 0x1e8c <HMI_ChangePass+0x1b6>
		__ticks = 1;
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
    1e8a:	3f c0       	rjmp	.+126    	; 0x1f0a <HMI_ChangePass+0x234>
	else if (__tmp > 65535)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	4c f5       	brge	.+82     	; 0x1ef6 <HMI_ChangePass+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e2       	ldi	r20, 0x20	; 32
    1eb2:	51 e4       	ldi	r21, 0x41	; 65
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	bc 01       	movw	r22, r24
    1ebe:	cd 01       	movw	r24, r26
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	0f c0       	rjmp	.+30     	; 0x1eec <HMI_ChangePass+0x216>
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c 83       	std	Y+4, r25	; 0x04
    1ed4:	8b 83       	std	Y+3, r24	; 0x03
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eda:	01 97       	sbiw	r24, 0x01	; 1
    1edc:	f1 f7       	brne	.-4      	; 0x1eda <HMI_ChangePass+0x204>
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	69 f7       	brne	.-38     	; 0x1ece <HMI_ChangePass+0x1f8>
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <HMI_ChangePass+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	9a 83       	std	Y+2, r25	; 0x02
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <HMI_ChangePass+0x240>
    1f1a:	9a 83       	std	Y+2, r25	; 0x02
    1f1c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(200);

		g_incorrect_pass_count++;
    1f1e:	80 91 24 01 	lds	r24, 0x0124
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	80 93 24 01 	sts	0x0124, r24

		if(g_incorrect_pass_count == 3)
    1f28:	80 91 24 01 	lds	r24, 0x0124
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	19 f4       	brne	.+6      	; 0x1f36 <HMI_ChangePass+0x260>
			HMI_AlarmMode();
    1f30:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <HMI_AlarmMode>
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <HMI_ChangePass+0x264>

		else
			HMI_ChangePass();
    1f36:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <HMI_ChangePass>
	}
}
    1f3a:	a4 96       	adiw	r28, 0x24	; 36
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <HMI_AlarmMode>:


void HMI_AlarmMode(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&g_timer1_config);
    1f54:	87 e1       	ldi	r24, 0x17	; 23
    1f56:	91 e0       	ldi	r25, 0x01	; 1
    1f58:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <Timer1_init>
	Timer1_setCallBack(&Timer_CallBackFunction);
    1f5c:	81 ec       	ldi	r24, 0xC1	; 193
    1f5e:	9f e0       	ldi	r25, 0x0F	; 15
    1f60:	0e 94 36 18 	call	0x306c	; 0x306c <Timer1_setCallBack>

	LCD_clearScreen();
    1f64:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <LCD_clearScreen>
	LCD_displayString("ERROR");
    1f68:	89 e0       	ldi	r24, 0x09	; 9
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>

	g_ticks = 0;
    1f70:	10 92 27 01 	sts	0x0127, r1
	while(g_ticks < ALARM_TIME);
    1f74:	80 91 27 01 	lds	r24, 0x0127
    1f78:	8c 33       	cpi	r24, 0x3C	; 60
    1f7a:	e0 f3       	brcs	.-8      	; 0x1f74 <HMI_AlarmMode+0x28>
}
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <Timer_CallBackFunction>:



void Timer_CallBackFunction(void)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1f8a:	80 91 27 01 	lds	r24, 0x0127
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	80 93 27 01 	sts	0x0127, r24
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <KEYPAD_getPressedKey>:
 * After the key is pressed, if KEYPAD_STANDARD_MODE is defined, the function will return the index of the key incremented by one.
 * If the KEYPAD_STANDARD_MODE is not defined the index of the key will be passed to KEYPAD_adjustKeyNumber() function
 * to substitute the scanned index with the real value on keypad.
 */
uint8 KEYPAD_getPressedKey(void)
{
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	6b 97       	sbiw	r28, 0x1b	; 27
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
	uint8 rows_count;			/*Rows index*/
	uint8 cols_count;			/*Columns index*/
	uint8 key_index;			/*Keys index increment by incrementing each key scanning*/

	/*Set the direction of rows pins as input*/
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID, PIN_INPUT);
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW1_PIN_ID, PIN_INPUT);
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW2_PIN_ID, PIN_INPUT);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW3_PIN_ID, PIN_INPUT);
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	63 e0       	ldi	r22, 0x03	; 3
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>

	/*Set the direction of columns pins as input*/
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_COL0_PIN_ID, PIN_INPUT);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	64 e0       	ldi	r22, 0x04	; 4
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_COL1_PIN_ID, PIN_INPUT);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	65 e0       	ldi	r22, 0x05	; 5
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_COL2_PIN_ID, PIN_INPUT);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	66 e0       	ldi	r22, 0x06	; 6
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
#if(KEYPAD_NO_OF_COLUMNS == 4)
	GPIO_setupPinDirection(KEYPAD_COLS_PORT_ID, KEYPAD_COL3_PIN_ID, PIN_INPUT);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	67 e0       	ldi	r22, 0x07	; 7
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>


	while(1)
	{
		/*Looping on each Row */
		for(rows_count = 0 , key_index = 1 ; rows_count < KEYPAD_NO_OF_ROWS ; rows_count++)
    1ffe:	1b 8e       	std	Y+27, r1	; 0x1b
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	89 8f       	std	Y+25, r24	; 0x19
    2004:	fc c0       	rjmp	.+504    	; 0x21fe <KEYPAD_getPressedKey+0x264>
		{
			/*Direction of Row to be scanned as output and all other rows input*/
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , PIN_OUTPUT);
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	6b 8d       	ldd	r22, Y+27	; 0x1b
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>

			/*Select this specific row
			 * LOGIC_LOW => KEYPAD Pull-up Resistance
			 * LOGIC_HIGH => KEYPAD Pull-down Resistance
			 */
			GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , KEYPAD_ROW_SELECT);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>

			/*Looping on each column in a specific Row*/
			for(cols_count = 0 ; cols_count < KEYPAD_NO_OF_COLUMNS ; cols_count++)
    201a:	1a 8e       	std	Y+26, r1	; 0x1a
    201c:	e4 c0       	rjmp	.+456    	; 0x21e6 <KEYPAD_getPressedKey+0x24c>
				/*
				 * KEYPAD button is pressed
				 * LOGIC_LOW => Pull-up Resistance
				 * LOGIC_HIGH => Pull-down Resistance
				 */
				if(GPIO_readPin(KEYPAD_COLS_PORT_ID, KEYPAD_COL0_PIN_ID + cols_count) == KEYPAD_BUTTON_PRESSED)
    201e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2020:	98 2f       	mov	r25, r24
    2022:	9c 5f       	subi	r25, 0xFC	; 252
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	69 2f       	mov	r22, r25
    2028:	0e 94 97 08 	call	0x112e	; 0x112e <GPIO_readPin>
    202c:	88 23       	and	r24, r24
    202e:	09 f0       	breq	.+2      	; 0x2032 <KEYPAD_getPressedKey+0x98>
    2030:	d4 c0       	rjmp	.+424    	; 0x21da <KEYPAD_getPressedKey+0x240>
				{

					if(GPIO_readPin(KEYPAD_COLS_PORT_ID, KEYPAD_COL0_PIN_ID + cols_count) == KEYPAD_BUTTON_PRESSED)
    2032:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2034:	98 2f       	mov	r25, r24
    2036:	9c 5f       	subi	r25, 0xFC	; 252
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	69 2f       	mov	r22, r25
    203c:	0e 94 97 08 	call	0x112e	; 0x112e <GPIO_readPin>
    2040:	88 23       	and	r24, r24
    2042:	09 f0       	breq	.+2      	; 0x2046 <KEYPAD_getPressedKey+0xac>
    2044:	ca c0       	rjmp	.+404    	; 0x21da <KEYPAD_getPressedKey+0x240>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a8 e4       	ldi	r26, 0x48	; 72
    204c:	b4 e4       	ldi	r27, 0x44	; 68
    204e:	8d 8b       	std	Y+21, r24	; 0x15
    2050:	9e 8b       	std	Y+22, r25	; 0x16
    2052:	af 8b       	std	Y+23, r26	; 0x17
    2054:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2056:	6d 89       	ldd	r22, Y+21	; 0x15
    2058:	7e 89       	ldd	r23, Y+22	; 0x16
    205a:	8f 89       	ldd	r24, Y+23	; 0x17
    205c:	98 8d       	ldd	r25, Y+24	; 0x18
    205e:	2b ea       	ldi	r18, 0xAB	; 171
    2060:	3a ea       	ldi	r19, 0xAA	; 170
    2062:	4a e2       	ldi	r20, 0x2A	; 42
    2064:	50 e4       	ldi	r21, 0x40	; 64
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	89 8b       	std	Y+17, r24	; 0x11
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	ab 8b       	std	Y+19, r26	; 0x13
    2074:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2076:	69 89       	ldd	r22, Y+17	; 0x11
    2078:	7a 89       	ldd	r23, Y+18	; 0x12
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	1c f4       	brge	.+6      	; 0x2094 <KEYPAD_getPressedKey+0xfa>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	88 8b       	std	Y+16, r24	; 0x10
    2092:	91 c0       	rjmp	.+290    	; 0x21b6 <KEYPAD_getPressedKey+0x21c>
	else if (__tmp > 255)
    2094:	69 89       	ldd	r22, Y+17	; 0x11
    2096:	7a 89       	ldd	r23, Y+18	; 0x12
    2098:	8b 89       	ldd	r24, Y+19	; 0x13
    209a:	9c 89       	ldd	r25, Y+20	; 0x14
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	53 e4       	ldi	r21, 0x43	; 67
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	0c f0       	brlt	.+2      	; 0x20ae <KEYPAD_getPressedKey+0x114>
    20ac:	7b c0       	rjmp	.+246    	; 0x21a4 <KEYPAD_getPressedKey+0x20a>
	{
		_delay_ms(__us / 1000.0);
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a e7       	ldi	r20, 0x7A	; 122
    20bc:	54 e4       	ldi	r21, 0x44	; 68
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8c 87       	std	Y+12, r24	; 0x0c
    20c8:	9d 87       	std	Y+13, r25	; 0x0d
    20ca:	ae 87       	std	Y+14, r26	; 0x0e
    20cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	88 87       	std	Y+8, r24	; 0x08
    20e8:	99 87       	std	Y+9, r25	; 0x09
    20ea:	aa 87       	std	Y+10, r26	; 0x0a
    20ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20ee:	68 85       	ldd	r22, Y+8	; 0x08
    20f0:	79 85       	ldd	r23, Y+9	; 0x09
    20f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <KEYPAD_getPressedKey+0x176>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	3f c0       	rjmp	.+126    	; 0x218e <KEYPAD_getPressedKey+0x1f4>
	else if (__tmp > 65535)
    2110:	68 85       	ldd	r22, Y+8	; 0x08
    2112:	79 85       	ldd	r23, Y+9	; 0x09
    2114:	8a 85       	ldd	r24, Y+10	; 0x0a
    2116:	9b 85       	ldd	r25, Y+11	; 0x0b
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <KEYPAD_getPressedKey+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6c 85       	ldd	r22, Y+12	; 0x0c
    212a:	7d 85       	ldd	r23, Y+13	; 0x0d
    212c:	8e 85       	ldd	r24, Y+14	; 0x0e
    212e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9f 83       	std	Y+7, r25	; 0x07
    214e:	8e 83       	std	Y+6, r24	; 0x06
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <KEYPAD_getPressedKey+0x1d6>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9d 83       	std	Y+5, r25	; 0x05
    2158:	8c 83       	std	Y+4, r24	; 0x04
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <KEYPAD_getPressedKey+0x1c4>
    2162:	9d 83       	std	Y+5, r25	; 0x05
    2164:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8e 81       	ldd	r24, Y+6	; 0x06
    2168:	9f 81       	ldd	r25, Y+7	; 0x07
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9f 83       	std	Y+7, r25	; 0x07
    216e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8e 81       	ldd	r24, Y+6	; 0x06
    2172:	9f 81       	ldd	r25, Y+7	; 0x07
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <KEYPAD_getPressedKey+0x1b8>
    2178:	24 c0       	rjmp	.+72     	; 0x21c2 <KEYPAD_getPressedKey+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	68 85       	ldd	r22, Y+8	; 0x08
    217c:	79 85       	ldd	r23, Y+9	; 0x09
    217e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2180:	9b 85       	ldd	r25, Y+11	; 0x0b
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9f 83       	std	Y+7, r25	; 0x07
    218c:	8e 83       	std	Y+6, r24	; 0x06
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	9b 83       	std	Y+3, r25	; 0x03
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	8a 81       	ldd	r24, Y+2	; 0x02
    2198:	9b 81       	ldd	r25, Y+3	; 0x03
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <KEYPAD_getPressedKey+0x200>
    219e:	9b 83       	std	Y+3, r25	; 0x03
    21a0:	8a 83       	std	Y+2, r24	; 0x02
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <KEYPAD_getPressedKey+0x228>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a4:	69 89       	ldd	r22, Y+17	; 0x11
    21a6:	7a 89       	ldd	r23, Y+18	; 0x12
    21a8:	8b 89       	ldd	r24, Y+19	; 0x13
    21aa:	9c 89       	ldd	r25, Y+20	; 0x14
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	88 8b       	std	Y+16, r24	; 0x10
    21b6:	88 89       	ldd	r24, Y+16	; 0x10
    21b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
    21bc:	8a 95       	dec	r24
    21be:	f1 f7       	brne	.-4      	; 0x21bc <KEYPAD_getPressedKey+0x222>
    21c0:	89 83       	std	Y+1, r24	; 0x01
						/*Return scanned Row as Input again*/
						/*GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , PIN_INPUT);*/

#ifndef KEYPAD_STANDARD_MODE
						/*Substitute the index of key with the equivalent number or letter on keypad*/
						return KEYPAD_adjustKeyNumber(key_index);
    21c2:	89 8d       	ldd	r24, Y+25	; 0x19
    21c4:	0e 94 04 11 	call	0x2208	; 0x2208 <KEYPAD_adjustKeyNumber>
			/*Return scanned Row as Input again*/
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , PIN_INPUT);

		}
	}
}
    21c8:	6b 96       	adiw	r28, 0x1b	; 27
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	08 95       	ret
						return ((rows_count*KEYPAD_NO_OF_COLUMNS)+cols_count+1);
#endif
					}
				}

				key_index++;
    21da:	89 8d       	ldd	r24, Y+25	; 0x19
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	89 8f       	std	Y+25, r24	; 0x19
			 * LOGIC_HIGH => KEYPAD Pull-down Resistance
			 */
			GPIO_writePin(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , KEYPAD_ROW_SELECT);

			/*Looping on each column in a specific Row*/
			for(cols_count = 0 ; cols_count < KEYPAD_NO_OF_COLUMNS ; cols_count++)
    21e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e2:	8f 5f       	subi	r24, 0xFF	; 255
    21e4:	8a 8f       	std	Y+26, r24	; 0x1a
    21e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e8:	84 30       	cpi	r24, 0x04	; 4
    21ea:	08 f4       	brcc	.+2      	; 0x21ee <KEYPAD_getPressedKey+0x254>
    21ec:	18 cf       	rjmp	.-464    	; 0x201e <KEYPAD_getPressedKey+0x84>

				key_index++;
			}

			/*Return scanned Row as Input again*/
			GPIO_setupPinDirection(KEYPAD_ROWS_PORT_ID, KEYPAD_ROW0_PIN_ID + rows_count , PIN_INPUT);
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>


	while(1)
	{
		/*Looping on each Row */
		for(rows_count = 0 , key_index = 1 ; rows_count < KEYPAD_NO_OF_ROWS ; rows_count++)
    21f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	8b 8f       	std	Y+27, r24	; 0x1b
    21fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	08 f4       	brcc	.+2      	; 0x2206 <KEYPAD_getPressedKey+0x26c>
    2204:	00 cf       	rjmp	.-512    	; 0x2006 <KEYPAD_getPressedKey+0x6c>
    2206:	fb ce       	rjmp	.-522    	; 0x1ffe <KEYPAD_getPressedKey+0x64>

00002208 <KEYPAD_adjustKeyNumber>:
 * Return-Type: uint8: value of key pressed
 * Functionality: Switch on all the possible values of key indexes and return the value of the
 * annotated keypad key.
 */
static uint8 KEYPAD_adjustKeyNumber(uint8 button_number)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	00 d0       	rcall	.+0      	; 0x220e <KEYPAD_adjustKeyNumber+0x6>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <KEYPAD_adjustKeyNumber+0x8>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	8a 83       	std	Y+2, r24	; 0x02
	uint8 key_value;

	switch(button_number)
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3c 83       	std	Y+4, r19	; 0x04
    221e:	2b 83       	std	Y+3, r18	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	88 30       	cpi	r24, 0x08	; 8
    2226:	91 05       	cpc	r25, r1
    2228:	09 f4       	brne	.+2      	; 0x222c <KEYPAD_adjustKeyNumber+0x24>
    222a:	70 c0       	rjmp	.+224    	; 0x230c <KEYPAD_adjustKeyNumber+0x104>
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	3c 81       	ldd	r19, Y+4	; 0x04
    2230:	29 30       	cpi	r18, 0x09	; 9
    2232:	31 05       	cpc	r19, r1
    2234:	5c f5       	brge	.+86     	; 0x228c <KEYPAD_adjustKeyNumber+0x84>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	84 30       	cpi	r24, 0x04	; 4
    223c:	91 05       	cpc	r25, r1
    223e:	09 f4       	brne	.+2      	; 0x2242 <KEYPAD_adjustKeyNumber+0x3a>
    2240:	59 c0       	rjmp	.+178    	; 0x22f4 <KEYPAD_adjustKeyNumber+0xec>
    2242:	2b 81       	ldd	r18, Y+3	; 0x03
    2244:	3c 81       	ldd	r19, Y+4	; 0x04
    2246:	25 30       	cpi	r18, 0x05	; 5
    2248:	31 05       	cpc	r19, r1
    224a:	9c f4       	brge	.+38     	; 0x2272 <KEYPAD_adjustKeyNumber+0x6a>
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	91 05       	cpc	r25, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <KEYPAD_adjustKeyNumber+0x50>
    2256:	48 c0       	rjmp	.+144    	; 0x22e8 <KEYPAD_adjustKeyNumber+0xe0>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	23 30       	cpi	r18, 0x03	; 3
    225e:	31 05       	cpc	r19, r1
    2260:	0c f0       	brlt	.+2      	; 0x2264 <KEYPAD_adjustKeyNumber+0x5c>
    2262:	45 c0       	rjmp	.+138    	; 0x22ee <KEYPAD_adjustKeyNumber+0xe6>
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	9c 81       	ldd	r25, Y+4	; 0x04
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	91 05       	cpc	r25, r1
    226c:	09 f4       	brne	.+2      	; 0x2270 <KEYPAD_adjustKeyNumber+0x68>
    226e:	39 c0       	rjmp	.+114    	; 0x22e2 <KEYPAD_adjustKeyNumber+0xda>
    2270:	66 c0       	rjmp	.+204    	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
    2272:	2b 81       	ldd	r18, Y+3	; 0x03
    2274:	3c 81       	ldd	r19, Y+4	; 0x04
    2276:	26 30       	cpi	r18, 0x06	; 6
    2278:	31 05       	cpc	r19, r1
    227a:	09 f4       	brne	.+2      	; 0x227e <KEYPAD_adjustKeyNumber+0x76>
    227c:	41 c0       	rjmp	.+130    	; 0x2300 <KEYPAD_adjustKeyNumber+0xf8>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	87 30       	cpi	r24, 0x07	; 7
    2284:	91 05       	cpc	r25, r1
    2286:	0c f0       	brlt	.+2      	; 0x228a <KEYPAD_adjustKeyNumber+0x82>
    2288:	3e c0       	rjmp	.+124    	; 0x2306 <KEYPAD_adjustKeyNumber+0xfe>
    228a:	37 c0       	rjmp	.+110    	; 0x22fa <KEYPAD_adjustKeyNumber+0xf2>
    228c:	2b 81       	ldd	r18, Y+3	; 0x03
    228e:	3c 81       	ldd	r19, Y+4	; 0x04
    2290:	2c 30       	cpi	r18, 0x0C	; 12
    2292:	31 05       	cpc	r19, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <KEYPAD_adjustKeyNumber+0x90>
    2296:	46 c0       	rjmp	.+140    	; 0x2324 <KEYPAD_adjustKeyNumber+0x11c>
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	9c 81       	ldd	r25, Y+4	; 0x04
    229c:	8d 30       	cpi	r24, 0x0D	; 13
    229e:	91 05       	cpc	r25, r1
    22a0:	5c f4       	brge	.+22     	; 0x22b8 <KEYPAD_adjustKeyNumber+0xb0>
    22a2:	2b 81       	ldd	r18, Y+3	; 0x03
    22a4:	3c 81       	ldd	r19, Y+4	; 0x04
    22a6:	2a 30       	cpi	r18, 0x0A	; 10
    22a8:	31 05       	cpc	r19, r1
    22aa:	b1 f1       	breq	.+108    	; 0x2318 <KEYPAD_adjustKeyNumber+0x110>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	9c 81       	ldd	r25, Y+4	; 0x04
    22b0:	8b 30       	cpi	r24, 0x0B	; 11
    22b2:	91 05       	cpc	r25, r1
    22b4:	a4 f5       	brge	.+104    	; 0x231e <KEYPAD_adjustKeyNumber+0x116>
    22b6:	2d c0       	rjmp	.+90     	; 0x2312 <KEYPAD_adjustKeyNumber+0x10a>
    22b8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ba:	3c 81       	ldd	r19, Y+4	; 0x04
    22bc:	2e 30       	cpi	r18, 0x0E	; 14
    22be:	31 05       	cpc	r19, r1
    22c0:	b9 f1       	breq	.+110    	; 0x2330 <KEYPAD_adjustKeyNumber+0x128>
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	8e 30       	cpi	r24, 0x0E	; 14
    22c8:	91 05       	cpc	r25, r1
    22ca:	7c f1       	brlt	.+94     	; 0x232a <KEYPAD_adjustKeyNumber+0x122>
    22cc:	2b 81       	ldd	r18, Y+3	; 0x03
    22ce:	3c 81       	ldd	r19, Y+4	; 0x04
    22d0:	2f 30       	cpi	r18, 0x0F	; 15
    22d2:	31 05       	cpc	r19, r1
    22d4:	79 f1       	breq	.+94     	; 0x2334 <KEYPAD_adjustKeyNumber+0x12c>
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	80 31       	cpi	r24, 0x10	; 16
    22dc:	91 05       	cpc	r25, r1
    22de:	69 f1       	breq	.+90     	; 0x233a <KEYPAD_adjustKeyNumber+0x132>
    22e0:	2e c0       	rjmp	.+92     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
	{
	case 1:
		key_value = 7;
    22e2:	87 e0       	ldi	r24, 0x07	; 7
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	2b c0       	rjmp	.+86     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 2:
		key_value = 8;
    22e8:	88 e0       	ldi	r24, 0x08	; 8
    22ea:	89 83       	std	Y+1, r24	; 0x01
    22ec:	28 c0       	rjmp	.+80     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 3:
		key_value = 9;
    22ee:	89 e0       	ldi	r24, 0x09	; 9
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	25 c0       	rjmp	.+74     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 4:
		key_value = '/';
    22f4:	8f e2       	ldi	r24, 0x2F	; 47
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	22 c0       	rjmp	.+68     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 5:
		key_value = 4;
    22fa:	84 e0       	ldi	r24, 0x04	; 4
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	1f c0       	rjmp	.+62     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 6:
		key_value = 5;
    2300:	85 e0       	ldi	r24, 0x05	; 5
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	1c c0       	rjmp	.+56     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 7:
		key_value = 6;
    2306:	86 e0       	ldi	r24, 0x06	; 6
    2308:	89 83       	std	Y+1, r24	; 0x01
    230a:	19 c0       	rjmp	.+50     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 8:
		key_value = 'x';
    230c:	88 e7       	ldi	r24, 0x78	; 120
    230e:	89 83       	std	Y+1, r24	; 0x01
    2310:	16 c0       	rjmp	.+44     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 9:
		key_value = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	13 c0       	rjmp	.+38     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 10:
		key_value = 2;
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	10 c0       	rjmp	.+32     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 11:
		key_value = 3;
    231e:	83 e0       	ldi	r24, 0x03	; 3
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	0d c0       	rjmp	.+26     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 12:
		key_value = '-';
    2324:	8d e2       	ldi	r24, 0x2D	; 45
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	0a c0       	rjmp	.+20     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

#if(KEYPAD_NO_OF_COLUMNS == 4)
	case 13:
		key_value = '#';
    232a:	83 e2       	ldi	r24, 0x23	; 35
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	07 c0       	rjmp	.+14     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 14:
		key_value = 0;
    2330:	19 82       	std	Y+1, r1	; 0x01
    2332:	05 c0       	rjmp	.+10     	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 15:
		key_value = '=';
    2334:	8d e3       	ldi	r24, 0x3D	; 61
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	02 c0       	rjmp	.+4      	; 0x233e <KEYPAD_adjustKeyNumber+0x136>
		break;

	case 16:
		key_value = '+';
    233a:	8b e2       	ldi	r24, 0x2B	; 43
    233c:	89 83       	std	Y+1, r24	; 0x01
		break;

#endif
	}

	return key_value;
    233e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <LCD_init>:
#include "Macros.h"
#include <stdlib.h>
#include <util/delay.h>

void LCD_init(void)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	2e 97       	sbiw	r28, 0x0e	; 14
    2358:	0f b6       	in	r0, 0x3f	; 63
    235a:	f8 94       	cli
    235c:	de bf       	out	0x3e, r29	; 62
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	cd bf       	out	0x3d, r28	; 61
	/*Set ENABLE Pin as output pin*/
	GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	63 e0       	ldi	r22, 0x03	; 3
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>

	/*Set RS Pin as output pin*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    236c:	83 e0       	ldi	r24, 0x03	; 3
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 4f 06 	call	0xc9e	; 0xc9e <GPIO_setupPinDirection>
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	a0 ea       	ldi	r26, 0xA0	; 160
    237c:	b1 e4       	ldi	r27, 0x41	; 65
    237e:	8b 87       	std	Y+11, r24	; 0x0b
    2380:	9c 87       	std	Y+12, r25	; 0x0c
    2382:	ad 87       	std	Y+13, r26	; 0x0d
    2384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	6b 85       	ldd	r22, Y+11	; 0x0b
    2388:	7c 85       	ldd	r23, Y+12	; 0x0c
    238a:	8d 85       	ldd	r24, Y+13	; 0x0d
    238c:	9e 85       	ldd	r25, Y+14	; 0x0e
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	8f 83       	std	Y+7, r24	; 0x07
    23a0:	98 87       	std	Y+8, r25	; 0x08
    23a2:	a9 87       	std	Y+9, r26	; 0x09
    23a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a6:	6f 81       	ldd	r22, Y+7	; 0x07
    23a8:	78 85       	ldd	r23, Y+8	; 0x08
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <LCD_init+0x7a>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <LCD_init+0xf8>
	else if (__tmp > 65535)
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e 83       	std	Y+6, r25	; 0x06
    2406:	8d 83       	std	Y+5, r24	; 0x05
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <LCD_init+0xda>
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_init+0xc8>
    241a:	9c 83       	std	Y+4, r25	; 0x04
    241c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8d 81       	ldd	r24, Y+5	; 0x05
    242a:	9e 81       	ldd	r25, Y+6	; 0x06
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <LCD_init+0xbc>
    2430:	14 c0       	rjmp	.+40     	; 0x245a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_init+0x104>
    2456:	9a 83       	std	Y+2, r25	; 0x02
    2458:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_MODE_BITS == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	6f ef       	ldi	r22, 0xFF	; 255
    245e:	0e 94 32 07 	call	0xe64	; 0xe64 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2462:	88 e3       	ldi	r24, 0x38	; 56
    2464:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF); /* cursor off */
    2468:	8c e0       	ldi	r24, 0x0C	; 12
    246a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* clear LCD at the beginning */
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_sendCommand>
}
    2474:	2e 96       	adiw	r28, 0x0e	; 14
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	f8 94       	cli
    247a:	de bf       	out	0x3e, r29	; 62
    247c:	0f be       	out	0x3f, r0	; 63
    247e:	cd bf       	out	0x3d, r28	; 61
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_sendCommand>:




void LCD_sendCommand(uint8 command)
{
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	cd 54       	subi	r28, 0x4D	; 77
    2494:	d0 40       	sbci	r29, 0x00	; 0
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	fe 01       	movw	r30, r28
    24a2:	e3 5b       	subi	r30, 0xB3	; 179
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 83       	st	Z, r24
	/*RS = LOGIC_LOW --> Transferring Instruction*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID, LOGIC_LOW);
    24a8:	83 e0       	ldi	r24, 0x03	; 3
    24aa:	62 e0       	ldi	r22, 0x02	; 2
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    24b2:	fe 01       	movw	r30, r28
    24b4:	e7 5b       	subi	r30, 0xB7	; 183
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a0 e8       	ldi	r26, 0x80	; 128
    24be:	bf e3       	ldi	r27, 0x3F	; 63
    24c0:	80 83       	st	Z, r24
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	a2 83       	std	Z+2, r26	; 0x02
    24c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24c8:	8e 01       	movw	r16, r28
    24ca:	0b 5b       	subi	r16, 0xBB	; 187
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	e7 5b       	subi	r30, 0xB7	; 183
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	2b ea       	ldi	r18, 0xAB	; 171
    24de:	3a ea       	ldi	r19, 0xAA	; 170
    24e0:	4a e2       	ldi	r20, 0x2A	; 42
    24e2:	50 e4       	ldi	r21, 0x40	; 64
    24e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	f8 01       	movw	r30, r16
    24ee:	80 83       	st	Z, r24
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	a2 83       	std	Z+2, r26	; 0x02
    24f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 5b       	subi	r30, 0xBB	; 187
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	60 81       	ld	r22, Z
    24fe:	71 81       	ldd	r23, Z+1	; 0x01
    2500:	82 81       	ldd	r24, Z+2	; 0x02
    2502:	93 81       	ldd	r25, Z+3	; 0x03
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	5f e3       	ldi	r21, 0x3F	; 63
    250c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2510:	88 23       	and	r24, r24
    2512:	34 f4       	brge	.+12     	; 0x2520 <LCD_sendCommand+0x9a>
		__ticks = 1;
    2514:	fe 01       	movw	r30, r28
    2516:	ec 5b       	subi	r30, 0xBC	; 188
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	80 83       	st	Z, r24
    251e:	a7 c0       	rjmp	.+334    	; 0x266e <LCD_sendCommand+0x1e8>
	else if (__tmp > 255)
    2520:	fe 01       	movw	r30, r28
    2522:	eb 5b       	subi	r30, 0xBB	; 187
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4f e7       	ldi	r20, 0x7F	; 127
    2534:	53 e4       	ldi	r21, 0x43	; 67
    2536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253a:	18 16       	cp	r1, r24
    253c:	0c f0       	brlt	.+2      	; 0x2540 <LCD_sendCommand+0xba>
    253e:	87 c0       	rjmp	.+270    	; 0x264e <LCD_sendCommand+0x1c8>
	{
		_delay_ms(__us / 1000.0);
    2540:	fe 01       	movw	r30, r28
    2542:	e7 5b       	subi	r30, 0xB7	; 183
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	54 e4       	ldi	r21, 0x44	; 68
    2556:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	fe 01       	movw	r30, r28
    2560:	e0 5c       	subi	r30, 0xC0	; 192
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 83       	st	Z, r24
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	a2 83       	std	Z+2, r26	; 0x02
    256a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	fe 01       	movw	r30, r28
    256e:	e0 5c       	subi	r30, 0xC0	; 192
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	4a ef       	ldi	r20, 0xFA	; 250
    2580:	54 e4       	ldi	r21, 0x44	; 68
    2582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	8c af       	std	Y+60, r24	; 0x3c
    258c:	9d af       	std	Y+61, r25	; 0x3d
    258e:	ae af       	std	Y+62, r26	; 0x3e
    2590:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    2592:	6c ad       	ldd	r22, Y+60	; 0x3c
    2594:	7d ad       	ldd	r23, Y+61	; 0x3d
    2596:	8e ad       	ldd	r24, Y+62	; 0x3e
    2598:	9f ad       	ldd	r25, Y+63	; 0x3f
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e8       	ldi	r20, 0x80	; 128
    25a0:	5f e3       	ldi	r21, 0x3F	; 63
    25a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a6:	88 23       	and	r24, r24
    25a8:	2c f4       	brge	.+10     	; 0x25b4 <LCD_sendCommand+0x12e>
		__ticks = 1;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9b af       	std	Y+59, r25	; 0x3b
    25b0:	8a af       	std	Y+58, r24	; 0x3a
    25b2:	42 c0       	rjmp	.+132    	; 0x2638 <LCD_sendCommand+0x1b2>
	else if (__tmp > 65535)
    25b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    25b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    25b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    25ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	3f ef       	ldi	r19, 0xFF	; 255
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	57 e4       	ldi	r21, 0x47	; 71
    25c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	64 f5       	brge	.+88     	; 0x2624 <LCD_sendCommand+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25cc:	fe 01       	movw	r30, r28
    25ce:	e0 5c       	subi	r30, 0xC0	; 192
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9b af       	std	Y+59, r25	; 0x3b
    25f8:	8a af       	std	Y+58, r24	; 0x3a
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <LCD_sendCommand+0x194>
    25fc:	88 ec       	ldi	r24, 0xC8	; 200
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	99 af       	std	Y+57, r25	; 0x39
    2602:	88 af       	std	Y+56, r24	; 0x38
    2604:	88 ad       	ldd	r24, Y+56	; 0x38
    2606:	99 ad       	ldd	r25, Y+57	; 0x39
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <LCD_sendCommand+0x182>
    260c:	99 af       	std	Y+57, r25	; 0x39
    260e:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8a ad       	ldd	r24, Y+58	; 0x3a
    2612:	9b ad       	ldd	r25, Y+59	; 0x3b
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9b af       	std	Y+59, r25	; 0x3b
    2618:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8a ad       	ldd	r24, Y+58	; 0x3a
    261c:	9b ad       	ldd	r25, Y+59	; 0x3b
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <LCD_sendCommand+0x176>
    2622:	2e c0       	rjmp	.+92     	; 0x2680 <LCD_sendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	6c ad       	ldd	r22, Y+60	; 0x3c
    2626:	7d ad       	ldd	r23, Y+61	; 0x3d
    2628:	8e ad       	ldd	r24, Y+62	; 0x3e
    262a:	9f ad       	ldd	r25, Y+63	; 0x3f
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9b af       	std	Y+59, r25	; 0x3b
    2636:	8a af       	std	Y+58, r24	; 0x3a
    2638:	8a ad       	ldd	r24, Y+58	; 0x3a
    263a:	9b ad       	ldd	r25, Y+59	; 0x3b
    263c:	9f ab       	std	Y+55, r25	; 0x37
    263e:	8e ab       	std	Y+54, r24	; 0x36
    2640:	8e a9       	ldd	r24, Y+54	; 0x36
    2642:	9f a9       	ldd	r25, Y+55	; 0x37
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <LCD_sendCommand+0x1be>
    2648:	9f ab       	std	Y+55, r25	; 0x37
    264a:	8e ab       	std	Y+54, r24	; 0x36
    264c:	19 c0       	rjmp	.+50     	; 0x2680 <LCD_sendCommand+0x1fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    264e:	8e 01       	movw	r16, r28
    2650:	0c 5b       	subi	r16, 0xBC	; 188
    2652:	1f 4f       	sbci	r17, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	eb 5b       	subi	r30, 0xBB	; 187
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	80 83       	st	Z, r24
    266e:	fe 01       	movw	r30, r28
    2670:	ec 5b       	subi	r30, 0xBC	; 188
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2678:	8d a9       	ldd	r24, Y+53	; 0x35
    267a:	8a 95       	dec	r24
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_sendCommand+0x1f4>
    267e:	8d ab       	std	Y+53, r24	; 0x35

	_delay_us(1);		/*delay for LCD Hardware*/

	/*ENABLE = LOGIC_HIGH --> DATA ENABLE*/
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2680:	83 e0       	ldi	r24, 0x03	; 3
    2682:	63 e0       	ldi	r22, 0x03	; 3
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e8       	ldi	r26, 0x80	; 128
    2690:	bf e3       	ldi	r27, 0x3F	; 63
    2692:	89 ab       	std	Y+49, r24	; 0x31
    2694:	9a ab       	std	Y+50, r25	; 0x32
    2696:	ab ab       	std	Y+51, r26	; 0x33
    2698:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    269a:	69 a9       	ldd	r22, Y+49	; 0x31
    269c:	7a a9       	ldd	r23, Y+50	; 0x32
    269e:	8b a9       	ldd	r24, Y+51	; 0x33
    26a0:	9c a9       	ldd	r25, Y+52	; 0x34
    26a2:	2b ea       	ldi	r18, 0xAB	; 171
    26a4:	3a ea       	ldi	r19, 0xAA	; 170
    26a6:	4a e2       	ldi	r20, 0x2A	; 42
    26a8:	50 e4       	ldi	r21, 0x40	; 64
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8d a7       	std	Y+45, r24	; 0x2d
    26b4:	9e a7       	std	Y+46, r25	; 0x2e
    26b6:	af a7       	std	Y+47, r26	; 0x2f
    26b8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    26ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    26bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    26be:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c0:	98 a9       	ldd	r25, Y+48	; 0x30
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	1c f4       	brge	.+6      	; 0x26d8 <LCD_sendCommand+0x252>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	8c a7       	std	Y+44, r24	; 0x2c
    26d6:	91 c0       	rjmp	.+290    	; 0x27fa <LCD_sendCommand+0x374>
	else if (__tmp > 255)
    26d8:	6d a5       	ldd	r22, Y+45	; 0x2d
    26da:	7e a5       	ldd	r23, Y+46	; 0x2e
    26dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26de:	98 a9       	ldd	r25, Y+48	; 0x30
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	53 e4       	ldi	r21, 0x43	; 67
    26e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	0c f0       	brlt	.+2      	; 0x26f2 <LCD_sendCommand+0x26c>
    26f0:	7b c0       	rjmp	.+246    	; 0x27e8 <LCD_sendCommand+0x362>
	{
		_delay_ms(__us / 1000.0);
    26f2:	69 a9       	ldd	r22, Y+49	; 0x31
    26f4:	7a a9       	ldd	r23, Y+50	; 0x32
    26f6:	8b a9       	ldd	r24, Y+51	; 0x33
    26f8:	9c a9       	ldd	r25, Y+52	; 0x34
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	54 e4       	ldi	r21, 0x44	; 68
    2702:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	88 a7       	std	Y+40, r24	; 0x28
    270c:	99 a7       	std	Y+41, r25	; 0x29
    270e:	aa a7       	std	Y+42, r26	; 0x2a
    2710:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	68 a5       	ldd	r22, Y+40	; 0x28
    2714:	79 a5       	ldd	r23, Y+41	; 0x29
    2716:	8a a5       	ldd	r24, Y+42	; 0x2a
    2718:	9b a5       	ldd	r25, Y+43	; 0x2b
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a ef       	ldi	r20, 0xFA	; 250
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8c a3       	std	Y+36, r24	; 0x24
    272c:	9d a3       	std	Y+37, r25	; 0x25
    272e:	ae a3       	std	Y+38, r26	; 0x26
    2730:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    2732:	6c a1       	ldd	r22, Y+36	; 0x24
    2734:	7d a1       	ldd	r23, Y+37	; 0x25
    2736:	8e a1       	ldd	r24, Y+38	; 0x26
    2738:	9f a1       	ldd	r25, Y+39	; 0x27
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <LCD_sendCommand+0x2ce>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9b a3       	std	Y+35, r25	; 0x23
    2750:	8a a3       	std	Y+34, r24	; 0x22
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <LCD_sendCommand+0x34c>
	else if (__tmp > 65535)
    2754:	6c a1       	ldd	r22, Y+36	; 0x24
    2756:	7d a1       	ldd	r23, Y+37	; 0x25
    2758:	8e a1       	ldd	r24, Y+38	; 0x26
    275a:	9f a1       	ldd	r25, Y+39	; 0x27
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <LCD_sendCommand+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	68 a5       	ldd	r22, Y+40	; 0x28
    276e:	79 a5       	ldd	r23, Y+41	; 0x29
    2770:	8a a5       	ldd	r24, Y+42	; 0x2a
    2772:	9b a5       	ldd	r25, Y+43	; 0x2b
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9b a3       	std	Y+35, r25	; 0x23
    2792:	8a a3       	std	Y+34, r24	; 0x22
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <LCD_sendCommand+0x32e>
    2796:	88 ec       	ldi	r24, 0xC8	; 200
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	99 a3       	std	Y+33, r25	; 0x21
    279c:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    279e:	88 a1       	ldd	r24, Y+32	; 0x20
    27a0:	99 a1       	ldd	r25, Y+33	; 0x21
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_sendCommand+0x31c>
    27a6:	99 a3       	std	Y+33, r25	; 0x21
    27a8:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	8a a1       	ldd	r24, Y+34	; 0x22
    27ac:	9b a1       	ldd	r25, Y+35	; 0x23
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9b a3       	std	Y+35, r25	; 0x23
    27b2:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	8a a1       	ldd	r24, Y+34	; 0x22
    27b6:	9b a1       	ldd	r25, Y+35	; 0x23
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <LCD_sendCommand+0x310>
    27bc:	24 c0       	rjmp	.+72     	; 0x2806 <LCD_sendCommand+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	6c a1       	ldd	r22, Y+36	; 0x24
    27c0:	7d a1       	ldd	r23, Y+37	; 0x25
    27c2:	8e a1       	ldd	r24, Y+38	; 0x26
    27c4:	9f a1       	ldd	r25, Y+39	; 0x27
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9b a3       	std	Y+35, r25	; 0x23
    27d0:	8a a3       	std	Y+34, r24	; 0x22
    27d2:	8a a1       	ldd	r24, Y+34	; 0x22
    27d4:	9b a1       	ldd	r25, Y+35	; 0x23
    27d6:	9f 8f       	std	Y+31, r25	; 0x1f
    27d8:	8e 8f       	std	Y+30, r24	; 0x1e
    27da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_sendCommand+0x358>
    27e2:	9f 8f       	std	Y+31, r25	; 0x1f
    27e4:	8e 8f       	std	Y+30, r24	; 0x1e
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_sendCommand+0x380>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    27ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	8c a7       	std	Y+44, r24	; 0x2c
    27fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    27fc:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2800:	8a 95       	dec	r24
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_sendCommand+0x37a>
    2804:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(command, PIN2_ID));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(command, PIN3_ID));

#elif(LCD_MODE_BITS == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, command);
    2806:	fe 01       	movw	r30, r28
    2808:	e3 5b       	subi	r30, 0xB3	; 179
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	60 81       	ld	r22, Z
    2810:	0e 94 56 08 	call	0x10ac	; 0x10ac <GPIO_writePort>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	89 8f       	std	Y+25, r24	; 0x19
    281e:	9a 8f       	std	Y+26, r25	; 0x1a
    2820:	ab 8f       	std	Y+27, r26	; 0x1b
    2822:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 8b       	std	Y+21, r24	; 0x15
    283e:	9e 8b       	std	Y+22, r25	; 0x16
    2840:	af 8b       	std	Y+23, r26	; 0x17
    2842:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <LCD_sendCommand+0x3e0>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <LCD_sendCommand+0x45e>
	else if (__tmp > 65535)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <LCD_sendCommand+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LCD_sendCommand+0x440>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9a 8b       	std	Y+18, r25	; 0x12
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	9a 89       	ldd	r25, Y+18	; 0x12
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_sendCommand+0x42e>
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <LCD_sendCommand+0x422>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <LCD_sendCommand+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	98 8b       	std	Y+16, r25	; 0x10
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ee:	98 89       	ldd	r25, Y+16	; 0x10
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_sendCommand+0x46a>
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f


	_delay_ms(1);			/*Hold Time Delay*/

	/*Enable = LOGIC_LOW --> DATA DISABLE*/
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    28f8:	83 e0       	ldi	r24, 0x03	; 3
    28fa:	63 e0       	ldi	r22, 0x03	; 3
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a0 e8       	ldi	r26, 0x80	; 128
    2908:	bf e3       	ldi	r27, 0x3F	; 63
    290a:	8b 87       	std	Y+11, r24	; 0x0b
    290c:	9c 87       	std	Y+12, r25	; 0x0c
    290e:	ad 87       	std	Y+13, r26	; 0x0d
    2910:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6b 85       	ldd	r22, Y+11	; 0x0b
    2914:	7c 85       	ldd	r23, Y+12	; 0x0c
    2916:	8d 85       	ldd	r24, Y+13	; 0x0d
    2918:	9e 85       	ldd	r25, Y+14	; 0x0e
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a ef       	ldi	r20, 0xFA	; 250
    2920:	54 e4       	ldi	r21, 0x44	; 68
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8f 83       	std	Y+7, r24	; 0x07
    292c:	98 87       	std	Y+8, r25	; 0x08
    292e:	a9 87       	std	Y+9, r26	; 0x09
    2930:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_sendCommand+0x4ce>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9e 83       	std	Y+6, r25	; 0x06
    2950:	8d 83       	std	Y+5, r24	; 0x05
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <LCD_sendCommand+0x54c>
	else if (__tmp > 65535)
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <LCD_sendCommand+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6b 85       	ldd	r22, Y+11	; 0x0b
    296e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2970:	8d 85       	ldd	r24, Y+13	; 0x0d
    2972:	9e 85       	ldd	r25, Y+14	; 0x0e
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9e 83       	std	Y+6, r25	; 0x06
    2992:	8d 83       	std	Y+5, r24	; 0x05
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <LCD_sendCommand+0x52e>
    2996:	88 ec       	ldi	r24, 0xC8	; 200
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	8b 81       	ldd	r24, Y+3	; 0x03
    29a0:	9c 81       	ldd	r25, Y+4	; 0x04
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <LCD_sendCommand+0x51c>
    29a6:	9c 83       	std	Y+4, r25	; 0x04
    29a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	9e 81       	ldd	r25, Y+6	; 0x06
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <LCD_sendCommand+0x510>
    29bc:	14 c0       	rjmp	.+40     	; 0x29e6 <LCD_sendCommand+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9e 83       	std	Y+6, r25	; 0x06
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	9e 81       	ldd	r25, Y+6	; 0x06
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <LCD_sendCommand+0x558>
    29e2:	9a 83       	std	Y+2, r25	; 0x02
    29e4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);

}
    29e6:	c3 5b       	subi	r28, 0xB3	; 179
    29e8:	df 4f       	sbci	r29, 0xFF	; 255
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	1f 91       	pop	r17
    29fa:	0f 91       	pop	r16
    29fc:	08 95       	ret

000029fe <LCD_displayCharacter>:




void LCD_displayCharacter(uint8 data)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	ef 97       	sbiw	r28, 0x3f	; 63
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	8f af       	std	Y+63, r24	; 0x3f
	/*RS = LOGIC_LOW --> Transferring Character*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID, LOGIC_HIGH);
    2a14:	83 e0       	ldi	r24, 0x03	; 3
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	41 e0       	ldi	r20, 0x01	; 1
    2a1a:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	a0 e8       	ldi	r26, 0x80	; 128
    2a24:	bf e3       	ldi	r27, 0x3F	; 63
    2a26:	8b af       	std	Y+59, r24	; 0x3b
    2a28:	9c af       	std	Y+60, r25	; 0x3c
    2a2a:	ad af       	std	Y+61, r26	; 0x3d
    2a2c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a2e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a30:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a36:	2b ea       	ldi	r18, 0xAB	; 171
    2a38:	3a ea       	ldi	r19, 0xAA	; 170
    2a3a:	4a e2       	ldi	r20, 0x2A	; 42
    2a3c:	50 e4       	ldi	r21, 0x40	; 64
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	8f ab       	std	Y+55, r24	; 0x37
    2a48:	98 af       	std	Y+56, r25	; 0x38
    2a4a:	a9 af       	std	Y+57, r26	; 0x39
    2a4c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a4e:	6f a9       	ldd	r22, Y+55	; 0x37
    2a50:	78 ad       	ldd	r23, Y+56	; 0x38
    2a52:	89 ad       	ldd	r24, Y+57	; 0x39
    2a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a62:	88 23       	and	r24, r24
    2a64:	1c f4       	brge	.+6      	; 0x2a6c <LCD_displayCharacter+0x6e>
		__ticks = 1;
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	8e ab       	std	Y+54, r24	; 0x36
    2a6a:	91 c0       	rjmp	.+290    	; 0x2b8e <LCD_displayCharacter+0x190>
	else if (__tmp > 255)
    2a6c:	6f a9       	ldd	r22, Y+55	; 0x37
    2a6e:	78 ad       	ldd	r23, Y+56	; 0x38
    2a70:	89 ad       	ldd	r24, Y+57	; 0x39
    2a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4f e7       	ldi	r20, 0x7F	; 127
    2a7a:	53 e4       	ldi	r21, 0x43	; 67
    2a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a80:	18 16       	cp	r1, r24
    2a82:	0c f0       	brlt	.+2      	; 0x2a86 <LCD_displayCharacter+0x88>
    2a84:	7b c0       	rjmp	.+246    	; 0x2b7c <LCD_displayCharacter+0x17e>
	{
		_delay_ms(__us / 1000.0);
    2a86:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a88:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	4a e7       	ldi	r20, 0x7A	; 122
    2a94:	54 e4       	ldi	r21, 0x44	; 68
    2a96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8a ab       	std	Y+50, r24	; 0x32
    2aa0:	9b ab       	std	Y+51, r25	; 0x33
    2aa2:	ac ab       	std	Y+52, r26	; 0x34
    2aa4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa6:	6a a9       	ldd	r22, Y+50	; 0x32
    2aa8:	7b a9       	ldd	r23, Y+51	; 0x33
    2aaa:	8c a9       	ldd	r24, Y+52	; 0x34
    2aac:	9d a9       	ldd	r25, Y+53	; 0x35
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	4a ef       	ldi	r20, 0xFA	; 250
    2ab4:	54 e4       	ldi	r21, 0x44	; 68
    2ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	8e a7       	std	Y+46, r24	; 0x2e
    2ac0:	9f a7       	std	Y+47, r25	; 0x2f
    2ac2:	a8 ab       	std	Y+48, r26	; 0x30
    2ac4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2ac6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ac8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2aca:	88 a9       	ldd	r24, Y+48	; 0x30
    2acc:	99 a9       	ldd	r25, Y+49	; 0x31
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e8       	ldi	r20, 0x80	; 128
    2ad4:	5f e3       	ldi	r21, 0x3F	; 63
    2ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ada:	88 23       	and	r24, r24
    2adc:	2c f4       	brge	.+10     	; 0x2ae8 <LCD_displayCharacter+0xea>
		__ticks = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9d a7       	std	Y+45, r25	; 0x2d
    2ae4:	8c a7       	std	Y+44, r24	; 0x2c
    2ae6:	3f c0       	rjmp	.+126    	; 0x2b66 <LCD_displayCharacter+0x168>
	else if (__tmp > 65535)
    2ae8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2aea:	7f a5       	ldd	r23, Y+47	; 0x2f
    2aec:	88 a9       	ldd	r24, Y+48	; 0x30
    2aee:	99 a9       	ldd	r25, Y+49	; 0x31
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	3f ef       	ldi	r19, 0xFF	; 255
    2af4:	4f e7       	ldi	r20, 0x7F	; 127
    2af6:	57 e4       	ldi	r21, 0x47	; 71
    2af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afc:	18 16       	cp	r1, r24
    2afe:	4c f5       	brge	.+82     	; 0x2b52 <LCD_displayCharacter+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b00:	6a a9       	ldd	r22, Y+50	; 0x32
    2b02:	7b a9       	ldd	r23, Y+51	; 0x33
    2b04:	8c a9       	ldd	r24, Y+52	; 0x34
    2b06:	9d a9       	ldd	r25, Y+53	; 0x35
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e2       	ldi	r20, 0x20	; 32
    2b0e:	51 e4       	ldi	r21, 0x41	; 65
    2b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9d a7       	std	Y+45, r25	; 0x2d
    2b26:	8c a7       	std	Y+44, r24	; 0x2c
    2b28:	0f c0       	rjmp	.+30     	; 0x2b48 <LCD_displayCharacter+0x14a>
    2b2a:	88 ec       	ldi	r24, 0xC8	; 200
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9b a7       	std	Y+43, r25	; 0x2b
    2b30:	8a a7       	std	Y+42, r24	; 0x2a
    2b32:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b34:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b36:	01 97       	sbiw	r24, 0x01	; 1
    2b38:	f1 f7       	brne	.-4      	; 0x2b36 <LCD_displayCharacter+0x138>
    2b3a:	9b a7       	std	Y+43, r25	; 0x2b
    2b3c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b40:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9d a7       	std	Y+45, r25	; 0x2d
    2b46:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b48:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b4a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <LCD_displayCharacter+0x12c>
    2b50:	24 c0       	rjmp	.+72     	; 0x2b9a <LCD_displayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b52:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b54:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b56:	88 a9       	ldd	r24, Y+48	; 0x30
    2b58:	99 a9       	ldd	r25, Y+49	; 0x31
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9d a7       	std	Y+45, r25	; 0x2d
    2b64:	8c a7       	std	Y+44, r24	; 0x2c
    2b66:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b68:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b6a:	99 a7       	std	Y+41, r25	; 0x29
    2b6c:	88 a7       	std	Y+40, r24	; 0x28
    2b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    2b70:	99 a5       	ldd	r25, Y+41	; 0x29
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0x174>
    2b76:	99 a7       	std	Y+41, r25	; 0x29
    2b78:	88 a7       	std	Y+40, r24	; 0x28
    2b7a:	0f c0       	rjmp	.+30     	; 0x2b9a <LCD_displayCharacter+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b7c:	6f a9       	ldd	r22, Y+55	; 0x37
    2b7e:	78 ad       	ldd	r23, Y+56	; 0x38
    2b80:	89 ad       	ldd	r24, Y+57	; 0x39
    2b82:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	8e ab       	std	Y+54, r24	; 0x36
    2b8e:	8e a9       	ldd	r24, Y+54	; 0x36
    2b90:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b92:	8f a1       	ldd	r24, Y+39	; 0x27
    2b94:	8a 95       	dec	r24
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <LCD_displayCharacter+0x196>
    2b98:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(1);		/*delay for LCD Hardware*/

	/*ENABLE = LOGIC_HIGH --> DATA ENABLE*/
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2b9a:	83 e0       	ldi	r24, 0x03	; 3
    2b9c:	63 e0       	ldi	r22, 0x03	; 3
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e8       	ldi	r26, 0x80	; 128
    2baa:	bf e3       	ldi	r27, 0x3F	; 63
    2bac:	8b a3       	std	Y+35, r24	; 0x23
    2bae:	9c a3       	std	Y+36, r25	; 0x24
    2bb0:	ad a3       	std	Y+37, r26	; 0x25
    2bb2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bb4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bb6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bba:	9e a1       	ldd	r25, Y+38	; 0x26
    2bbc:	2b ea       	ldi	r18, 0xAB	; 171
    2bbe:	3a ea       	ldi	r19, 0xAA	; 170
    2bc0:	4a e2       	ldi	r20, 0x2A	; 42
    2bc2:	50 e4       	ldi	r21, 0x40	; 64
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2bce:	98 a3       	std	Y+32, r25	; 0x20
    2bd0:	a9 a3       	std	Y+33, r26	; 0x21
    2bd2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2bd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bd6:	78 a1       	ldd	r23, Y+32	; 0x20
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	1c f4       	brge	.+6      	; 0x2bf2 <LCD_displayCharacter+0x1f4>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	8e 8f       	std	Y+30, r24	; 0x1e
    2bf0:	91 c0       	rjmp	.+290    	; 0x2d14 <LCD_displayCharacter+0x316>
	else if (__tmp > 255)
    2bf2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bf4:	78 a1       	ldd	r23, Y+32	; 0x20
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	53 e4       	ldi	r21, 0x43	; 67
    2c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	0c f0       	brlt	.+2      	; 0x2c0c <LCD_displayCharacter+0x20e>
    2c0a:	7b c0       	rjmp	.+246    	; 0x2d02 <LCD_displayCharacter+0x304>
	{
		_delay_ms(__us / 1000.0);
    2c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c10:	8d a1       	ldd	r24, Y+37	; 0x25
    2c12:	9e a1       	ldd	r25, Y+38	; 0x26
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	4a e7       	ldi	r20, 0x7A	; 122
    2c1a:	54 e4       	ldi	r21, 0x44	; 68
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	8a 8f       	std	Y+26, r24	; 0x1a
    2c26:	9b 8f       	std	Y+27, r25	; 0x1b
    2c28:	ac 8f       	std	Y+28, r26	; 0x1c
    2c2a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c2e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	4a ef       	ldi	r20, 0xFA	; 250
    2c3a:	54 e4       	ldi	r21, 0x44	; 68
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	8e 8b       	std	Y+22, r24	; 0x16
    2c46:	9f 8b       	std	Y+23, r25	; 0x17
    2c48:	a8 8f       	std	Y+24, r26	; 0x18
    2c4a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c4c:	6e 89       	ldd	r22, Y+22	; 0x16
    2c4e:	7f 89       	ldd	r23, Y+23	; 0x17
    2c50:	88 8d       	ldd	r24, Y+24	; 0x18
    2c52:	99 8d       	ldd	r25, Y+25	; 0x19
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	2c f4       	brge	.+10     	; 0x2c6e <LCD_displayCharacter+0x270>
		__ticks = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9d 8b       	std	Y+21, r25	; 0x15
    2c6a:	8c 8b       	std	Y+20, r24	; 0x14
    2c6c:	3f c0       	rjmp	.+126    	; 0x2cec <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
    2c6e:	6e 89       	ldd	r22, Y+22	; 0x16
    2c70:	7f 89       	ldd	r23, Y+23	; 0x17
    2c72:	88 8d       	ldd	r24, Y+24	; 0x18
    2c74:	99 8d       	ldd	r25, Y+25	; 0x19
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	3f ef       	ldi	r19, 0xFF	; 255
    2c7a:	4f e7       	ldi	r20, 0x7F	; 127
    2c7c:	57 e4       	ldi	r21, 0x47	; 71
    2c7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	4c f5       	brge	.+82     	; 0x2cd8 <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c86:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c88:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c8a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c8c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e2       	ldi	r20, 0x20	; 32
    2c94:	51 e4       	ldi	r21, 0x41	; 65
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9d 8b       	std	Y+21, r25	; 0x15
    2cac:	8c 8b       	std	Y+20, r24	; 0x14
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <LCD_displayCharacter+0x2d0>
    2cb0:	88 ec       	ldi	r24, 0xC8	; 200
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9b 8b       	std	Y+19, r25	; 0x13
    2cb6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cb8:	8a 89       	ldd	r24, Y+18	; 0x12
    2cba:	9b 89       	ldd	r25, Y+19	; 0x13
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <LCD_displayCharacter+0x2be>
    2cc0:	9b 8b       	std	Y+19, r25	; 0x13
    2cc2:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc4:	8c 89       	ldd	r24, Y+20	; 0x14
    2cc6:	9d 89       	ldd	r25, Y+21	; 0x15
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	9d 8b       	std	Y+21, r25	; 0x15
    2ccc:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cce:	8c 89       	ldd	r24, Y+20	; 0x14
    2cd0:	9d 89       	ldd	r25, Y+21	; 0x15
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	69 f7       	brne	.-38     	; 0x2cb0 <LCD_displayCharacter+0x2b2>
    2cd6:	24 c0       	rjmp	.+72     	; 0x2d20 <LCD_displayCharacter+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	6e 89       	ldd	r22, Y+22	; 0x16
    2cda:	7f 89       	ldd	r23, Y+23	; 0x17
    2cdc:	88 8d       	ldd	r24, Y+24	; 0x18
    2cde:	99 8d       	ldd	r25, Y+25	; 0x19
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9d 8b       	std	Y+21, r25	; 0x15
    2cea:	8c 8b       	std	Y+20, r24	; 0x14
    2cec:	8c 89       	ldd	r24, Y+20	; 0x14
    2cee:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf0:	99 8b       	std	Y+17, r25	; 0x11
    2cf2:	88 8b       	std	Y+16, r24	; 0x10
    2cf4:	88 89       	ldd	r24, Y+16	; 0x10
    2cf6:	99 89       	ldd	r25, Y+17	; 0x11
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_displayCharacter+0x2fa>
    2cfc:	99 8b       	std	Y+17, r25	; 0x11
    2cfe:	88 8b       	std	Y+16, r24	; 0x10
    2d00:	0f c0       	rjmp	.+30     	; 0x2d20 <LCD_displayCharacter+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d02:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d04:	78 a1       	ldd	r23, Y+32	; 0x20
    2d06:	89 a1       	ldd	r24, Y+33	; 0x21
    2d08:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8e 8f       	std	Y+30, r24	; 0x1e
    2d14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d16:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d1a:	8a 95       	dec	r24
    2d1c:	f1 f7       	brne	.-4      	; 0x2d1a <LCD_displayCharacter+0x31c>
    2d1e:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, GET_BIT(data, PIN2_ID));
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, GET_BIT(data, PIN3_ID));

#elif(LCD_MODE_BITS == 8)

	GPIO_writePort(LCD_DATA_PORT_ID, data);
    2d20:	82 e0       	ldi	r24, 0x02	; 2
    2d22:	6f ad       	ldd	r22, Y+63	; 0x3f
    2d24:	0e 94 56 08 	call	0x10ac	; 0x10ac <GPIO_writePort>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a0 e8       	ldi	r26, 0x80	; 128
    2d2e:	bf e3       	ldi	r27, 0x3F	; 63
    2d30:	8b 87       	std	Y+11, r24	; 0x0b
    2d32:	9c 87       	std	Y+12, r25	; 0x0c
    2d34:	ad 87       	std	Y+13, r26	; 0x0d
    2d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a ef       	ldi	r20, 0xFA	; 250
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	8f 83       	std	Y+7, r24	; 0x07
    2d52:	98 87       	std	Y+8, r25	; 0x08
    2d54:	a9 87       	std	Y+9, r26	; 0x09
    2d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	2c f4       	brge	.+10     	; 0x2d7a <LCD_displayCharacter+0x37c>
		__ticks = 1;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 83       	std	Y+6, r25	; 0x06
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	3f c0       	rjmp	.+126    	; 0x2df8 <LCD_displayCharacter+0x3fa>
	else if (__tmp > 65535)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	3f ef       	ldi	r19, 0xFF	; 255
    2d86:	4f e7       	ldi	r20, 0x7F	; 127
    2d88:	57 e4       	ldi	r21, 0x47	; 71
    2d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d8e:	18 16       	cp	r1, r24
    2d90:	4c f5       	brge	.+82     	; 0x2de4 <LCD_displayCharacter+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e2       	ldi	r20, 0x20	; 32
    2da0:	51 e4       	ldi	r21, 0x41	; 65
    2da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	0f c0       	rjmp	.+30     	; 0x2dda <LCD_displayCharacter+0x3dc>
    2dbc:	88 ec       	ldi	r24, 0xC8	; 200
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9c 83       	std	Y+4, r25	; 0x04
    2dc2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_displayCharacter+0x3ca>
    2dcc:	9c 83       	std	Y+4, r25	; 0x04
    2dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	69 f7       	brne	.-38     	; 0x2dbc <LCD_displayCharacter+0x3be>
    2de2:	14 c0       	rjmp	.+40     	; 0x2e0c <LCD_displayCharacter+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfc:	9a 83       	std	Y+2, r25	; 0x02
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_displayCharacter+0x406>
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01


	_delay_ms(1);			/*Hold Time Delay*/

	/*Enable = LOGIC_LOW --> DATA DISABLE*/
	GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2e0c:	83 e0       	ldi	r24, 0x03	; 3
    2e0e:	63 e0       	ldi	r22, 0x03	; 3
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	0e 94 73 07 	call	0xee6	; 0xee6 <GPIO_writePin>

}
    2e16:	ef 96       	adiw	r28, 0x3f	; 63
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <LCD_displayString>:




void LCD_displayString(const char *Str)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <LCD_displayString+0x6>
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	9b 83       	std	Y+3, r25	; 0x03
    2e36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e38:	19 82       	std	Y+1, r1	; 0x01
    2e3a:	0e c0       	rjmp	.+28     	; 0x2e58 <LCD_displayString+0x30>

	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	28 2f       	mov	r18, r24
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	fc 01       	movw	r30, r24
    2e48:	e2 0f       	add	r30, r18
    2e4a:	f3 1f       	adc	r31, r19
    2e4c:	80 81       	ld	r24, Z
    2e4e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <LCD_displayCharacter>
		i++;
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	8f 5f       	subi	r24, 0xFF	; 255
    2e56:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(const char *Str)
{
	uint8 i = 0;

	while(Str[i] != '\0')
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	fc 01       	movw	r30, r24
    2e64:	e2 0f       	add	r30, r18
    2e66:	f3 1f       	adc	r31, r19
    2e68:	80 81       	ld	r24, Z
    2e6a:	88 23       	and	r24, r24
    2e6c:	39 f7       	brne	.-50     	; 0x2e3c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <LCD_moveCursor>:



void LCD_moveCursor(uint8 row,uint8 col)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <LCD_moveCursor+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <LCD_moveCursor+0x8>
    2e82:	0f 92       	push	r0
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	8a 83       	std	Y+2, r24	; 0x02
    2e8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Location;

	switch(row)
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	3d 83       	std	Y+5, r19	; 0x05
    2e94:	2c 83       	std	Y+4, r18	; 0x04
    2e96:	8c 81       	ldd	r24, Y+4	; 0x04
    2e98:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9a:	81 30       	cpi	r24, 0x01	; 1
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	c1 f0       	breq	.+48     	; 0x2ed0 <LCD_moveCursor+0x56>
    2ea0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea4:	22 30       	cpi	r18, 0x02	; 2
    2ea6:	31 05       	cpc	r19, r1
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <LCD_moveCursor+0x3a>
    2eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2eac:	9d 81       	ldd	r25, Y+5	; 0x05
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	61 f0       	breq	.+24     	; 0x2eca <LCD_moveCursor+0x50>
    2eb2:	19 c0       	rjmp	.+50     	; 0x2ee6 <LCD_moveCursor+0x6c>
    2eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb8:	22 30       	cpi	r18, 0x02	; 2
    2eba:	31 05       	cpc	r19, r1
    2ebc:	69 f0       	breq	.+26     	; 0x2ed8 <LCD_moveCursor+0x5e>
    2ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec2:	83 30       	cpi	r24, 0x03	; 3
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	61 f0       	breq	.+24     	; 0x2ee0 <LCD_moveCursor+0x66>
    2ec8:	0e c0       	rjmp	.+28     	; 0x2ee6 <LCD_moveCursor+0x6c>
	{
	case 0:
		Location = col;
    2eca:	8b 81       	ldd	r24, Y+3	; 0x03
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	0b c0       	rjmp	.+22     	; 0x2ee6 <LCD_moveCursor+0x6c>
		break;

	case 1:
		Location = 0x40 | col;
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	80 64       	ori	r24, 0x40	; 64
    2ed4:	89 83       	std	Y+1, r24	; 0x01
    2ed6:	07 c0       	rjmp	.+14     	; 0x2ee6 <LCD_moveCursor+0x6c>
		break;

	case 2:
		Location = 0x10 | col;
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	80 61       	ori	r24, 0x10	; 16
    2edc:	89 83       	std	Y+1, r24	; 0x01
    2ede:	03 c0       	rjmp	.+6      	; 0x2ee6 <LCD_moveCursor+0x6c>
		break;

	case 3:
		Location = 0x50 | col;
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	80 65       	ori	r24, 0x50	; 80
    2ee4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(LCD_SET_CURSOR_POSITION | Location);
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	80 68       	ori	r24, 0x80	; 128
    2eea:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_sendCommand>
}
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	0f 90       	pop	r0
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <LCD_displayStringRowColumn>:



void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <LCD_displayStringRowColumn+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <LCD_displayStringRowColumn+0x8>
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	89 83       	std	Y+1, r24	; 0x01
    2f0c:	6a 83       	std	Y+2, r22	; 0x02
    2f0e:	5c 83       	std	Y+4, r21	; 0x04
    2f10:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	6a 81       	ldd	r22, Y+2	; 0x02
    2f16:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_moveCursor>
	LCD_displayString(Str);
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
}
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	62 97       	sbiw	r28, 0x12	; 18
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	9a 8b       	std	Y+18, r25	; 0x12
    2f46:	89 8b       	std	Y+17, r24	; 0x11
	char buffer[16];
	itoa(data,buffer,10);
    2f48:	89 89       	ldd	r24, Y+17	; 0x11
    2f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4c:	9e 01       	movw	r18, r28
    2f4e:	2f 5f       	subi	r18, 0xFF	; 255
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	b9 01       	movw	r22, r18
    2f54:	4a e0       	ldi	r20, 0x0A	; 10
    2f56:	50 e0       	ldi	r21, 0x00	; 0
    2f58:	0e 94 02 1a 	call	0x3404	; 0x3404 <itoa>
	LCD_displayString(buffer);
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	0e 94 14 17 	call	0x2e28	; 0x2e28 <LCD_displayString>
}
    2f64:	62 96       	adiw	r28, 0x12	; 18
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    2f76:	df 93       	push	r29
    2f78:	cf 93       	push	r28
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_sendCommand>
}
    2f84:	cf 91       	pop	r28
    2f86:	df 91       	pop	r29
    2f88:	08 95       	ret

00002f8a <Timer1_init>:
 * Parameters: Structure of configuration of type (Timer1_ConfigType)
 * The structure includes the initial value of the timer, compare value, mode of operation and prescaler value.
 * Return: void
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <Timer1_init+0x6>
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	9a 83       	std	Y+2, r25	; 0x02
    2f96:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->mode == NORMAL_MODE)
    2f98:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9c:	85 81       	ldd	r24, Z+5	; 0x05
    2f9e:	88 23       	and	r24, r24
    2fa0:	d9 f4       	brne	.+54     	; 0x2fd8 <Timer1_init+0x4e>
	{
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
    2fa2:	ac e4       	ldi	r26, 0x4C	; 76
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	80 81       	ld	r24, Z
    2fac:	91 81       	ldd	r25, Z+1	; 0x01
    2fae:	11 96       	adiw	r26, 0x01	; 1
    2fb0:	9c 93       	st	X, r25
    2fb2:	8e 93       	st	-X, r24

		/*Enable Overflow Interrupt*/
		TIMSK = TIMSK | (1<<TOIE1);
    2fb4:	a9 e5       	ldi	r26, 0x59	; 89
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e9 e5       	ldi	r30, 0x59	; 89
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	84 60       	ori	r24, 0x04	; 4
    2fc0:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Overflow Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Overflow Mode)
		 * WGM1/1:0		 =  0	Normal Mode
		 */
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2fc2:	ef e4       	ldi	r30, 0x4F	; 79
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	8c e0       	ldi	r24, 0x0C	; 12
    2fc8:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0	Normal Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = ((Config_Ptr->prescaler)<<CS10);
    2fca:	ae e4       	ldi	r26, 0x4E	; 78
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	84 81       	ldd	r24, Z+4	; 0x04
    2fd4:	8c 93       	st	X, r24
    2fd6:	29 c0       	rjmp	.+82     	; 0x302a <Timer1_init+0xa0>
	}


	else if(Config_Ptr->mode == COMPARE_MODE)
    2fd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fda:	fa 81       	ldd	r31, Y+2	; 0x02
    2fdc:	85 81       	ldd	r24, Z+5	; 0x05
    2fde:	84 30       	cpi	r24, 0x04	; 4
    2fe0:	21 f5       	brne	.+72     	; 0x302a <Timer1_init+0xa0>
	{
		/*Add the Initial value passed in the configuration structure to the Initial Value Register (TCNT1)*/
		TCNT1 = Config_Ptr->initial_value;
    2fe2:	ac e4       	ldi	r26, 0x4C	; 76
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fea:	80 81       	ld	r24, Z
    2fec:	91 81       	ldd	r25, Z+1	; 0x01
    2fee:	11 96       	adiw	r26, 0x01	; 1
    2ff0:	9c 93       	st	X, r25
    2ff2:	8e 93       	st	-X, r24

		/*Add the Compare value passed in the configuration structure to the Compare Value Register (OCR1A)*/
		OCR1A = Config_Ptr->compare_value;
    2ff4:	aa e4       	ldi	r26, 0x4A	; 74
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	11 96       	adiw	r26, 0x01	; 1
    3002:	9c 93       	st	X, r25
    3004:	8e 93       	st	-X, r24

		/*Enable Compare Interrupt*/
		TIMSK = TIMSK | (1<<OCIE1A);
    3006:	a9 e5       	ldi	r26, 0x59	; 89
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e5       	ldi	r30, 0x59	; 89
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	80 61       	ori	r24, 0x10	; 16
    3012:	8c 93       	st	X, r24
		 * COM1B0/COM1B1 =	0 	Normal Port operation OC1B disconnected.
		 * FOC1A 		 =	1 	Force Output Compare for Compare unit A (Compare Mode)
		 * FOC1B 		 =	1 	Force Output Compare for Compare unit B (Compare Mode)
		 * WGM1/1:0		 =  0	Compare Mode
		 */
		TCCR1A = (1<<FOC1A);
    3014:	ef e4       	ldi	r30, 0x4F	; 79
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	88 e0       	ldi	r24, 0x08	; 8
    301a:	80 83       	st	Z, r24
		 * ICNC1		 =  0	Input Capture Noise Canceler
		 * ICES1		 =  0	CES1: Input Capture Edge Select
		 * WGM13:2		 =  0:1	Compare Mode
		 * CS12:0		 =	Config_Ptr->prescaler (Will be inserted as the pre-scale value passed in configuration structure)
		 */
		TCCR1B = (1<<WGM12) | ((Config_Ptr->prescaler)<<CS10);
    301c:	ae e4       	ldi	r26, 0x4E	; 78
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e9 81       	ldd	r30, Y+1	; 0x01
    3022:	fa 81       	ldd	r31, Y+2	; 0x02
    3024:	84 81       	ldd	r24, Z+4	; 0x04
    3026:	88 60       	ori	r24, 0x08	; 8
    3028:	8c 93       	st	X, r24
	}
}
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <Timer1_deInit>:
 * Timer Module Function used to disable the Timer module in AVR
 * Parameters: void
 * Return: void
 */
void Timer1_deInit(void)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						/*Timer initial register = 0*/
    303c:	ec e4       	ldi	r30, 0x4C	; 76
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	11 82       	std	Z+1, r1	; 0x01
    3042:	10 82       	st	Z, r1
	OCR1A = 0;						/*Timer compare register = 0*/
    3044:	ea e4       	ldi	r30, 0x4A	; 74
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	11 82       	std	Z+1, r1	; 0x01
    304a:	10 82       	st	Z, r1
	TIMSK = (TIMSK & ~(0x3C));		/*Disable Timer1 interrupt*/
    304c:	a9 e5       	ldi	r26, 0x59	; 89
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e9 e5       	ldi	r30, 0x59	; 89
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	83 7c       	andi	r24, 0xC3	; 195
    3058:	8c 93       	st	X, r24
	TCCR1A = 0;						/*Clear TCCR1A register*/
    305a:	ef e4       	ldi	r30, 0x4F	; 79
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	10 82       	st	Z, r1
	TCCR1B = 0;						/*Clear TCCR1B register and stop Timer1*/
    3060:	ee e4       	ldi	r30, 0x4E	; 78
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	10 82       	st	Z, r1
}
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <Timer1_setCallBack>:
/*
 * Timer1 module function used to set the call back function of the module to the passed
 * pointer to function in the parameter of (Timer1_setCallBack)
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	00 d0       	rcall	.+0      	; 0x3072 <Timer1_setCallBack+0x6>
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
	g_call_back_function = a_ptr;
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	90 93 26 01 	sts	0x0126, r25
    3082:	80 93 25 01 	sts	0x0125, r24
}
    3086:	0f 90       	pop	r0
    3088:	0f 90       	pop	r0
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    3090:	1f 92       	push	r1
    3092:	0f 92       	push	r0
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	0f 92       	push	r0
    3098:	11 24       	eor	r1, r1
    309a:	2f 93       	push	r18
    309c:	3f 93       	push	r19
    309e:	4f 93       	push	r20
    30a0:	5f 93       	push	r21
    30a2:	6f 93       	push	r22
    30a4:	7f 93       	push	r23
    30a6:	8f 93       	push	r24
    30a8:	9f 93       	push	r25
    30aa:	af 93       	push	r26
    30ac:	bf 93       	push	r27
    30ae:	ef 93       	push	r30
    30b0:	ff 93       	push	r31
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
	if(g_call_back_function != NULL_PTR)
    30ba:	80 91 25 01 	lds	r24, 0x0125
    30be:	90 91 26 01 	lds	r25, 0x0126
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	29 f0       	breq	.+10     	; 0x30d0 <__vector_9+0x40>
	{
		(*g_call_back_function)();
    30c6:	e0 91 25 01 	lds	r30, 0x0125
    30ca:	f0 91 26 01 	lds	r31, 0x0126
    30ce:	09 95       	icall
	}
}
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	ff 91       	pop	r31
    30d6:	ef 91       	pop	r30
    30d8:	bf 91       	pop	r27
    30da:	af 91       	pop	r26
    30dc:	9f 91       	pop	r25
    30de:	8f 91       	pop	r24
    30e0:	7f 91       	pop	r23
    30e2:	6f 91       	pop	r22
    30e4:	5f 91       	pop	r21
    30e6:	4f 91       	pop	r20
    30e8:	3f 91       	pop	r19
    30ea:	2f 91       	pop	r18
    30ec:	0f 90       	pop	r0
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	0f 90       	pop	r0
    30f2:	1f 90       	pop	r1
    30f4:	18 95       	reti

000030f6 <__vector_7>:




ISR(TIMER1_COMPA_vect)
{
    30f6:	1f 92       	push	r1
    30f8:	0f 92       	push	r0
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	0f 92       	push	r0
    30fe:	11 24       	eor	r1, r1
    3100:	2f 93       	push	r18
    3102:	3f 93       	push	r19
    3104:	4f 93       	push	r20
    3106:	5f 93       	push	r21
    3108:	6f 93       	push	r22
    310a:	7f 93       	push	r23
    310c:	8f 93       	push	r24
    310e:	9f 93       	push	r25
    3110:	af 93       	push	r26
    3112:	bf 93       	push	r27
    3114:	ef 93       	push	r30
    3116:	ff 93       	push	r31
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
	if(g_call_back_function != NULL_PTR)
    3120:	80 91 25 01 	lds	r24, 0x0125
    3124:	90 91 26 01 	lds	r25, 0x0126
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	29 f0       	breq	.+10     	; 0x3136 <__vector_7+0x40>
	{
		(*g_call_back_function)();
    312c:	e0 91 25 01 	lds	r30, 0x0125
    3130:	f0 91 26 01 	lds	r31, 0x0126
    3134:	09 95       	icall
	}

}
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	ff 91       	pop	r31
    313c:	ef 91       	pop	r30
    313e:	bf 91       	pop	r27
    3140:	af 91       	pop	r26
    3142:	9f 91       	pop	r25
    3144:	8f 91       	pop	r24
    3146:	7f 91       	pop	r23
    3148:	6f 91       	pop	r22
    314a:	5f 91       	pop	r21
    314c:	4f 91       	pop	r20
    314e:	3f 91       	pop	r19
    3150:	2f 91       	pop	r18
    3152:	0f 90       	pop	r0
    3154:	0f be       	out	0x3f, r0	; 63
    3156:	0f 90       	pop	r0
    3158:	1f 90       	pop	r1
    315a:	18 95       	reti

0000315c <UART_init>:
 * Used t initialize the UART Module with a pre-defined structure with all UART Configurations
 * Input: UART_ConfigType Structure
 * Return: void
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <UART_init+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <UART_init+0x8>
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    316c:	1a 82       	std	Y+2, r1	; 0x02
    316e:	19 82       	std	Y+1, r1	; 0x01

	/*Enable UART Double speed mode*/
	UCSRA = (1<<U2X);
    3170:	eb e2       	ldi	r30, 0x2B	; 43
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * TXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For (5,6,7,8) bit data mode
	 * RXB8 & TXB8 not used for (5,6,7,8) bit data mode
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3178:	ea e2       	ldi	r30, 0x2A	; 42
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	88 e1       	ldi	r24, 0x18	; 24
    317e:	80 83       	st	Z, r24
	 * UMSEL 	= 0 Asynchronous mode select
	 * UPM1:0 	= Parity data-type in Configuration structure
	 * USBS		= Stop bits data-type in Configuration structure
	 * UCSZ1:0	= Data bits data-type in Configuration structure
	 */
	UCSRC = (1<<URSEL) | ((Config_Ptr->parity)<<UPM0) | ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->bit_data)<<UCSZ0);
    3180:	a0 e4       	ldi	r26, 0x40	; 64
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	eb 81       	ldd	r30, Y+3	; 0x03
    3186:	fc 81       	ldd	r31, Y+4	; 0x04
    3188:	81 81       	ldd	r24, Z+1	; 0x01
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	82 95       	swap	r24
    3190:	92 95       	swap	r25
    3192:	90 7f       	andi	r25, 0xF0	; 240
    3194:	98 27       	eor	r25, r24
    3196:	80 7f       	andi	r24, 0xF0	; 240
    3198:	98 27       	eor	r25, r24
    319a:	28 2f       	mov	r18, r24
    319c:	20 68       	ori	r18, 0x80	; 128
    319e:	eb 81       	ldd	r30, Y+3	; 0x03
    31a0:	fc 81       	ldd	r31, Y+4	; 0x04
    31a2:	82 81       	ldd	r24, Z+2	; 0x02
    31a4:	88 2f       	mov	r24, r24
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	88 0f       	add	r24, r24
    31aa:	99 1f       	adc	r25, r25
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	28 2b       	or	r18, r24
    31b6:	eb 81       	ldd	r30, Y+3	; 0x03
    31b8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	88 0f       	add	r24, r24
    31c2:	99 1f       	adc	r25, r25
    31c4:	82 2b       	or	r24, r18
    31c6:	8c 93       	st	X, r24

	/* BaudRate = (F_CPU) / 8(UBRR + 1)		"UART Double speed mode"
	 * UBRR = ((F_CPU) / (BaudRate * 8)) - 1
	 */
	ubrr_value = (uint16)(F_CPU / ((Config_Ptr->baud_rate) * 8UL) - 1);
    31c8:	eb 81       	ldd	r30, Y+3	; 0x03
    31ca:	fc 81       	ldd	r31, Y+4	; 0x04
    31cc:	83 81       	ldd	r24, Z+3	; 0x03
    31ce:	94 81       	ldd	r25, Z+4	; 0x04
    31d0:	a5 81       	ldd	r26, Z+5	; 0x05
    31d2:	b6 81       	ldd	r27, Z+6	; 0x06
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	aa 1f       	adc	r26, r26
    31da:	bb 1f       	adc	r27, r27
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	aa 1f       	adc	r26, r26
    31e2:	bb 1f       	adc	r27, r27
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	9c 01       	movw	r18, r24
    31ee:	ad 01       	movw	r20, r26
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	92 e1       	ldi	r25, 0x12	; 18
    31f4:	aa e7       	ldi	r26, 0x7A	; 122
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 a9 19 	call	0x3352	; 0x3352 <__udivmodsi4>
    3200:	da 01       	movw	r26, r20
    3202:	c9 01       	movw	r24, r18
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01


	UBRRH = (ubrr_value>>8);		/*UBRR-High = ubrr_value shifted right by 8 bits*/
    320a:	e0 e4       	ldi	r30, 0x40	; 64
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	89 2f       	mov	r24, r25
    3214:	99 27       	eor	r25, r25
    3216:	80 83       	st	Z, r24
	UBRRL = ubrr_value;				/*UBRR-Low = first 8 bits of ubrr_value*/
    3218:	e9 e2       	ldi	r30, 0x29	; 41
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	80 83       	st	Z, r24
}
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <UART_sendByte>:
/*
 * UART Module function
 * Responsible for sending byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	0f 92       	push	r0
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62
    3238:	89 83       	std	Y+1, r24	; 0x01
	/*Wait until the buffer is empty and ready to take new data frame*/
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    323a:	eb e2       	ldi	r30, 0x2B	; 43
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	80 72       	andi	r24, 0x20	; 32
    3246:	90 70       	andi	r25, 0x00	; 0
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	b9 f3       	breq	.-18     	; 0x323a <UART_sendByte+0xc>

	UDR = data;
    324c:	ec e2       	ldi	r30, 0x2C	; 44
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	80 83       	st	Z, r24
}
    3254:	0f 90       	pop	r0
    3256:	cf 91       	pop	r28
    3258:	df 91       	pop	r29
    325a:	08 95       	ret

0000325c <UART_receiveByte>:
/*
 * UART Module function
 * Responsible for receiving byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    325c:	df 93       	push	r29
    325e:	cf 93       	push	r28
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA, RXC));
    3264:	eb e2       	ldi	r30, 0x2B	; 43
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	88 23       	and	r24, r24
    326c:	dc f7       	brge	.-10     	; 0x3264 <UART_receiveByte+0x8>

	return UDR;
    326e:	ec e2       	ldi	r30, 0x2C	; 44
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
}
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <UART_sendString>:
/*
 * UART Module function
 * Responsible for sending string to another UART device.
 */
void UART_sendString(const uint8 *Str)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <UART_sendString+0x6>
    3280:	0f 92       	push	r0
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9b 83       	std	Y+3, r25	; 0x03
    3288:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	0e c0       	rjmp	.+28     	; 0x32aa <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	fc 01       	movw	r30, r24
    329a:	e2 0f       	add	r30, r18
    329c:	f3 1f       	adc	r31, r19
    329e:	80 81       	ld	r24, Z
    32a0:	0e 94 17 19 	call	0x322e	; 0x322e <UART_sendByte>
		i++;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	fc 01       	movw	r30, r24
    32b6:	e2 0f       	add	r30, r18
    32b8:	f3 1f       	adc	r31, r19
    32ba:	80 81       	ld	r24, Z
    32bc:	88 23       	and	r24, r24
    32be:	39 f7       	brne	.-50     	; 0x328e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <UART_receiveString>:
/*
 * UART Module function
 * Responsible for receiving string from another UART device.
 */
void UART_receiveString(uint8 *Str)
{
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	df 93       	push	r29
    32d2:	cf 93       	push	r28
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <UART_receiveString+0xa>
    32d6:	0f 92       	push	r0
    32d8:	cd b7       	in	r28, 0x3d	; 61
    32da:	de b7       	in	r29, 0x3e	; 62
    32dc:	9b 83       	std	Y+3, r25	; 0x03
    32de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32e0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	8c 01       	movw	r16, r24
    32ee:	02 0f       	add	r16, r18
    32f0:	13 1f       	adc	r17, r19
    32f2:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    32f6:	f8 01       	movw	r30, r16
    32f8:	80 83       	st	Z, r24
    32fa:	0f c0       	rjmp	.+30     	; 0x331a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	8f 5f       	subi	r24, 0xFF	; 255
    3300:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	28 2f       	mov	r18, r24
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	9b 81       	ldd	r25, Y+3	; 0x03
    330c:	8c 01       	movw	r16, r24
    330e:	02 0f       	add	r16, r18
    3310:	13 1f       	adc	r17, r19
    3312:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_receiveByte>
    3316:	f8 01       	movw	r30, r16
    3318:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	fc 01       	movw	r30, r24
    3326:	e2 0f       	add	r30, r18
    3328:	f3 1f       	adc	r31, r19
    332a:	80 81       	ld	r24, Z
    332c:	83 32       	cpi	r24, 0x23	; 35
    332e:	31 f7       	brne	.-52     	; 0x32fc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	8a 81       	ldd	r24, Y+2	; 0x02
    3338:	9b 81       	ldd	r25, Y+3	; 0x03
    333a:	fc 01       	movw	r30, r24
    333c:	e2 0f       	add	r30, r18
    333e:	f3 1f       	adc	r31, r19
    3340:	10 82       	st	Z, r1
}
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	08 95       	ret

00003352 <__udivmodsi4>:
    3352:	a1 e2       	ldi	r26, 0x21	; 33
    3354:	1a 2e       	mov	r1, r26
    3356:	aa 1b       	sub	r26, r26
    3358:	bb 1b       	sub	r27, r27
    335a:	fd 01       	movw	r30, r26
    335c:	0d c0       	rjmp	.+26     	; 0x3378 <__udivmodsi4_ep>

0000335e <__udivmodsi4_loop>:
    335e:	aa 1f       	adc	r26, r26
    3360:	bb 1f       	adc	r27, r27
    3362:	ee 1f       	adc	r30, r30
    3364:	ff 1f       	adc	r31, r31
    3366:	a2 17       	cp	r26, r18
    3368:	b3 07       	cpc	r27, r19
    336a:	e4 07       	cpc	r30, r20
    336c:	f5 07       	cpc	r31, r21
    336e:	20 f0       	brcs	.+8      	; 0x3378 <__udivmodsi4_ep>
    3370:	a2 1b       	sub	r26, r18
    3372:	b3 0b       	sbc	r27, r19
    3374:	e4 0b       	sbc	r30, r20
    3376:	f5 0b       	sbc	r31, r21

00003378 <__udivmodsi4_ep>:
    3378:	66 1f       	adc	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	1a 94       	dec	r1
    3382:	69 f7       	brne	.-38     	; 0x335e <__udivmodsi4_loop>
    3384:	60 95       	com	r22
    3386:	70 95       	com	r23
    3388:	80 95       	com	r24
    338a:	90 95       	com	r25
    338c:	9b 01       	movw	r18, r22
    338e:	ac 01       	movw	r20, r24
    3390:	bd 01       	movw	r22, r26
    3392:	cf 01       	movw	r24, r30
    3394:	08 95       	ret

00003396 <__prologue_saves__>:
    3396:	2f 92       	push	r2
    3398:	3f 92       	push	r3
    339a:	4f 92       	push	r4
    339c:	5f 92       	push	r5
    339e:	6f 92       	push	r6
    33a0:	7f 92       	push	r7
    33a2:	8f 92       	push	r8
    33a4:	9f 92       	push	r9
    33a6:	af 92       	push	r10
    33a8:	bf 92       	push	r11
    33aa:	cf 92       	push	r12
    33ac:	df 92       	push	r13
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	ca 1b       	sub	r28, r26
    33c0:	db 0b       	sbc	r29, r27
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	09 94       	ijmp

000033ce <__epilogue_restores__>:
    33ce:	2a 88       	ldd	r2, Y+18	; 0x12
    33d0:	39 88       	ldd	r3, Y+17	; 0x11
    33d2:	48 88       	ldd	r4, Y+16	; 0x10
    33d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    33d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    33da:	8c 84       	ldd	r8, Y+12	; 0x0c
    33dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    33de:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e0:	b9 84       	ldd	r11, Y+9	; 0x09
    33e2:	c8 84       	ldd	r12, Y+8	; 0x08
    33e4:	df 80       	ldd	r13, Y+7	; 0x07
    33e6:	ee 80       	ldd	r14, Y+6	; 0x06
    33e8:	fd 80       	ldd	r15, Y+5	; 0x05
    33ea:	0c 81       	ldd	r16, Y+4	; 0x04
    33ec:	1b 81       	ldd	r17, Y+3	; 0x03
    33ee:	aa 81       	ldd	r26, Y+2	; 0x02
    33f0:	b9 81       	ldd	r27, Y+1	; 0x01
    33f2:	ce 0f       	add	r28, r30
    33f4:	d1 1d       	adc	r29, r1
    33f6:	0f b6       	in	r0, 0x3f	; 63
    33f8:	f8 94       	cli
    33fa:	de bf       	out	0x3e, r29	; 62
    33fc:	0f be       	out	0x3f, r0	; 63
    33fe:	cd bf       	out	0x3d, r28	; 61
    3400:	ed 01       	movw	r28, r26
    3402:	08 95       	ret

00003404 <itoa>:
    3404:	fb 01       	movw	r30, r22
    3406:	9f 01       	movw	r18, r30
    3408:	e8 94       	clt
    340a:	42 30       	cpi	r20, 0x02	; 2
    340c:	c4 f0       	brlt	.+48     	; 0x343e <itoa+0x3a>
    340e:	45 32       	cpi	r20, 0x25	; 37
    3410:	b4 f4       	brge	.+44     	; 0x343e <itoa+0x3a>
    3412:	4a 30       	cpi	r20, 0x0A	; 10
    3414:	29 f4       	brne	.+10     	; 0x3420 <itoa+0x1c>
    3416:	97 fb       	bst	r25, 7
    3418:	1e f4       	brtc	.+6      	; 0x3420 <itoa+0x1c>
    341a:	90 95       	com	r25
    341c:	81 95       	neg	r24
    341e:	9f 4f       	sbci	r25, 0xFF	; 255
    3420:	64 2f       	mov	r22, r20
    3422:	77 27       	eor	r23, r23
    3424:	0e 94 33 1a 	call	0x3466	; 0x3466 <__udivmodhi4>
    3428:	80 5d       	subi	r24, 0xD0	; 208
    342a:	8a 33       	cpi	r24, 0x3A	; 58
    342c:	0c f0       	brlt	.+2      	; 0x3430 <itoa+0x2c>
    342e:	89 5d       	subi	r24, 0xD9	; 217
    3430:	81 93       	st	Z+, r24
    3432:	cb 01       	movw	r24, r22
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	a1 f7       	brne	.-24     	; 0x3420 <itoa+0x1c>
    3438:	16 f4       	brtc	.+4      	; 0x343e <itoa+0x3a>
    343a:	5d e2       	ldi	r21, 0x2D	; 45
    343c:	51 93       	st	Z+, r21
    343e:	10 82       	st	Z, r1
    3440:	c9 01       	movw	r24, r18
    3442:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <strrev>

00003446 <strrev>:
    3446:	dc 01       	movw	r26, r24
    3448:	fc 01       	movw	r30, r24
    344a:	67 2f       	mov	r22, r23
    344c:	71 91       	ld	r23, Z+
    344e:	77 23       	and	r23, r23
    3450:	e1 f7       	brne	.-8      	; 0x344a <strrev+0x4>
    3452:	32 97       	sbiw	r30, 0x02	; 2
    3454:	04 c0       	rjmp	.+8      	; 0x345e <strrev+0x18>
    3456:	7c 91       	ld	r23, X
    3458:	6d 93       	st	X+, r22
    345a:	70 83       	st	Z, r23
    345c:	62 91       	ld	r22, -Z
    345e:	ae 17       	cp	r26, r30
    3460:	bf 07       	cpc	r27, r31
    3462:	c8 f3       	brcs	.-14     	; 0x3456 <strrev+0x10>
    3464:	08 95       	ret

00003466 <__udivmodhi4>:
    3466:	aa 1b       	sub	r26, r26
    3468:	bb 1b       	sub	r27, r27
    346a:	51 e1       	ldi	r21, 0x11	; 17
    346c:	07 c0       	rjmp	.+14     	; 0x347c <__udivmodhi4_ep>

0000346e <__udivmodhi4_loop>:
    346e:	aa 1f       	adc	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	a6 17       	cp	r26, r22
    3474:	b7 07       	cpc	r27, r23
    3476:	10 f0       	brcs	.+4      	; 0x347c <__udivmodhi4_ep>
    3478:	a6 1b       	sub	r26, r22
    347a:	b7 0b       	sbc	r27, r23

0000347c <__udivmodhi4_ep>:
    347c:	88 1f       	adc	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	5a 95       	dec	r21
    3482:	a9 f7       	brne	.-22     	; 0x346e <__udivmodhi4_loop>
    3484:	80 95       	com	r24
    3486:	90 95       	com	r25
    3488:	bc 01       	movw	r22, r24
    348a:	cd 01       	movw	r24, r26
    348c:	08 95       	ret

0000348e <_exit>:
    348e:	f8 94       	cli

00003490 <__stop_program>:
    3490:	ff cf       	rjmp	.-2      	; 0x3490 <__stop_program>
